\input texinfo

@c reference.texi --- Reference manual

@c Copyright (C) 2010-2012, 2015, 2017, 2020-2025 Didier Verna

@c This file is part of Clon.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.
@c 
@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:

@c Generated automatically by Declt version 4.0 beta 3 "William Riker"
@c on Sun Jun 15 22:17:31 2025 GMT+1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename clon-reference.info
@settitle The Clon Reference Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Format Specific Tweaks
@c ====================================================================
@tex
%% Declt uses several Unicode characters to "reveal" blanks. This
%% works fine in HTML or Info output, but TeX will have problems with
%% these. The code below translates those characters to something that
%% TeX can handle.

%% U+23B5 (Bottom Square Bracket), used to reveal white spaces, is
%% translated to its Computer Modern teletype version.
\DeclareUnicodeCharacter{23B5}{{\tt\char'040}}

%% U+21B5 (Downwards Arrow With Corner Leftwards), used to reveal
%% carriage returns, is translated to \hookleftarrow in math mode.
\DeclareUnicodeCharacter{21B5}{\ensuremath\hookleftarrow}

%% U+21E5 (Rightwards Arrow To Bar), used to reveal tabs, is
%% translated to something that looks similar, based on a rightarrow
%% and a vertical bar from the math extension font.
\DeclareUnicodeCharacter{21E5}{%
  \ensuremath{\rightarrow\kern-.5em\mathchar\"130C}}


%% Declt uses several Unicode characters to replace "fragile" ones in
%% anchor names and references. These characters are chosen to resemble
%% the original ones, without interfering with Info syntax. In TeX
%% however, we can switch them back to the original versions, because
%% cross-references are done differently. In theory, I think we could do
%% something similar for HTML output (again, only the Info syntax poses
%% problems), but I don't know how to do something similar to what's
%% below.

%% U+2024 (One Dot Leader) replaces periods.
\DeclareUnicodeCharacter{2024}{.}

%% U+2236 (Ratio) replaces colons.
\DeclareUnicodeCharacter{2236}{:}

%% U+2768 (Medium Left Parenthesis Ornament) replaces left parenthesis.
\DeclareUnicodeCharacter{2768}{(}

%% U+2769 (Medium Right Parenthesis Ornament) replaces right parenthesis.
\DeclareUnicodeCharacter{2769}{)}

%% U+214B (Turned Ampersand) replaces ampersands.
\DeclareUnicodeCharacter{214B}{&}

%% U+2216 (Set Minus) replaces backslashes.
\DeclareUnicodeCharacter{2216}{\char"5C}

%% The following ones are already defined in texinfo.tex so we have nothing
%% more to do:
%% U+201A (Single Low-9 Quotation Mark) replaces commas.
%% U+2205 (Empty Set) replaces empty symbol names.

@end tex



@c ====================================================================
@c Settings
@c ====================================================================
@setchapternewpage odd
@documentdescription
The Clon Reference Manual, version 1.0 beta 27 "Michael Brecker".
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@c ---------------
@c Indexing macros
@c ---------------

@c Packages
@macro packageindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro systemindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro

@c Modules
@macro moduleindex{name}
@tpindex @t{\name\}
@tpindex Module, @t{\name\}
@end macro

@c Files
@macro fileindex{name}
@tpindex @t{\name\}
@tpindex File, @t{\name\}
@end macro

@c The following macros are meant to be used within @defxxx environments.
@c Texinfo performs half the indexing job and we do the other half.

@c Constants
@macro constantsubindex{name}
@vindex @r{Constant, }\name\
@end macro

@c Special variables
@macro specialsubindex{name}
@vindex @r{Special Variable, }\name\
@end macro

@c Symbol macros
@macro symbolmacrosubindex{name}
@vindex @r{Symbol Macro, }\name\
@end macro

@c Slots
@macro slotsubindex{name}
@vindex @r{Slot, }\name\
@end macro

@c Macros
@macro macrosubindex{name}
@findex @r{Macro, }\name\
@end macro

@c Compiler Macros
@macro compilermacrosubindex{name}
@findex @r{Compiler Macro, }\name\
@end macro

@c Functions
@macro functionsubindex{name}
@findex @r{Function, }\name\
@end macro

@c Methods
@macro methodsubindex{name}
@findex @r{Method, }\name\
@end macro

@c Generic Functions
@macro genericsubindex{name}
@findex @r{Generic Function, }\name\
@end macro

@c Setf Expanders
@macro expandersubindex{name}
@findex @r{Setf Expander, }\name\
@end macro

@c Method Combinations
@macro combinationsubindex{name}
@findex @r{Method Combination, }\name\
@end macro

@c Conditions
@macro conditionsubindex{name}
@tpindex @r{Condition, }\name\
@end macro

@c Structures
@macro structuresubindex{name}
@tpindex @r{Structure, }\name\
@end macro

@c Types
@macro typesubindex{name}
@tpindex @r{Type, }\name\
@end macro

@c Classes
@macro classsubindex{name}
@tpindex @r{Class, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Clon Reference Manual: (clon-reference). The Clon Reference Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} 2010-2012@comma{} 2015@comma{} 2017@comma{} 2020-2025 Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Clon Reference Manual
@subtitle The Command-Line Options Nuker, version 1.0 beta 27 "Michael Brecker"

@vskip 2cm
@image{splash,16cm}
@author Didier Verna <@email{didier@atchar{}didierverna.net}>

@page
@quotation
This manual was generated automatically by Declt 4.0 beta 3 "William Riker" on Sun Jun 15 22:17:31 2025 GMT+1.
@end quotation
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Top
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Clon Reference Manual
This is the Clon Reference Manual, version 1.0 beta 27 "Michael Brecker",
generated automatically by Declt version 4.0 beta 3 "William Riker"
on Sun Jun 15 22:17:31 2025 GMT+1.

@menu
* Copying:: The BSD License
* Introduction:: What Clon is all about
* Systems:: The systems documentation
* Modules:: The modules documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying
@quotation
Permission to use@comma{} copy@comma{} modify@comma{} and distribute this software for any
purpose with or without fee is hereby granted@comma{} provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL@comma{} DIRECT@comma{} INDIRECT@comma{} OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE@comma{} DATA OR PROFITS@comma{} WHETHER IN AN
ACTION OF CONTRACT@comma{} NEGLIGENCE OR OTHER TORTIOUS ACTION@comma{} ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Systems, Copying, Top
@chapter Introduction
@macro clon
@t{Clon}
@end macro

@macro cmdline
command-line
@end macro

@macro CmdLine
Command-Line
@end macro

@macro cl
Common-Lisp
@end macro

@macro tty
@t{tty}
@end macro

@macro etc
@i{etc.}
@end macro

@ifinfo
@macro pxenduserref{node}
@pxref{\node\, , , clon-enduser, The Clon End-User Manual}
@end macro
@end ifinfo
@ifnotinfo
@macro pxenduserref{node}
@pxref{\node\, , , enduser, The Clon End-User Manual}
@end macro
@end ifnotinfo

@ifinfo
@macro pxuserref{node}
@pxref{\node\, , , clon-user, The Clon User Manual}
@end macro
@end ifinfo
@ifnotinfo
@macro pxuserref{node}
@pxref{\node\, , , user, The Clon User Manual}
@end macro
@end ifnotinfo

@clon{} is a library for managing @cmdline{} options in standalone @cl{}
applications. It provides a unified option syntax with both short and
long names, automatic completion of partial names and automatic
retrieval/conversion of option arguments from the @cmdline{}, associated
environment variables, fallback or default values. @clon{} comes with a
set of extensible option types (switches, paths, strings @etc{}).
@clon{} also provides automatic generation and formatting of help
strings, with support for highlighting on @tty{}'s through ISO/IEC 6429
SGR. This formatting is customizable through @emph{themes}.

Depending on the target audience, @clon{} stands for either ``The
@CmdLine{} Options Nuker'' or ``The @cl{} Options Nuker''. @clon{} also
has a recursive acronym: ``@clon{} Likes Options Nuking'', and a reverse
one: ``Never Omit to Link with @clon{}''. Other possible expansions of
the acronym are still being investigated.

This is the @clon{} reference manual, and as such, it is not meant to be
read. It may help you find sleep in case of insomnia though. @clon{}
comes with two human-readable manuals:
@itemize @bullet
@item
the ``end-user manual'' (@pxenduserref{Top}) is for the @clon{}
@emph{end-user}, that is, the user of an application powered by @clon{}.
It describes how to use the @cmdline{} of clonified@footnote{An
application using @clon{} for its @cmdline{} option management is said to
be @emph{clonified}. It is also possible to say @emph{clonfiscated}.
However, we advise against using @emph{clonistified}. The term
@emph{clonificated} is also considered bad style, and the use of
@emph{clonificationated} is strictly prohibited.} applications and how to
customize @clon{}'s output. Everybody should read this manual first.
@item
the ``user manual'' (@pxenduserref{Top}) is for the @clon{} @emph{user},
that is, the developer of a @cl{} application who wants to use @clon{} for
@cmdline{} option management. It describes how to clonify your application
and extend the library with your own option types.
@end itemize



@c ====================================================================
@c Systems
@c ====================================================================
@node Systems, Modules, Introduction, Top
@chapter Systems
The main system appears first, followed by any subsystem dependency.

@menu
* The net․didierverna․clon system::
* The net․didierverna․clon․setup/termio system::
* The net․didierverna․clon․setup system::
* The net․didierverna․clon․core system::
* The net․didierverna․clon․termio system::
@end menu


@c -------------------------------
@c The net.didierverna.clon system
@c -------------------------------
@node The net․didierverna․clon system, The net․didierverna․clon․setup/termio system, Systems, Systems
@section @t{net.didierverna.clon}
@anchor{❨0❩}@c
@systemindex{net.didierverna.clon}@c
Command-line options management for standalone Common Lisp applications
@table @strong
@item Long Name
The Command-Line Options Nuker
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/clon.php}
@item Source Control
@uref{https://github.com/didierverna/clon}
@item License
BSD
@item Long Description

Clon is a library for command-line options management. It is intended to ease
the creation of standalone Common Lisp applications by providing a powerful
and uniform command-line options interface. The most important features of
Clon are the following.@*

  - From the application programmer's point of view: centralized command-line
  options specification and management@comma{} including automatic generation of help
  strings@comma{} conversion from command-line / defaults / fallbacks / environment
  variables to application-level option values@comma{} global or on-demand option
  retrieval@comma{} and extensibility (the programmer can define his own option
  types).@*

  - From the application user's point of view: uniform command-line option
  syntax across all Clon applications@comma{} customization of the help strings
  layout (with optional ISO6429 coloring on terminals that support it)@comma{}
  automatic completion of abbreviated option names and short/long/pack syntax.
@item Defsystem Dependency
@ref{❨1❩, , @t{net.didierverna.clon.setup/termio}}@: (system).
@item Dependencies
@itemize @bullet
@item
@ref{❨3❩, , @t{net.didierverna.clon.core}}@: (system).
@item
@ref{❨4❩, , @t{net.didierverna.clon.termio}}@: (system)., for feature @t{:net.didierverna.clon.termio}
@end itemize
@item Source
@ref{❨10❩, , @t{net.didierverna.clon.asd}}.
@end table


@c --------------------------------------------
@c The net.didierverna.clon.setup/termio system
@c --------------------------------------------
@node The net․didierverna․clon․setup/termio system, The net․didierverna․clon․setup system, The net․didierverna․clon system, Systems
@section @t{net.didierverna.clon.setup/termio}
@anchor{❨1❩}@c
@systemindex{net.didierverna.clon.setup/termio}@c
Clon's support for automatic configuration of termio support
@table @strong
@item Long Name
The Command-Line Options Nuker@comma{} termio setup
@item Author
Didier Verna <@email{didier@atchar{}didierverna.net}>
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/clon.php}
@item Source Control
@uref{https://github.com/didierverna/clon}
@item License
BSD
@item Long Description

This is a virtual subsystem or Clon (no actual code). Its purpose is only to
autodetect termio support and update Clon's preload configuration on load. For
a more complete description of Clon@comma{} see the net.didierverna.clon system.
@item Dependency
@ref{❨2❩, , @t{net.didierverna.clon.setup}}@: (system).
@item Source
@ref{❨11❩, , @t{net.didierverna.clon.setup.asd}}.
@end table


@c -------------------------------------
@c The net.didierverna.clon.setup system
@c -------------------------------------
@node The net․didierverna․clon․setup system, The net․didierverna․clon․core system, The net․didierverna․clon․setup/termio system, Systems
@section @t{net.didierverna.clon.setup}
@anchor{❨2❩}@c
@systemindex{net.didierverna.clon.setup}@c
Clon's preload setup library
@table @strong
@item Long Name
The Command-Line Options Nuker@comma{} setup library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/clon.php}
@item Source Control
@uref{https://github.com/didierverna/clon}
@item License
BSD
@item Long Description

The Clon setup library provides support for various preload configuration
parameters and meta-utilities. For a more complete description of Clon@comma{}
see the `net.didierverna.clon' system.
@item Dependency
@t{named-readtables}@: (system).
@item Source
@ref{❨11❩, , @t{net.didierverna.clon.setup.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{❨14❩, , @t{package.lisp}}@: (file).
@item
@ref{❨5❩, , @t{src}}@: (module).
@end itemize
@end table


@c ------------------------------------
@c The net.didierverna.clon.core system
@c ------------------------------------
@node The net․didierverna․clon․core system, The net․didierverna․clon․termio system, The net․didierverna․clon․setup system, Systems
@section @t{net.didierverna.clon.core}
@anchor{❨3❩}@c
@systemindex{net.didierverna.clon.core}@c
Clon's basic@comma{} platform-independent functionality
@table @strong
@item Long Name
The Command-Line Options Nuker@comma{} core library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/clon.php}
@item Source Control
@uref{https://github.com/didierverna/clon}
@item License
BSD
@item Long Description

Clon's core library provides the platform/feature independent part. For a more
complete description of Clon@comma{} see the net.didierverna.clon system.
@item Dependencies
@itemize @bullet
@item
@t{sb-posix}@: (system)., required, for feature @t{:sbcl}
@item
@ref{❨2❩, , @t{net.didierverna.clon.setup}}@: (system).
@end itemize
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{❨19❩, , @t{package.lisp}}@: (file).
@item
@ref{❨6❩, , @t{src}}@: (module).
@end itemize
@end table


@c --------------------------------------
@c The net.didierverna.clon.termio system
@c --------------------------------------
@node The net․didierverna․clon․termio system, , The net․didierverna․clon․core system, Systems
@section @t{net.didierverna.clon.termio}
@anchor{❨4❩}@c
@systemindex{net.didierverna.clon.termio}@c
Clon's support for termio (tty geometry and fontification)
@table @strong
@item Long Name
The Command-Line Options Nuker@comma{} termio library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/clon.php}
@item Source Control
@uref{https://github.com/didierverna/clon}
@item License
BSD
@item Long Description

Clon's termio library provides automatic detection of tty geometry and ISO6429
coloring on terminals that support it. For a more complete description of
Clon@comma{} see the net.didierverna.clon system.
@item If Feature
@t{:net.didierverna.clon.termio}
@item Defsystem Dependencies
@itemize @bullet
@item
@ref{❨1❩, , @t{net.didierverna.clon.setup/termio}}@: (system).
@item
@t{sb-grovel}@: (system)., required, for feature @t{:sbcl}
@item
@t{cffi-grovel}@: (system)., for feature @t{(:or :allegro :clisp :lispworks)}
@end itemize
@item Dependencies
@itemize @bullet
@item
@t{sb-posix}@: (system)., for feature @t{:sbcl}
@item
@t{cffi}@: (system)., for feature @t{(:and :clisp :net.didierverna.clon.termio)}
@item
@ref{❨2❩, , @t{net.didierverna.clon.setup}}@: (system).
@item
@ref{❨3❩, , @t{net.didierverna.clon.core}}@: (system).
@end itemize
@item Source
@ref{❨13❩, , @t{net.didierverna.clon.termio.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{❨43❩, , @t{sbcl/constants.lisp}}@: (file).
@item
@ref{❨44❩, , @t{termio.lisp}}@: (file).
@end itemize
@end table



@c ====================================================================
@c Modules
@c ====================================================================
@node Modules, Files, Systems, Top
@chapter Modules
Modules are listed depth-first from the system components tree.

@menu
* The net․didierverna․clon․setup/src module::
* The net․didierverna․clon․core/src module::
* The net․didierverna․clon․core/src/options module::
* The net․didierverna․clon․core/src/retrieval module::
* The net․didierverna․clon․core/src/output module::
@end menu


@c -----------------------------------------
@c The net.didierverna.clon.setup/src module
@c -----------------------------------------
@node The net․didierverna․clon․setup/src module, The net․didierverna․clon․core/src module, Modules, Modules
@section @t{net.didierverna.clon.setup/src}
@anchor{❨5❩}@c
@moduleindex{src}@c
@table @strong
@item Dependency
@ref{❨14❩, , @t{package.lisp}}@: (file).
@item Source
@ref{❨11❩, , @t{net.didierverna.clon.setup.asd}}.
@item Parent Component
@ref{❨2❩, , @t{net.didierverna.clon.setup}}@: (system).
@item Child Components
@itemize @bullet
@item
@ref{❨15❩, , @t{configuration.lisp}}@: (file).
@item
@ref{❨16❩, , @t{readtable.lisp}}@: (file).
@item
@ref{❨17❩, , @t{version.lisp}}@: (file).
@item
@ref{❨18❩, , @t{termio.lisp}}@: (file).
@end itemize
@end table


@c ----------------------------------------
@c The net.didierverna.clon.core/src module
@c ----------------------------------------
@node The net․didierverna․clon․core/src module, The net․didierverna․clon․core/src/options module, The net․didierverna․clon․setup/src module, Modules
@section @t{net.didierverna.clon.core/src}
@anchor{❨6❩}@c
@moduleindex{src}@c
@table @strong
@item Dependency
@ref{❨19❩, , @t{package.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨3❩, , @t{net.didierverna.clon.core}}@: (system).
@item Child Components
@itemize @bullet
@item
@ref{❨20❩, , @t{util.lisp}}@: (file).
@item
@ref{❨21❩, , @t{item.lisp}}@: (file).
@item
@ref{❨22❩, , @t{text.lisp}}@: (file).
@item
@ref{❨7❩, , @t{options}}@: (module).
@item
@ref{❨35❩, , @t{container.lisp}}@: (file).
@item
@ref{❨36❩, , @t{group.lisp}}@: (file).
@item
@ref{❨8❩, , @t{retrieval}}@: (module).
@item
@ref{❨39❩, , @t{synopsis.lisp}}@: (file).
@item
@ref{❨9❩, , @t{output}}@: (module).
@item
@ref{❨42❩, , @t{context.lisp}}@: (file).
@end itemize
@end table


@c ------------------------------------------------
@c The net.didierverna.clon.core/src/options module
@c ------------------------------------------------
@node The net․didierverna․clon․core/src/options module, The net․didierverna․clon․core/src/retrieval module, The net․didierverna․clon․core/src module, Modules
@section @t{net.didierverna.clon.core/src/options}
@anchor{❨7❩}@c
@moduleindex{options}@c
@table @strong
@item Dependency
@ref{❨22❩, , @t{text.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Child Components
@itemize @bullet
@item
@ref{❨23❩, , @t{option.lisp}}@: (file).
@item
@ref{❨24❩, , @t{flag.lisp}}@: (file).
@item
@ref{❨25❩, , @t{valued.lisp}}@: (file).
@item
@ref{❨26❩, , @t{negatable.lisp}}@: (file).
@item
@ref{❨27❩, , @t{switch-base.lisp}}@: (file).
@item
@ref{❨28❩, , @t{switch.lisp}}@: (file).
@item
@ref{❨29❩, , @t{stropt.lisp}}@: (file).
@item
@ref{❨30❩, , @t{lispobj.lisp}}@: (file).
@item
@ref{❨31❩, , @t{path.lisp}}@: (file).
@item
@ref{❨32❩, , @t{enum-base.lisp}}@: (file).
@item
@ref{❨33❩, , @t{enum.lisp}}@: (file).
@item
@ref{❨34❩, , @t{xswitch.lisp}}@: (file).
@end itemize
@end table


@c --------------------------------------------------
@c The net.didierverna.clon.core/src/retrieval module
@c --------------------------------------------------
@node The net․didierverna․clon․core/src/retrieval module, The net․didierverna․clon․core/src/output module, The net․didierverna․clon․core/src/options module, Modules
@section @t{net.didierverna.clon.core/src/retrieval}
@anchor{❨8❩}@c
@moduleindex{retrieval}@c
@table @strong
@item Dependency
@ref{❨7❩, , @t{options}}@: (module).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Child Components
@itemize @bullet
@item
@ref{❨37❩, , @t{cmdline.lisp}}@: (file).
@item
@ref{❨38❩, , @t{environ.lisp}}@: (file).
@end itemize
@end table


@c -----------------------------------------------
@c The net.didierverna.clon.core/src/output module
@c -----------------------------------------------
@node The net․didierverna․clon․core/src/output module, , The net․didierverna․clon․core/src/retrieval module, Modules
@section @t{net.didierverna.clon.core/src/output}
@anchor{❨9❩}@c
@moduleindex{output}@c
@table @strong
@item Dependencies
@itemize @bullet
@item
@ref{❨39❩, , @t{synopsis.lisp}}@: (file).
@item
@ref{❨8❩, , @t{retrieval}}@: (module).
@end itemize
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Child Components
@itemize @bullet
@item
@ref{❨40❩, , @t{face.lisp}}@: (file).
@item
@ref{❨41❩, , @t{sheet.lisp}}@: (file).
@end itemize
@end table



@c ====================================================================
@c Files
@c ====================================================================
@node Files, Packages, Modules, Top
@chapter Files
Files are sorted by type and then listed depth-first from the systems
components trees.

@menu
* Lisp files::
@end menu


@c ----------
@c Lisp files
@c ----------
@node Lisp files, , Files, Files
@section Lisp
@menu
* The net․didierverna․clon/net․didierverna․clon․asd file::
* The net․didierverna․clon․setup/termio/net․didierverna․clon․setup․asd file::
* The net․didierverna․clon․core/net․didierverna․clon․core․asd file::
* The net․didierverna․clon․termio/net․didierverna․clon․termio․asd file::
* The net․didierverna․clon․setup/package․lisp file::
* The net․didierverna․clon․setup/src/configuration․lisp file::
* The net․didierverna․clon․setup/src/readtable․lisp file::
* The net․didierverna․clon․setup/src/version․lisp file::
* The net․didierverna․clon․setup/src/termio․lisp file::
* The net․didierverna․clon․core/package․lisp file::
* The net․didierverna․clon․core/src/util․lisp file::
* The net․didierverna․clon․core/src/item․lisp file::
* The net․didierverna․clon․core/src/text․lisp file::
* The net․didierverna․clon․core/src/options/option․lisp file::
* The net․didierverna․clon․core/src/options/flag․lisp file::
* The net․didierverna․clon․core/src/options/valued․lisp file::
* The net․didierverna․clon․core/src/options/negatable․lisp file::
* The net․didierverna․clon․core/src/options/switch-base․lisp file::
* The net․didierverna․clon․core/src/options/switch․lisp file::
* The net․didierverna․clon․core/src/options/stropt․lisp file::
* The net․didierverna․clon․core/src/options/lispobj․lisp file::
* The net․didierverna․clon․core/src/options/path․lisp file::
* The net․didierverna․clon․core/src/options/enum-base․lisp file::
* The net․didierverna․clon․core/src/options/enum․lisp file::
* The net․didierverna․clon․core/src/options/xswitch․lisp file::
* The net․didierverna․clon․core/src/container․lisp file::
* The net․didierverna․clon․core/src/group․lisp file::
* The net․didierverna․clon․core/src/retrieval/cmdline․lisp file::
* The net․didierverna․clon․core/src/retrieval/environ․lisp file::
* The net․didierverna․clon․core/src/synopsis․lisp file::
* The net․didierverna․clon․core/src/output/face․lisp file::
* The net․didierverna․clon․core/src/output/sheet․lisp file::
* The net․didierverna․clon․core/src/context․lisp file::
* The net․didierverna․clon․termio/sbcl/constants․lisp file::
* The net․didierverna․clon․termio/termio․lisp file::
@end menu

@node The net․didierverna․clon/net․didierverna․clon․asd file, The net․didierverna․clon․setup/termio/net․didierverna․clon․setup․asd file, Lisp files, Lisp files
@subsection @t{net.didierverna.clon/net.didierverna.clon.asd}
@anchor{❨10❩}@c
@fileindex{net.didierverna.clon.asd}@c
@table @strong
@item Source
@ref{❨10❩, , @t{net.didierverna.clon.asd}}.
@item Parent Component
@ref{❨0❩, , @t{net.didierverna.clon}}@: (system).
@item ASDF Systems
@ref{❨0❩, , @t{net.didierverna.clon}}.
@end table

@node The net․didierverna․clon․setup/termio/net․didierverna․clon․setup․asd file, The net․didierverna․clon․core/net․didierverna․clon․core․asd file, The net․didierverna․clon/net․didierverna․clon․asd file, Lisp files
@subsection @t{net.didierverna.clon.setup/termio/net.didierverna.clon.setup.asd}
@anchor{❨11❩}@c
@fileindex{net.didierverna.clon.setup.asd}@c
@table @strong
@item Source
@ref{❨11❩, , @t{net.didierverna.clon.setup.asd}}.
@item Parent Component
@ref{❨1❩, , @t{net.didierverna.clon.setup/termio}}@: (system).
@item ASDF Systems
@itemize @bullet
@item
@ref{❨1❩, , @t{net.didierverna.clon.setup/termio}}.
@item
@ref{❨2❩, , @t{net.didierverna.clon.setup}}.
@end itemize
@end table

@node The net․didierverna․clon․core/net․didierverna․clon․core․asd file, The net․didierverna․clon․termio/net․didierverna․clon․termio․asd file, The net․didierverna․clon․setup/termio/net․didierverna․clon․setup․asd file, Lisp files
@subsection @t{net.didierverna.clon.core/net.didierverna.clon.core.asd}
@anchor{❨12❩}@c
@fileindex{net.didierverna.clon.core.asd}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨3❩, , @t{net.didierverna.clon.core}}@: (system).
@item ASDF Systems
@ref{❨3❩, , @t{net.didierverna.clon.core}}.
@end table

@node The net․didierverna․clon․termio/net․didierverna․clon․termio․asd file, The net․didierverna․clon․setup/package․lisp file, The net․didierverna․clon․core/net․didierverna․clon․core․asd file, Lisp files
@subsection @t{net.didierverna.clon.termio/net.didierverna.clon.termio.asd}
@anchor{❨13❩}@c
@fileindex{net.didierverna.clon.termio.asd}@c
@table @strong
@item Source
@ref{❨13❩, , @t{net.didierverna.clon.termio.asd}}.
@item Parent Component
@ref{❨4❩, , @t{net.didierverna.clon.termio}}@: (system).
@item ASDF Systems
@ref{❨4❩, , @t{net.didierverna.clon.termio}}.
@end table

@node The net․didierverna․clon․setup/package․lisp file, The net․didierverna․clon․setup/src/configuration․lisp file, The net․didierverna․clon․termio/net․didierverna․clon․termio․asd file, Lisp files
@subsection @t{net.didierverna.clon.setup/package.lisp}
@anchor{❨14❩}@c
@fileindex{package.lisp}@c
@table @strong
@item Source
@ref{❨11❩, , @t{net.didierverna.clon.setup.asd}}.
@item Parent Component
@ref{❨2❩, , @t{net.didierverna.clon.setup}}@: (system).
@item Packages
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@end table

@node The net․didierverna․clon․setup/src/configuration․lisp file, The net․didierverna․clon․setup/src/readtable․lisp file, The net․didierverna․clon․setup/package․lisp file, Lisp files
@subsection @t{net.didierverna.clon.setup/src/configuration.lisp}
@anchor{❨15❩}@c
@fileindex{configuration.lisp}@c
@table @strong
@item Source
@ref{❨11❩, , @t{net.didierverna.clon.setup.asd}}.
@item Parent Component
@ref{❨5❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨642❩, , @t{configuration}}@: (function).
@item
@ref{❨638❩, , @t{configure}}@: (function).
@end itemize
@item Internals
@ref{❨630❩, , @t{*configuration*}}@: (special variable).
@end table

@node The net․didierverna․clon․setup/src/readtable․lisp file, The net․didierverna․clon․setup/src/version․lisp file, The net․didierverna․clon․setup/src/configuration․lisp file, Lisp files
@subsection @t{net.didierverna.clon.setup/src/readtable.lisp}
@anchor{❨16❩}@c
@fileindex{readtable.lisp}@c
@table @strong
@item Dependency
@ref{❨15❩, , @t{configuration.lisp}}@: (file).
@item Source
@ref{❨11❩, , @t{net.didierverna.clon.setup.asd}}.
@item Parent Component
@ref{❨5❩, , @t{src}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨637❩, , @t{clindent}}@: (function).
@item
@ref{❨633❩, , @t{defindent}}@: (macro).
@item
@ref{❨635❩, , @t{i-reader}}@: (function).
@item
@ref{❨636❩, , @t{~-reader}}@: (function).
@end itemize
@end table

@node The net․didierverna․clon․setup/src/version․lisp file, The net․didierverna․clon․setup/src/termio․lisp file, The net․didierverna․clon․setup/src/readtable․lisp file, Lisp files
@subsection @t{net.didierverna.clon.setup/src/version.lisp}
@anchor{❨17❩}@c
@fileindex{version.lisp}@c
@table @strong
@item Dependency
@ref{❨16❩, , @t{readtable.lisp}}@: (file).
@item Source
@ref{❨11❩, , @t{net.didierverna.clon.setup.asd}}.
@item Parent Component
@ref{❨5❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨641❩, , @t{*copyright-years*}}@: (special variable).
@item
@ref{❨639❩, , @t{*release-major-level*}}@: (special variable).
@item
@ref{❨644❩, , @t{*release-minor-level*}}@: (special variable).
@item
@ref{❨645❩, , @t{*release-name*}}@: (special variable).
@item
@ref{❨647❩, , @t{*release-status*}}@: (special variable).
@item
@ref{❨640❩, , @t{*release-status-level*}}@: (special variable).
@item
@ref{❨643❩, , @t{version}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨631❩, , @t{%version}}@: (function).
@item
@ref{❨632❩, , @t{release-status-number}}@: (function).
@end itemize
@end table

@node The net․didierverna․clon․setup/src/termio․lisp file, The net․didierverna․clon․core/package․lisp file, The net․didierverna․clon․setup/src/version․lisp file, Lisp files
@subsection @t{net.didierverna.clon.setup/src/termio.lisp}
@anchor{❨18❩}@c
@fileindex{termio.lisp}@c
@table @strong
@item Dependency
@ref{❨16❩, , @t{readtable.lisp}}@: (file).
@item Source
@ref{❨11❩, , @t{net.didierverna.clon.setup.asd}}.
@item Parent Component
@ref{❨5❩, , @t{src}}@: (module).
@item Public Interface
@ref{❨646❩, , @t{setup-termio}}@: (function).
@item Internals
@ref{❨634❩, , @t{restrict-because}}@: (function).
@end table

@node The net․didierverna․clon․core/package․lisp file, The net․didierverna․clon․core/src/util․lisp file, The net․didierverna․clon․setup/src/termio․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/package.lisp}
@anchor{❨19❩}@c
@fileindex{package.lisp}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨3❩, , @t{net.didierverna.clon.core}}@: (system).
@item Packages
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Public Interface
@ref{❨613❩, , @t{nickname-package}}@: (function).
@end table

@node The net․didierverna․clon․core/src/util․lisp file, The net․didierverna․clon․core/src/item․lisp file, The net․didierverna․clon․core/package․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/util.lisp}
@anchor{❨20❩}@c
@fileindex{util.lisp}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨602❩, , @t{*executablep*}}@: (special variable).
@item
@ref{❨623❩, , @t{cmdline}}@: (function).
@item
@ref{❨627❩, , @t{dump}}@: (macro).
@item
@ref{❨622❩, , @t{executablep}}@: (function).
@item
@ref{❨625❩, , @t{exit}}@: (function).
@item
@ref{❨731❩, , @t{make-instance}}@: (method).
@item
@ref{❨732❩, , @t{validate-superclass}}@: (method).
@item
@ref{❨733❩, , @t{validate-superclass}}@: (method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨547❩, , @t{abstract-class}}@: (class).
@item
@ref{❨461❩, , @t{accumulate}}@: (macro).
@item
@ref{❨214❩, , @t{beginning-of-string-p}}@: (function).
@item
@ref{❨56❩, , @t{closest-match}}@: (function).
@item
@ref{❨198❩, , @t{complete-string}}@: (function).
@item
@ref{❨185❩, , @t{copy-instance}}@: (generic function).
@item
@ref{❨358❩, , @t{declare-valid-superclass}}@: (macro).
@item
@ref{❨570❩, , @t{defabstract}}@: (macro).
@item
@ref{❨470❩, , @t{econd}}@: (macro).
@item
@ref{❨476❩, , @t{endpush}}@: (macro).
@item
@ref{❨369❩, , @t{error-string}}@: (reader method).
@item
@ref{❨371❩, , @t{(setf error-string)}}@: (writer method).
@item
@ref{❨246❩, , @t{getenv}}@: (function).
@item
@ref{❨327❩, , @t{home-directory}}@: (function).
@item
@ref{❨328❩, , @t{home-directory}}@: (condition).
@item
@ref{❨541❩, , @t{list-to-string}}@: (function).
@item
@ref{❨590❩, , @t{macosp}}@: (function).
@item
@ref{❨598❩, , @t{maybe-push}}@: (macro).
@item
@ref{❨60❩, , @t{putenv}}@: (function).
@item
@ref{❨589❩, , @t{remove-keys}}@: (function).
@item
@ref{❨529❩, , @t{replace-in-keys}}@: (macro).
@item
@ref{❨416❩, , @t{replace-key}}@: (function).
@item
@ref{❨119❩, , @t{replace-keys}}@: (function).
@item
@ref{❨488❩, , @t{select-keys}}@: (function).
@end itemize
@end table

@node The net․didierverna․clon․core/src/item․lisp file, The net․didierverna․clon․core/src/text․lisp file, The net․didierverna․clon․core/src/util․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/item.lisp}
@anchor{❨21❩}@c
@fileindex{item.lisp}@c
@table @strong
@item Dependency
@ref{❨20❩, , @t{util.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨335❩, , @t{help-spec}}@: (generic function).
@item
@ref{❨216❩, , @t{hiddenp}}@: (reader method).
@item
@ref{❨69❩, , @t{item}}@: (class).
@item
@ref{❨309❩, , @t{traversedp}}@: (reader method).
@item
@ref{❨311❩, , @t{(setf traversedp)}}@: (writer method).
@item
@ref{❨399❩, , @t{untraverse}}@: (generic function).
@end itemize
@end table

@node The net․didierverna․clon․core/src/text․lisp file, The net․didierverna․clon․core/src/options/option․lisp file, The net․didierverna․clon․core/src/item․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/text.lisp}
@anchor{❨22❩}@c
@fileindex{text.lisp}@c
@table @strong
@item Dependency
@ref{❨21❩, , @t{item.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Public Interface
@ref{❨616❩, , @t{make-text}}@: (function).
@item Internals
@itemize @bullet
@item
@ref{❨597❩, , @t{contents}}@: (reader method).
@item
@ref{❨341❩, , @t{help-spec}}@: (method).
@item
@ref{❨457❩, , @t{make-internal-text}}@: (function).
@item
@ref{❨265❩, , @t{text}}@: (class).
@item
@ref{❨403❩, , @t{untraverse}}@: (method).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/option․lisp file, The net․didierverna․clon․core/src/options/flag․lisp file, The net․didierverna․clon․core/src/text․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/option.lisp}
@anchor{❨23❩}@c
@fileindex{option.lisp}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨672❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨673❩, , @t{initialize-instance}}@: (method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨122❩, , @t{check-name-clash}}@: (generic function).
@item
@ref{❨373❩, , @t{description}}@: (reader method).
@item
@ref{❨280❩, , @t{env-var}}@: (reader method).
@item
@ref{❨340❩, , @t{help-spec}}@: (method).
@item
@ref{❨153❩, , @t{long-name}}@: (reader method).
@item
@ref{❨52❩, , @t{match-option}}@: (function).
@item
@ref{❨355❩, , @t{negated-pack-char}}@: (generic function).
@item
@ref{❨409❩, , @t{option}}@: (reader method).
@item
@ref{❨410❩, , @t{option}}@: (class).
@item
@ref{❨343❩, , @t{option-abbreviation-distance}}@: (function).
@item
@ref{❨379❩, , @t{option-error}}@: (condition).
@item
@ref{❨429❩, , @t{option-sticky-distance}}@: (generic function).
@item
@ref{❨345❩, , @t{potential-pack-char}}@: (function).
@item
@ref{❨326❩, , @t{short-name}}@: (reader method).
@item
@ref{❨53❩, , @t{short-pack-char}}@: (generic function).
@item
@ref{❨402❩, , @t{untraverse}}@: (method).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/flag․lisp file, The net․didierverna․clon․core/src/options/valued․lisp file, The net․didierverna․clon․core/src/options/option․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/flag.lisp}
@anchor{❨24❩}@c
@fileindex{flag.lisp}@c
@table @strong
@item Dependency
@ref{❨23❩, , @t{option.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Public Interface
@ref{❨614❩, , @t{make-flag}}@: (function).
@item Internals
@itemize @bullet
@item
@ref{❨415❩, , @t{flag}}@: (class).
@item
@ref{❨61❩, , @t{make-internal-flag}}@: (function).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/valued․lisp file, The net․didierverna․clon․core/src/options/negatable․lisp file, The net․didierverna․clon․core/src/options/flag․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/valued.lisp}
@anchor{❨25❩}@c
@fileindex{valued.lisp}@c
@table @strong
@item Dependency
@ref{❨23❩, , @t{option.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨668❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨669❩, , @t{initialize-instance}}@: (method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨167❩, , @t{*item-names*}}@: (special variable).
@item
@ref{❨182❩, , @t{argument}}@: (reader method).
@item
@ref{❨225❩, , @t{argument-name}}@: (reader method).
@item
@ref{❨364❩, , @t{argument-required-p}}@: (reader method).
@item
@ref{❨107❩, , @t{check}}@: (generic function).
@item
@ref{❨80❩, , @t{comment}}@: (reader method).
@item
@ref{❨81❩, , @t{comment}}@: (reader method).
@item
@ref{❨206❩, , @t{convert}}@: (generic function).
@item
@ref{❨418❩, , @t{default-value}}@: (reader method).
@item
@ref{❨104❩, , @t{defoption}}@: (macro).
@item
@ref{❨549❩, , @t{fallback-value}}@: (reader method).
@item
@ref{❨339❩, , @t{help-spec}}@: (method).
@item
@ref{❨593❩, , @t{invalid-argument}}@: (condition).
@item
@ref{❨387❩, , @t{invalid-value}}@: (condition).
@item
@ref{❨430❩, , @t{option-sticky-distance}}@: (method).
@item
@ref{❨422❩, , @t{read-argument}}@: (function).
@item
@ref{❨131❩, , @t{read-value}}@: (function).
@item
@ref{❨146❩, , @t{restartable-check}}@: (function).
@item
@ref{❨64❩, , @t{restartable-convert}}@: (function).
@item
@ref{❨54❩, , @t{short-pack-char}}@: (method).
@item
@ref{❨525❩, , @t{short-syntax-help-spec-prefix}}@: (generic function).
@item
@ref{❨447❩, , @t{stringify}}@: (generic function).
@item
@ref{❨188❩, , @t{value}}@: (reader method).
@item
@ref{❨294❩, , @t{valued-option}}@: (class).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/negatable․lisp file, The net․didierverna․clon․core/src/options/switch-base․lisp file, The net․didierverna․clon․core/src/options/valued․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/negatable.lisp}
@anchor{❨26❩}@c
@fileindex{negatable.lisp}@c
@table @strong
@item Dependency
@ref{❨25❩, , @t{valued.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨114❩, , @t{negatable}}@: (class).
@item
@ref{❨356❩, , @t{negated-pack-char}}@: (method).
@item
@ref{❨526❩, , @t{short-syntax-help-spec-prefix}}@: (method).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/switch-base․lisp file, The net․didierverna․clon․core/src/options/switch․lisp file, The net․didierverna․clon․core/src/options/negatable․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/switch-base.lisp}
@anchor{❨27❩}@c
@fileindex{switch-base.lisp}@c
@table @strong
@item Dependency
@ref{❨26❩, , @t{negatable.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨725❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨726❩, , @t{initialize-instance}}@: (method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨540❩, , @t{argument-style}}@: (reader method).
@item
@ref{❨464❩, , @t{argument-styles}}@: (reader method).
@item
@ref{❨466❩, , @t{(setf argument-styles)}}@: (writer method).
@item
@ref{❨83❩, , @t{no-values}}@: (reader method).
@item
@ref{❨85❩, , @t{(setf no-values)}}@: (writer method).
@item
@ref{❨512❩, , @t{switch-base}}@: (class).
@item
@ref{❨558❩, , @t{yes-values}}@: (reader method).
@item
@ref{❨560❩, , @t{(setf yes-values)}}@: (writer method).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/switch․lisp file, The net․didierverna․clon․core/src/options/stropt․lisp file, The net․didierverna․clon․core/src/options/switch-base․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/switch.lisp}
@anchor{❨28❩}@c
@fileindex{switch.lisp}@c
@table @strong
@item Dependency
@ref{❨27❩, , @t{switch-base.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨666❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨610❩, , @t{make-switch}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨113❩, , @t{check}}@: (method).
@item
@ref{❨212❩, , @t{convert}}@: (method).
@item
@ref{❨462❩, , @t{make-internal-switch}}@: (function).
@item
@ref{❨453❩, , @t{stringify}}@: (method).
@item
@ref{❨282❩, , @t{switch}}@: (class).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/stropt․lisp file, The net․didierverna․clon․core/src/options/lispobj․lisp file, The net․didierverna․clon․core/src/options/switch․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/stropt.lisp}
@anchor{❨29❩}@c
@fileindex{stropt.lisp}@c
@table @strong
@item Dependency
@ref{❨25❩, , @t{valued.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Public Interface
@ref{❨605❩, , @t{make-stropt}}@: (function).
@item Internals
@itemize @bullet
@item
@ref{❨112❩, , @t{check}}@: (method).
@item
@ref{❨211❩, , @t{convert}}@: (method).
@item
@ref{❨168❩, , @t{make-internal-stropt}}@: (function).
@item
@ref{❨452❩, , @t{stringify}}@: (method).
@item
@ref{❨267❩, , @t{stropt}}@: (class).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/lispobj․lisp file, The net․didierverna․clon․core/src/options/path․lisp file, The net․didierverna․clon․core/src/options/stropt․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/lispobj.lisp}
@anchor{❨30❩}@c
@fileindex{lispobj.lisp}@c
@table @strong
@item Dependency
@ref{❨25❩, , @t{valued.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Public Interface
@ref{❨620❩, , @t{make-lispobj}}@: (function).
@item Internals
@itemize @bullet
@item
@ref{❨111❩, , @t{check}}@: (method).
@item
@ref{❨210❩, , @t{convert}}@: (method).
@item
@ref{❨381❩, , @t{lispobj}}@: (class).
@item
@ref{❨166❩, , @t{make-internal-lispobj}}@: (function).
@item
@ref{❨451❩, , @t{stringify}}@: (method).
@item
@ref{❨49❩, , @t{typespec}}@: (reader method).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/path․lisp file, The net․didierverna․clon․core/src/options/enum-base․lisp file, The net․didierverna․clon․core/src/options/lispobj․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/path.lisp}
@anchor{❨31❩}@c
@fileindex{path.lisp}@c
@table @strong
@item Dependency
@ref{❨25❩, , @t{valued.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Public Interface
@ref{❨600❩, , @t{make-path}}@: (function).
@item Internals
@itemize @bullet
@item
@ref{❨110❩, , @t{check}}@: (method).
@item
@ref{❨209❩, , @t{convert}}@: (method).
@item
@ref{❨588❩, , @t{directory-pathname-p}}@: (function).
@item
@ref{❨59❩, , @t{make-internal-path}}@: (function).
@item
@ref{❨434❩, , @t{path}}@: (class).
@item
@ref{❨538❩, , @t{path-type}}@: (reader method).
@item
@ref{❨138❩, , @t{pathname-component-null-p}}@: (function).
@item
@ref{❨532❩, , @t{split-path}}@: (function).
@item
@ref{❨450❩, , @t{stringify}}@: (method).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/enum-base․lisp file, The net․didierverna․clon․core/src/options/enum․lisp file, The net․didierverna․clon․core/src/options/path․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/enum-base.lisp}
@anchor{❨32❩}@c
@fileindex{enum-base.lisp}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Public Interface
@ref{❨663❩, , @t{initialize-instance}}@: (method).
@item Internals
@itemize @bullet
@item
@ref{❨319❩, , @t{enum}}@: (reader method).
@item
@ref{❨203❩, , @t{enum-base}}@: (class).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/enum․lisp file, The net․didierverna․clon․core/src/options/xswitch․lisp file, The net․didierverna․clon․core/src/options/enum-base․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/enum.lisp}
@anchor{❨33❩}@c
@fileindex{enum.lisp}@c
@table @strong
@item Dependencies
@itemize @bullet
@item
@ref{❨25❩, , @t{valued.lisp}}@: (file).
@item
@ref{❨32❩, , @t{enum-base.lisp}}@: (file).
@end itemize
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Public Interface
@ref{❨624❩, , @t{make-enum}}@: (function).
@item Internals
@itemize @bullet
@item
@ref{❨109❩, , @t{check}}@: (method).
@item
@ref{❨208❩, , @t{convert}}@: (method).
@item
@ref{❨320❩, , @t{enum}}@: (class).
@item
@ref{❨421❩, , @t{make-internal-enum}}@: (function).
@item
@ref{❨449❩, , @t{stringify}}@: (method).
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/xswitch․lisp file, The net․didierverna․clon․core/src/container․lisp file, The net․didierverna․clon․core/src/options/enum․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/xswitch.lisp}
@anchor{❨34❩}@c
@fileindex{xswitch.lisp}@c
@table @strong
@item Dependencies
@itemize @bullet
@item
@ref{❨25❩, , @t{valued.lisp}}@: (file).
@item
@ref{❨27❩, , @t{switch-base.lisp}}@: (file).
@item
@ref{❨32❩, , @t{enum-base.lisp}}@: (file).
@end itemize
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{options}}@: (module).
@item Public Interface
@ref{❨619❩, , @t{make-xswitch}}@: (function).
@item Internals
@itemize @bullet
@item
@ref{❨108❩, , @t{check}}@: (method).
@item
@ref{❨207❩, , @t{convert}}@: (method).
@item
@ref{❨305❩, , @t{make-internal-xswitch}}@: (function).
@item
@ref{❨448❩, , @t{stringify}}@: (method).
@item
@ref{❨154❩, , @t{xswitch}}@: (class).
@end itemize
@end table

@node The net․didierverna․clon․core/src/container․lisp file, The net․didierverna․clon․core/src/group․lisp file, The net․didierverna․clon․core/src/options/xswitch․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/container.lisp}
@anchor{❨35❩}@c
@fileindex{container.lisp}@c
@table @strong
@item Dependency
@ref{❨7❩, , @t{options}}@: (module).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨660❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨661❩, , @t{initialize-instance}}@: (method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨123❩, , @t{check-name-clash}}@: (method).
@item
@ref{❨124❩, , @t{check-name-clash}}@: (method).
@item
@ref{❨125❩, , @t{check-name-clash}}@: (method).
@item
@ref{❨149❩, , @t{container}}@: (class).
@item
@ref{❨338❩, , @t{help-spec}}@: (method).
@item
@ref{❨564❩, , @t{items}}@: (reader method).
@item
@ref{❨401❩, , @t{untraverse}}@: (method).
@end itemize
@end table

@node The net․didierverna․clon․core/src/group․lisp file, The net․didierverna․clon․core/src/retrieval/cmdline․lisp file, The net․didierverna․clon․core/src/container․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/group.lisp}
@anchor{❨36❩}@c
@fileindex{group.lisp}@c
@table @strong
@item Dependency
@ref{❨35❩, , @t{container.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨612❩, , @t{defgroup}}@: (macro).
@item
@ref{❨607❩, , @t{make-group}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨543❩, , @t{%defgroup}}@: (macro).
@item
@ref{❨405❩, , @t{group}}@: (class).
@item
@ref{❨420❩, , @t{header}}@: (reader method).
@item
@ref{❨337❩, , @t{help-spec}}@: (method).
@end itemize
@end table

@node The net․didierverna․clon․core/src/retrieval/cmdline․lisp file, The net․didierverna․clon․core/src/retrieval/environ․lisp file, The net․didierverna․clon․core/src/group․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/retrieval/cmdline.lisp}
@anchor{❨37❩}@c
@fileindex{cmdline.lisp}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨8❩, , @t{retrieval}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨181❩, , @t{argument}}@: (reader method).
@item
@ref{❨307❩, , @t{argument-popable-p}}@: (function).
@item
@ref{❨213❩, , @t{cmdline-convert}}@: (function).
@item
@ref{❨50❩, , @t{cmdline-error}}@: (condition).
@item
@ref{❨261❩, , @t{cmdline-option-error}}@: (condition).
@item
@ref{❨151❩, , @t{invalid-cmdline-argument}}@: (condition).
@item
@ref{❨157❩, , @t{invalid-negated-syntax}}@: (condition).
@item
@ref{❨68❩, , @t{item}}@: (reader method).
@item
@ref{❨250❩, , @t{maybe-pop-argument}}@: (macro).
@item
@ref{❨47❩, , @t{missing-cmdline-argument}}@: (condition).
@item
@ref{❨393❩, , @t{name}}@: (reader method).
@item
@ref{❨324❩, , @t{option-call-p}}@: (function).
@item
@ref{❨531❩, , @t{restartable-cmdline-convert}}@: (function).
@item
@ref{❨91❩, , @t{restartable-invalid-negated-syntax-error}}@: (macro).
@item
@ref{❨241❩, , @t{restartable-spurious-cmdline-argument-error}}@: (macro).
@item
@ref{❨315❩, , @t{retrieve-from-long-call}}@: (generic function).
@item
@ref{❨133❩, , @t{retrieve-from-negated-call}}@: (generic function).
@item
@ref{❨96❩, , @t{retrieve-from-short-call}}@: (generic function).
@item
@ref{❨62❩, , @t{spurious-cmdline-argument}}@: (condition).
@end itemize
@end table

@node The net․didierverna․clon․core/src/retrieval/environ․lisp file, The net․didierverna․clon․core/src/synopsis․lisp file, The net․didierverna․clon․core/src/retrieval/cmdline․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/retrieval/environ.lisp}
@anchor{❨38❩}@c
@fileindex{environ.lisp}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨8❩, , @t{retrieval}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨386❩, , @t{env-val}}@: (reader method).
@item
@ref{❨279❩, , @t{env-var}}@: (reader method).
@item
@ref{❨303❩, , @t{environment-convert}}@: (function).
@item
@ref{❨479❩, , @t{environment-error}}@: (condition).
@item
@ref{❨471❩, , @t{environmental-option-error}}@: (condition).
@item
@ref{❨467❩, , @t{invalid-environment-value}}@: (condition).
@item
@ref{❨304❩, , @t{read-env-val}}@: (function).
@item
@ref{❨565❩, , @t{restartable-environment-convert}}@: (function).
@item
@ref{❨330❩, , @t{retrieve-from-environment}}@: (generic function).
@end itemize
@end table

@node The net․didierverna․clon․core/src/synopsis․lisp file, The net․didierverna․clon․core/src/output/face․lisp file, The net․didierverna․clon․core/src/retrieval/environ․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/synopsis.lisp}
@anchor{❨39❩}@c
@fileindex{synopsis.lisp}@c
@table @strong
@item Dependency
@ref{❨36❩, , @t{group.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨629❩, , @t{*synopsis*}}@: (special variable).
@item
@ref{❨617❩, , @t{defsynopsis}}@: (macro).
@item
@ref{❨734❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨735❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨621❩, , @t{make-synopsis}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨535❩, , @t{clon-options-group}}@: (reader method).
@item
@ref{❨302❩, , @t{do-options}}@: (macro).
@item
@ref{❨336❩, , @t{help-spec}}@: (method).
@item
@ref{❨270❩, , @t{mapoptions}}@: (generic function).
@item
@ref{❨378❩, , @t{negated-pack}}@: (reader method).
@item
@ref{❨219❩, , @t{postfix}}@: (reader method).
@item
@ref{❨556❩, , @t{potential-pack}}@: (reader method).
@item
@ref{❨163❩, , @t{potential-pack-p}}@: (generic function).
@item
@ref{❨142❩, , @t{short-pack}}@: (reader method).
@item
@ref{❨578❩, , @t{synopsis}}@: (class).
@end itemize
@end table

@node The net․didierverna․clon․core/src/output/face․lisp file, The net․didierverna․clon․core/src/output/sheet․lisp file, The net․didierverna․clon․core/src/synopsis․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/output/face.lisp}
@anchor{❨40❩}@c
@fileindex{face.lisp}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨9❩, , @t{output}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨722❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨723❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨724❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨721❩, , @t{slot-unbound}}@: (method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨394❩, , @t{*highlight-properties*}}@: (special variable).
@item
@ref{❨484❩, , @t{add-subface}}@: (function).
@item
@ref{❨251❩, , @t{attach-face-tree}}@: (function).
@item
@ref{❨428❩, , @t{background}}@: (reader method).
@item
@ref{❨194❩, , @t{blink}}@: (reader method).
@item
@ref{❨66❩, , @t{bottom-padding}}@: (reader method).
@item
@ref{❨475❩, , @t{concealedp}}@: (reader method).
@item
@ref{❨162❩, , @t{crossed-out-p}}@: (reader method).
@item
@ref{❨491❩, , @t{face}}@: (class).
@item
@ref{❨121❩, , @t{face-highlight-property-set-p}}@: (function).
@item
@ref{❨334❩, , @t{face-highlight-property-value}}@: (function).
@item
@ref{❨486❩, , @t{foreground}}@: (reader method).
@item
@ref{❨130❩, , @t{framedp}}@: (reader method).
@item
@ref{❨562❩, , @t{intensity}}@: (reader method).
@item
@ref{❨253❩, , @t{inversep}}@: (reader method).
@item
@ref{❨197❩, , @t{italicp}}@: (reader method).
@item
@ref{❨554❩, , @t{item-separator}}@: (reader method).
@item
@ref{❨118❩, , @t{left-padding}}@: (reader method).
@item
@ref{❨101❩, , @t{make-face-tree}}@: (generic function).
@item
@ref{❨78❩, , @t{make-raw-face-tree}}@: (function).
@item
@ref{❨392❩, , @t{name}}@: (reader method).
@item
@ref{❨323❩, , @t{parent}}@: (reader method).
@item
@ref{❨398❩, , @t{parent-generation}}@: (function).
@item
@ref{❨353❩, , @t{right-padding}}@: (reader method).
@item
@ref{❨244❩, , @t{search-branch}}@: (function).
@item
@ref{❨95❩, , @t{search-face}}@: (function).
@item
@ref{❨247❩, , @t{subface}}@: (generic function).
@item
@ref{❨424❩, , @t{subfaces}}@: (reader method).
@item
@ref{❨192❩, , @t{top-padding}}@: (reader method).
@item
@ref{❨490❩, , @t{underline}}@: (reader method).
@item
@ref{❨478❩, , @t{visiblep}}@: (reader method).
@end itemize
@end table

@node The net․didierverna․clon․core/src/output/sheet․lisp file, The net․didierverna․clon․core/src/context․lisp file, The net․didierverna․clon․core/src/output/face․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/output/sheet.lisp}
@anchor{❨41❩}@c
@fileindex{sheet.lisp}@c
@table @strong
@item Dependency
@ref{❨40❩, , @t{face.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨9❩, , @t{output}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨664❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨665❩, , @t{initialize-instance}}@: (method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨542❩, , @t{available-right-margin}}@: (function).
@item
@ref{❨544❩, , @t{close-frame}}@: (generic function).
@item
@ref{❨481❩, , @t{close-line}}@: (function).
@item
@ref{❨105❩, , @t{close-sface}}@: (function).
@item
@ref{❨360❩, , @t{column}}@: (reader method).
@item
@ref{❨362❩, , @t{(setf column)}}@: (writer method).
@item
@ref{❨195❩, , @t{copy-frame}}@: (function).
@item
@ref{❨407❩, , @t{copy-highlight-frame}}@: (function).
@item
@ref{❨120❩, , @t{copy-highlight-property-instance}}@: (function).
@item
@ref{❨301❩, , @t{current-frame}}@: (function).
@item
@ref{❨550❩, , @t{current-left-margin}}@: (function).
@item
@ref{❨199❩, , @t{current-right-margin}}@: (function).
@item
@ref{❨269❩, , @t{current-sface}}@: (function).
@item
@ref{❨567❩, , @t{find-sface}}@: (function).
@item
@ref{❨242❩, , @t{flush-sheet}}@: (function).
@item
@ref{❨283❩, , @t{frame}}@: (structure).
@item
@ref{❨276❩, , @t{frame-left-margin}}@: (reader).
@item
@ref{❨277❩, , @t{(setf frame-left-margin)}}@: (writer).
@item
@ref{❨90❩, , @t{frame-p}}@: (function).
@item
@ref{❨472❩, , @t{frame-right-margin}}@: (reader).
@item
@ref{❨473❩, , @t{(setf frame-right-margin)}}@: (writer).
@item
@ref{❨374❩, , @t{frame-sface}}@: (reader).
@item
@ref{❨375❩, , @t{(setf frame-sface)}}@: (writer).
@item
@ref{❨347❩, , @t{frames}}@: (reader method).
@item
@ref{❨349❩, , @t{(setf frames)}}@: (writer method).
@item
@ref{❨584❩, , @t{get-bottom-padding}}@: (generic function).
@item
@ref{❨487❩, , @t{get-top-padding}}@: (function).
@item
@ref{❨139❩, , @t{help-spec-items-will-print}}@: (function).
@item
@ref{❨72❩, , @t{help-spec-will-print}}@: (generic function).
@item
@ref{❨444❩, , @t{highlight-frame}}@: (structure).
@item
@ref{❨144❩, , @t{highlight-frame-highlight-property-instances}}@: (reader).
@item
@ref{❨145❩, , @t{(setf highlight-frame-highlight-property-instances)}}@: (writer).
@item
@ref{❨350❩, , @t{highlight-frame-left-margin}}@: (function).
@item
@ref{❨351❩, , @t{(setf highlight-frame-left-margin)}}@: (function).
@item
@ref{❨384❩, , @t{highlight-frame-p}}@: (function).
@item
@ref{❨238❩, , @t{highlight-frame-right-margin}}@: (function).
@item
@ref{❨239❩, , @t{(setf highlight-frame-right-margin)}}@: (function).
@item
@ref{❨395❩, , @t{highlight-frame-sface}}@: (function).
@item
@ref{❨396❩, , @t{(setf highlight-frame-sface)}}@: (function).
@item
@ref{❨263❩, , @t{highlight-property-ecase}}@: (macro).
@item
@ref{❨365❩, , @t{highlight-property-instance}}@: (structure).
@item
@ref{❨235❩, , @t{highlight-property-instance-escape-sequence}}@: (function).
@item
@ref{❨222❩, , @t{highlight-property-instance-name}}@: (reader).
@item
@ref{❨223❩, , @t{(setf highlight-property-instance-name)}}@: (writer).
@item
@ref{❨205❩, , @t{highlight-property-instance-p}}@: (function).
@item
@ref{❨115❩, , @t{highlight-property-instance-value}}@: (reader).
@item
@ref{❨116❩, , @t{(setf highlight-property-instance-value)}}@: (writer).
@item
@ref{❨87❩, , @t{highlightp}}@: (reader method).
@item
@ref{❨289❩, , @t{line-width}}@: (reader method).
@item
@ref{❨587❩, , @t{make-frame}}@: (function).
@item
@ref{❨281❩, , @t{make-highlight-frame}}@: (function).
@item
@ref{❨202❩, , @t{make-highlight-property-instance}}@: (function).
@item
@ref{❨536❩, , @t{make-raw-sface}}@: (function).
@item
@ref{❨159❩, , @t{make-sheet}}@: (function).
@item
@ref{❨344❩, , @t{map-frames}}@: (macro).
@item
@ref{❨312❩, , @t{open-frame}}@: (generic function).
@item
@ref{❨306❩, , @t{open-line}}@: (function).
@item
@ref{❨93❩, , @t{open-next-line}}@: (function).
@item
@ref{❨99❩, , @t{open-sface}}@: (function).
@item
@ref{❨77❩, , @t{output-stream}}@: (reader method).
@item
@ref{❨132❩, , @t{pop-frame}}@: (function).
@item
@ref{❨89❩, , @t{princ-char}}@: (function).
@item
@ref{❨469❩, , @t{princ-highlight-property-instances}}@: (function).
@item
@ref{❨92❩, , @t{princ-spaces}}@: (function).
@item
@ref{❨446❩, , @t{princ-string}}@: (function).
@item
@ref{❨100❩, , @t{print-faced-help-spec}}@: (function).
@item
@ref{❨240❩, , @t{print-help}}@: (function).
@item
@ref{❨519❩, , @t{print-help-spec}}@: (generic function).
@item
@ref{❨511❩, , @t{print-string}}@: (function).
@item
@ref{❨458❩, , @t{push-frame}}@: (function).
@item
@ref{❨530❩, , @t{reach-column}}@: (function).
@item
@ref{❨88❩, , @t{read-sface-tree}}@: (function).
@item
@ref{❨220❩, , @t{safe-left-margin}}@: (function).
@item
@ref{❨566❩, , @t{safe-right-margin}}@: (function).
@item
@ref{❨551❩, , @t{sface}}@: (class).
@item
@ref{❨300❩, , @t{sface-tree}}@: (reader method).
@item
@ref{❨254❩, , @t{sheet}}@: (class).
@item
@ref{❨460❩, , @t{sibling}}@: (reader method).
@item
@ref{❨190❩, , @t{top-padding}}@: (method).
@item
@ref{❨191❩, , @t{top-padding}}@: (method).
@item
@ref{❨156❩, , @t{try-read-sface-tree}}@: (function).
@item
@ref{❨354❩, , @t{try-read-theme}}@: (function).
@end itemize
@end table

@node The net․didierverna․clon․core/src/context․lisp file, The net․didierverna․clon․termio/sbcl/constants․lisp file, The net․didierverna․clon․core/src/output/sheet․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/context.lisp}
@anchor{❨42❩}@c
@fileindex{context.lisp}@c
@table @strong
@item Dependency
@ref{❨9❩, , @t{output}}@: (module).
@item Source
@ref{❨12❩, , @t{net.didierverna.clon.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨599❩, , @t{*context*}}@: (special variable).
@item
@ref{❨609❩, , @t{cmdline-options-p}}@: (function).
@item
@ref{❨608❩, , @t{cmdline-p}}@: (function).
@item
@ref{❨626❩, , @t{do-cmdline-options}}@: (macro).
@item
@ref{❨604❩, , @t{getopt}}@: (function).
@item
@ref{❨603❩, , @t{getopt-cmdline}}@: (function).
@item
@ref{❨615❩, , @t{help}}@: (function).
@item
@ref{❨662❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨628❩, , @t{make-context}}@: (function).
@item
@ref{❨606❩, , @t{multiple-value-getopt-cmdline}}@: (macro).
@item
@ref{❨618❩, , @t{progname}}@: (function).
@item
@ref{❨611❩, , @t{remainder}}@: (function).
@item
@ref{❨601❩, , @t{with-context}}@: (macro).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨180❩, , @t{argument}}@: (reader method).
@item
@ref{❨534❩, , @t{clon-options-group}}@: (method).
@item
@ref{❨482❩, , @t{cmdline-junk-error}}@: (condition).
@item
@ref{❨571❩, , @t{cmdline-option}}@: (structure).
@item
@ref{❨425❩, , @t{cmdline-option-name}}@: (reader).
@item
@ref{❨426❩, , @t{(setf cmdline-option-name)}}@: (writer).
@item
@ref{❨147❩, , @t{cmdline-option-option}}@: (reader).
@item
@ref{❨148❩, , @t{(setf cmdline-option-option)}}@: (writer).
@item
@ref{❨243❩, , @t{cmdline-option-p}}@: (function).
@item
@ref{❨432❩, , @t{cmdline-option-source}}@: (reader).
@item
@ref{❨433❩, , @t{(setf cmdline-option-source)}}@: (writer).
@item
@ref{❨236❩, , @t{cmdline-option-value}}@: (reader).
@item
@ref{❨237❩, , @t{(setf cmdline-option-value)}}@: (writer).
@item
@ref{❨227❩, , @t{cmdline-options}}@: (reader method).
@item
@ref{❨229❩, , @t{(setf cmdline-options)}}@: (writer method).
@item
@ref{❨169❩, , @t{context}}@: (class).
@item
@ref{❨264❩, , @t{copy-cmdline-option}}@: (function).
@item
@ref{❨58❩, , @t{error-handler}}@: (reader method).
@item
@ref{❨456❩, , @t{exit-abnormally}}@: (function).
@item
@ref{❨184❩, , @t{highlight}}@: (reader method).
@item
@ref{❨234❩, , @t{invalid-negated-equal-syntax}}@: (condition).
@item
@ref{❨106❩, , @t{invalid-short-equal-syntax}}@: (condition).
@item
@ref{❨592❩, , @t{junk}}@: (reader method).
@item
@ref{❨288❩, , @t{line-width}}@: (reader method).
@item
@ref{❨137❩, , @t{make-cmdline-option}}@: (function).
@item
@ref{❨271❩, , @t{mapoptions}}@: (method).
@item
@ref{❨391❩, , @t{name}}@: (reader method).
@item
@ref{❨518❩, , @t{negated-call}}@: (reader method).
@item
@ref{❨377❩, , @t{negated-pack}}@: (method).
@item
@ref{❨218❩, , @t{postfix}}@: (method).
@item
@ref{❨164❩, , @t{potential-pack-p}}@: (method).
@item
@ref{❨221❩, , @t{print-error}}@: (function).
@item
@ref{❨293❩, , @t{read-call}}@: (function).
@item
@ref{❨528❩, , @t{read-long-name}}@: (function).
@item
@ref{❨233❩, , @t{restart-on-error}}@: (function).
@item
@ref{❨397❩, , @t{restartable-cmdline-junk-error}}@: (function).
@item
@ref{❨94❩, , @t{search-option}}@: (function).
@item
@ref{❨292❩, , @t{search-option-by-abbreviation}}@: (function).
@item
@ref{❨143❩, , @t{search-option-by-name}}@: (function).
@item
@ref{❨291❩, , @t{search-path}}@: (reader method).
@item
@ref{❨158❩, , @t{search-sticky-option}}@: (function).
@item
@ref{❨569❩, , @t{short-call}}@: (reader method).
@item
@ref{❨141❩, , @t{short-pack}}@: (method).
@item
@ref{❨577❩, , @t{synopsis}}@: (reader method).
@item
@ref{❨201❩, , @t{theme}}@: (reader method).
@item
@ref{❨230❩, , @t{unknown-cmdline-option-error}}@: (condition).
@item
@ref{❨437❩, , @t{unrecognized-negated-call-error}}@: (condition).
@item
@ref{❨454❩, , @t{unrecognized-short-call-error}}@: (condition).
@item
@ref{❨400❩, , @t{untraverse}}@: (method).
@item
@ref{❨160❩, , @t{with-context-error-handler}}@: (macro).
@end itemize
@end table

@node The net․didierverna․clon․termio/sbcl/constants․lisp file, The net․didierverna․clon․termio/termio․lisp file, The net․didierverna․clon․core/src/context․lisp file, Lisp files
@subsection @t{net.didierverna.clon.termio/sbcl/constants.lisp}
@anchor{❨43❩}@c
@fileindex{sbcl/constants.lisp}@c
@table @strong
@item Source
@ref{❨13❩, , @t{net.didierverna.clon.termio.asd}}.
@item Parent Component
@ref{❨4❩, , @t{net.didierverna.clon.termio}}@: (system).
@end table

@node The net․didierverna․clon․termio/termio․lisp file, , The net․didierverna․clon․termio/sbcl/constants․lisp file, Lisp files
@subsection @t{net.didierverna.clon.termio/termio.lisp}
@anchor{❨44❩}@c
@fileindex{termio.lisp}@c
@table @strong
@item Dependency
@ref{❨43❩, , @t{sbcl/constants.lisp}}@: (file).
@item Source
@ref{❨13❩, , @t{net.didierverna.clon.termio.asd}}.
@item Parent Component
@ref{❨4❩, , @t{net.didierverna.clon.termio}}@: (system).
@item Internals
@itemize @bullet
@item
@ref{❨439❩, , @t{stream-ioctl-output-handle}}@: (generic function).
@item
@ref{❨245❩, , @t{stream-line-width}}@: (function).
@end itemize
@end table



@c ====================================================================
@c Packages
@c ====================================================================
@node Packages, Definitions, Files, Top
@chapter Packages
Packages are listed by definition order.

@menu
* The net․didierverna․clon package::
* The net․didierverna․clon․setup package::
@end menu


@c --------------------------------
@c The net.didierverna.clon package
@c --------------------------------
@node The net․didierverna․clon package, The net․didierverna․clon․setup package, Packages, Packages
@section @t{net.didierverna.clon}
@anchor{❨45❩}@c
@packageindex{net.didierverna.clon}@c
The Clon library's package.
@table @strong
@item Source
@ref{❨19❩, , @t{package.lisp}}.
@item Nickname
@t{clon}
@item Use List
@itemize @bullet
@item
@t{common-lisp}.
@item
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@end itemize
@item Public Interface
@itemize @bullet
@item
@ref{❨599❩, , @t{*context*}}@: (special variable).
@item
@ref{❨602❩, , @t{*executablep*}}@: (special variable).
@item
@ref{❨629❩, , @t{*synopsis*}}@: (special variable).
@item
@ref{❨623❩, , @t{cmdline}}@: (function).
@item
@ref{❨609❩, , @t{cmdline-options-p}}@: (function).
@item
@ref{❨608❩, , @t{cmdline-p}}@: (function).
@item
@ref{❨612❩, , @t{defgroup}}@: (macro).
@item
@ref{❨617❩, , @t{defsynopsis}}@: (macro).
@item
@ref{❨626❩, , @t{do-cmdline-options}}@: (macro).
@item
@ref{❨627❩, , @t{dump}}@: (macro).
@item
@ref{❨622❩, , @t{executablep}}@: (function).
@item
@ref{❨625❩, , @t{exit}}@: (function).
@item
@ref{❨604❩, , @t{getopt}}@: (function).
@item
@ref{❨603❩, , @t{getopt-cmdline}}@: (function).
@item
@ref{❨615❩, , @t{help}}@: (function).
@item
@ref{❨628❩, , @t{make-context}}@: (function).
@item
@ref{❨624❩, , @t{make-enum}}@: (function).
@item
@ref{❨614❩, , @t{make-flag}}@: (function).
@item
@ref{❨607❩, , @t{make-group}}@: (function).
@item
@ref{❨620❩, , @t{make-lispobj}}@: (function).
@item
@ref{❨600❩, , @t{make-path}}@: (function).
@item
@ref{❨605❩, , @t{make-stropt}}@: (function).
@item
@ref{❨610❩, , @t{make-switch}}@: (function).
@item
@ref{❨621❩, , @t{make-synopsis}}@: (function).
@item
@ref{❨616❩, , @t{make-text}}@: (function).
@item
@ref{❨619❩, , @t{make-xswitch}}@: (function).
@item
@ref{❨606❩, , @t{multiple-value-getopt-cmdline}}@: (macro).
@item
@ref{❨613❩, , @t{nickname-package}}@: (function).
@item
@ref{❨618❩, , @t{progname}}@: (function).
@item
@ref{❨611❩, , @t{remainder}}@: (function).
@item
@ref{❨601❩, , @t{with-context}}@: (macro).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨543❩, , @t{%defgroup}}@: (macro).
@item
@ref{❨394❩, , @t{*highlight-properties*}}@: (special variable).
@item
@ref{❨167❩, , @t{*item-names*}}@: (special variable).
@item
@ref{❨547❩, , @t{abstract-class}}@: (class).
@item
@ref{❨461❩, , @t{accumulate}}@: (macro).
@item
@ref{❨484❩, , @t{add-subface}}@: (function).
@item
@ref{❨179❩, , @t{argument}}@: (generic reader).
@item
@ref{❨224❩, , @t{argument-name}}@: (generic reader).
@item
@ref{❨307❩, , @t{argument-popable-p}}@: (function).
@item
@ref{❨363❩, , @t{argument-required-p}}@: (generic reader).
@item
@ref{❨539❩, , @t{argument-style}}@: (generic reader).
@item
@ref{❨463❩, , @t{argument-styles}}@: (generic reader).
@item
@ref{❨465❩, , @t{(setf argument-styles)}}@: (generic writer).
@item
@ref{❨251❩, , @t{attach-face-tree}}@: (function).
@item
@ref{❨542❩, , @t{available-right-margin}}@: (function).
@item
@ref{❨427❩, , @t{background}}@: (generic reader).
@item
@ref{❨214❩, , @t{beginning-of-string-p}}@: (function).
@item
@ref{❨193❩, , @t{blink}}@: (generic reader).
@item
@ref{❨65❩, , @t{bottom-padding}}@: (generic reader).
@item
@ref{❨107❩, , @t{check}}@: (generic function).
@item
@ref{❨122❩, , @t{check-name-clash}}@: (generic function).
@item
@ref{❨533❩, , @t{clon-options-group}}@: (generic function).
@item
@ref{❨544❩, , @t{close-frame}}@: (generic function).
@item
@ref{❨481❩, , @t{close-line}}@: (function).
@item
@ref{❨105❩, , @t{close-sface}}@: (function).
@item
@ref{❨56❩, , @t{closest-match}}@: (function).
@item
@ref{❨213❩, , @t{cmdline-convert}}@: (function).
@item
@ref{❨50❩, , @t{cmdline-error}}@: (condition).
@item
@ref{❨482❩, , @t{cmdline-junk-error}}@: (condition).
@item
@ref{❨571❩, , @t{cmdline-option}}@: (structure).
@item
@ref{❨261❩, , @t{cmdline-option-error}}@: (condition).
@item
@ref{❨425❩, , @t{cmdline-option-name}}@: (reader).
@item
@ref{❨426❩, , @t{(setf cmdline-option-name)}}@: (writer).
@item
@ref{❨147❩, , @t{cmdline-option-option}}@: (reader).
@item
@ref{❨148❩, , @t{(setf cmdline-option-option)}}@: (writer).
@item
@ref{❨243❩, , @t{cmdline-option-p}}@: (function).
@item
@ref{❨432❩, , @t{cmdline-option-source}}@: (reader).
@item
@ref{❨433❩, , @t{(setf cmdline-option-source)}}@: (writer).
@item
@ref{❨236❩, , @t{cmdline-option-value}}@: (reader).
@item
@ref{❨237❩, , @t{(setf cmdline-option-value)}}@: (writer).
@item
@ref{❨226❩, , @t{cmdline-options}}@: (generic reader).
@item
@ref{❨228❩, , @t{(setf cmdline-options)}}@: (generic writer).
@item
@ref{❨359❩, , @t{column}}@: (generic reader).
@item
@ref{❨361❩, , @t{(setf column)}}@: (generic writer).
@item
@ref{❨79❩, , @t{comment}}@: (generic reader).
@item
@ref{❨198❩, , @t{complete-string}}@: (function).
@item
@ref{❨474❩, , @t{concealedp}}@: (generic reader).
@item
@ref{❨149❩, , @t{container}}@: (class).
@item
@ref{❨596❩, , @t{contents}}@: (generic reader).
@item
@ref{❨169❩, , @t{context}}@: (class).
@item
@ref{❨206❩, , @t{convert}}@: (generic function).
@item
@ref{❨264❩, , @t{copy-cmdline-option}}@: (function).
@item
@ref{❨195❩, , @t{copy-frame}}@: (function).
@item
@ref{❨407❩, , @t{copy-highlight-frame}}@: (function).
@item
@ref{❨120❩, , @t{copy-highlight-property-instance}}@: (function).
@item
@ref{❨185❩, , @t{copy-instance}}@: (generic function).
@item
@ref{❨161❩, , @t{crossed-out-p}}@: (generic reader).
@item
@ref{❨301❩, , @t{current-frame}}@: (function).
@item
@ref{❨550❩, , @t{current-left-margin}}@: (function).
@item
@ref{❨199❩, , @t{current-right-margin}}@: (function).
@item
@ref{❨269❩, , @t{current-sface}}@: (function).
@item
@ref{❨358❩, , @t{declare-valid-superclass}}@: (macro).
@item
@ref{❨570❩, , @t{defabstract}}@: (macro).
@item
@ref{❨417❩, , @t{default-value}}@: (generic reader).
@item
@ref{❨104❩, , @t{defoption}}@: (macro).
@item
@ref{❨372❩, , @t{description}}@: (generic reader).
@item
@ref{❨588❩, , @t{directory-pathname-p}}@: (function).
@item
@ref{❨302❩, , @t{do-options}}@: (macro).
@item
@ref{❨470❩, , @t{econd}}@: (macro).
@item
@ref{❨476❩, , @t{endpush}}@: (macro).
@item
@ref{❨318❩, , @t{enum}}@: (generic reader).
@item
@ref{❨320❩, , @t{enum}}@: (class).
@item
@ref{❨203❩, , @t{enum-base}}@: (class).
@item
@ref{❨385❩, , @t{env-val}}@: (generic reader).
@item
@ref{❨278❩, , @t{env-var}}@: (generic reader).
@item
@ref{❨303❩, , @t{environment-convert}}@: (function).
@item
@ref{❨479❩, , @t{environment-error}}@: (condition).
@item
@ref{❨471❩, , @t{environmental-option-error}}@: (condition).
@item
@ref{❨57❩, , @t{error-handler}}@: (generic reader).
@item
@ref{❨368❩, , @t{error-string}}@: (generic reader).
@item
@ref{❨370❩, , @t{(setf error-string)}}@: (generic writer).
@item
@ref{❨456❩, , @t{exit-abnormally}}@: (function).
@item
@ref{❨491❩, , @t{face}}@: (class).
@item
@ref{❨121❩, , @t{face-highlight-property-set-p}}@: (function).
@item
@ref{❨334❩, , @t{face-highlight-property-value}}@: (function).
@item
@ref{❨548❩, , @t{fallback-value}}@: (generic reader).
@item
@ref{❨567❩, , @t{find-sface}}@: (function).
@item
@ref{❨415❩, , @t{flag}}@: (class).
@item
@ref{❨242❩, , @t{flush-sheet}}@: (function).
@item
@ref{❨485❩, , @t{foreground}}@: (generic reader).
@item
@ref{❨283❩, , @t{frame}}@: (structure).
@item
@ref{❨276❩, , @t{frame-left-margin}}@: (reader).
@item
@ref{❨277❩, , @t{(setf frame-left-margin)}}@: (writer).
@item
@ref{❨90❩, , @t{frame-p}}@: (function).
@item
@ref{❨472❩, , @t{frame-right-margin}}@: (reader).
@item
@ref{❨473❩, , @t{(setf frame-right-margin)}}@: (writer).
@item
@ref{❨374❩, , @t{frame-sface}}@: (reader).
@item
@ref{❨375❩, , @t{(setf frame-sface)}}@: (writer).
@item
@ref{❨129❩, , @t{framedp}}@: (generic reader).
@item
@ref{❨346❩, , @t{frames}}@: (generic reader).
@item
@ref{❨348❩, , @t{(setf frames)}}@: (generic writer).
@item
@ref{❨584❩, , @t{get-bottom-padding}}@: (generic function).
@item
@ref{❨487❩, , @t{get-top-padding}}@: (function).
@item
@ref{❨246❩, , @t{getenv}}@: (function).
@item
@ref{❨405❩, , @t{group}}@: (class).
@item
@ref{❨419❩, , @t{header}}@: (generic reader).
@item
@ref{❨335❩, , @t{help-spec}}@: (generic function).
@item
@ref{❨139❩, , @t{help-spec-items-will-print}}@: (function).
@item
@ref{❨72❩, , @t{help-spec-will-print}}@: (generic function).
@item
@ref{❨215❩, , @t{hiddenp}}@: (generic reader).
@item
@ref{❨183❩, , @t{highlight}}@: (generic reader).
@item
@ref{❨444❩, , @t{highlight-frame}}@: (structure).
@item
@ref{❨144❩, , @t{highlight-frame-highlight-property-instances}}@: (reader).
@item
@ref{❨145❩, , @t{(setf highlight-frame-highlight-property-instances)}}@: (writer).
@item
@ref{❨350❩, , @t{highlight-frame-left-margin}}@: (function).
@item
@ref{❨351❩, , @t{(setf highlight-frame-left-margin)}}@: (function).
@item
@ref{❨384❩, , @t{highlight-frame-p}}@: (function).
@item
@ref{❨238❩, , @t{highlight-frame-right-margin}}@: (function).
@item
@ref{❨239❩, , @t{(setf highlight-frame-right-margin)}}@: (function).
@item
@ref{❨395❩, , @t{highlight-frame-sface}}@: (function).
@item
@ref{❨396❩, , @t{(setf highlight-frame-sface)}}@: (function).
@item
@ref{❨263❩, , @t{highlight-property-ecase}}@: (macro).
@item
@ref{❨365❩, , @t{highlight-property-instance}}@: (structure).
@item
@ref{❨235❩, , @t{highlight-property-instance-escape-sequence}}@: (function).
@item
@ref{❨222❩, , @t{highlight-property-instance-name}}@: (reader).
@item
@ref{❨223❩, , @t{(setf highlight-property-instance-name)}}@: (writer).
@item
@ref{❨205❩, , @t{highlight-property-instance-p}}@: (function).
@item
@ref{❨115❩, , @t{highlight-property-instance-value}}@: (reader).
@item
@ref{❨116❩, , @t{(setf highlight-property-instance-value)}}@: (writer).
@item
@ref{❨86❩, , @t{highlightp}}@: (generic reader).
@item
@ref{❨327❩, , @t{home-directory}}@: (function).
@item
@ref{❨328❩, , @t{home-directory}}@: (condition).
@item
@ref{❨561❩, , @t{intensity}}@: (generic reader).
@item
@ref{❨593❩, , @t{invalid-argument}}@: (condition).
@item
@ref{❨151❩, , @t{invalid-cmdline-argument}}@: (condition).
@item
@ref{❨467❩, , @t{invalid-environment-value}}@: (condition).
@item
@ref{❨234❩, , @t{invalid-negated-equal-syntax}}@: (condition).
@item
@ref{❨157❩, , @t{invalid-negated-syntax}}@: (condition).
@item
@ref{❨106❩, , @t{invalid-short-equal-syntax}}@: (condition).
@item
@ref{❨387❩, , @t{invalid-value}}@: (condition).
@item
@ref{❨252❩, , @t{inversep}}@: (generic reader).
@item
@ref{❨196❩, , @t{italicp}}@: (generic reader).
@item
@ref{❨67❩, , @t{item}}@: (generic reader).
@item
@ref{❨69❩, , @t{item}}@: (class).
@item
@ref{❨553❩, , @t{item-separator}}@: (generic reader).
@item
@ref{❨563❩, , @t{items}}@: (generic reader).
@item
@ref{❨591❩, , @t{junk}}@: (generic reader).
@item
@ref{❨117❩, , @t{left-padding}}@: (generic reader).
@item
@ref{❨287❩, , @t{line-width}}@: (generic reader).
@item
@ref{❨381❩, , @t{lispobj}}@: (class).
@item
@ref{❨541❩, , @t{list-to-string}}@: (function).
@item
@ref{❨152❩, , @t{long-name}}@: (generic reader).
@item
@ref{❨590❩, , @t{macosp}}@: (function).
@item
@ref{❨137❩, , @t{make-cmdline-option}}@: (function).
@item
@ref{❨101❩, , @t{make-face-tree}}@: (generic function).
@item
@ref{❨587❩, , @t{make-frame}}@: (function).
@item
@ref{❨281❩, , @t{make-highlight-frame}}@: (function).
@item
@ref{❨202❩, , @t{make-highlight-property-instance}}@: (function).
@item
@ref{❨421❩, , @t{make-internal-enum}}@: (function).
@item
@ref{❨61❩, , @t{make-internal-flag}}@: (function).
@item
@ref{❨166❩, , @t{make-internal-lispobj}}@: (function).
@item
@ref{❨59❩, , @t{make-internal-path}}@: (function).
@item
@ref{❨168❩, , @t{make-internal-stropt}}@: (function).
@item
@ref{❨462❩, , @t{make-internal-switch}}@: (function).
@item
@ref{❨457❩, , @t{make-internal-text}}@: (function).
@item
@ref{❨305❩, , @t{make-internal-xswitch}}@: (function).
@item
@ref{❨78❩, , @t{make-raw-face-tree}}@: (function).
@item
@ref{❨536❩, , @t{make-raw-sface}}@: (function).
@item
@ref{❨159❩, , @t{make-sheet}}@: (function).
@item
@ref{❨344❩, , @t{map-frames}}@: (macro).
@item
@ref{❨270❩, , @t{mapoptions}}@: (generic function).
@item
@ref{❨52❩, , @t{match-option}}@: (function).
@item
@ref{❨250❩, , @t{maybe-pop-argument}}@: (macro).
@item
@ref{❨598❩, , @t{maybe-push}}@: (macro).
@item
@ref{❨47❩, , @t{missing-cmdline-argument}}@: (condition).
@item
@ref{❨390❩, , @t{name}}@: (generic reader).
@item
@ref{❨114❩, , @t{negatable}}@: (class).
@item
@ref{❨517❩, , @t{negated-call}}@: (generic reader).
@item
@ref{❨376❩, , @t{negated-pack}}@: (generic function).
@item
@ref{❨355❩, , @t{negated-pack-char}}@: (generic function).
@item
@ref{❨82❩, , @t{no-values}}@: (generic reader).
@item
@ref{❨84❩, , @t{(setf no-values)}}@: (generic writer).
@item
@ref{❨312❩, , @t{open-frame}}@: (generic function).
@item
@ref{❨306❩, , @t{open-line}}@: (function).
@item
@ref{❨93❩, , @t{open-next-line}}@: (function).
@item
@ref{❨99❩, , @t{open-sface}}@: (function).
@item
@ref{❨408❩, , @t{option}}@: (generic reader).
@item
@ref{❨410❩, , @t{option}}@: (class).
@item
@ref{❨343❩, , @t{option-abbreviation-distance}}@: (function).
@item
@ref{❨324❩, , @t{option-call-p}}@: (function).
@item
@ref{❨379❩, , @t{option-error}}@: (condition).
@item
@ref{❨429❩, , @t{option-sticky-distance}}@: (generic function).
@item
@ref{❨76❩, , @t{output-stream}}@: (generic reader).
@item
@ref{❨322❩, , @t{parent}}@: (generic reader).
@item
@ref{❨398❩, , @t{parent-generation}}@: (function).
@item
@ref{❨434❩, , @t{path}}@: (class).
@item
@ref{❨537❩, , @t{path-type}}@: (generic reader).
@item
@ref{❨138❩, , @t{pathname-component-null-p}}@: (function).
@item
@ref{❨132❩, , @t{pop-frame}}@: (function).
@item
@ref{❨217❩, , @t{postfix}}@: (generic function).
@item
@ref{❨555❩, , @t{potential-pack}}@: (generic reader).
@item
@ref{❨345❩, , @t{potential-pack-char}}@: (function).
@item
@ref{❨163❩, , @t{potential-pack-p}}@: (generic function).
@item
@ref{❨89❩, , @t{princ-char}}@: (function).
@item
@ref{❨469❩, , @t{princ-highlight-property-instances}}@: (function).
@item
@ref{❨92❩, , @t{princ-spaces}}@: (function).
@item
@ref{❨446❩, , @t{princ-string}}@: (function).
@item
@ref{❨221❩, , @t{print-error}}@: (function).
@item
@ref{❨100❩, , @t{print-faced-help-spec}}@: (function).
@item
@ref{❨240❩, , @t{print-help}}@: (function).
@item
@ref{❨519❩, , @t{print-help-spec}}@: (generic function).
@item
@ref{❨511❩, , @t{print-string}}@: (function).
@item
@ref{❨458❩, , @t{push-frame}}@: (function).
@item
@ref{❨60❩, , @t{putenv}}@: (function).
@item
@ref{❨530❩, , @t{reach-column}}@: (function).
@item
@ref{❨422❩, , @t{read-argument}}@: (function).
@item
@ref{❨293❩, , @t{read-call}}@: (function).
@item
@ref{❨304❩, , @t{read-env-val}}@: (function).
@item
@ref{❨528❩, , @t{read-long-name}}@: (function).
@item
@ref{❨88❩, , @t{read-sface-tree}}@: (function).
@item
@ref{❨131❩, , @t{read-value}}@: (function).
@item
@ref{❨589❩, , @t{remove-keys}}@: (function).
@item
@ref{❨529❩, , @t{replace-in-keys}}@: (macro).
@item
@ref{❨416❩, , @t{replace-key}}@: (function).
@item
@ref{❨119❩, , @t{replace-keys}}@: (function).
@item
@ref{❨233❩, , @t{restart-on-error}}@: (function).
@item
@ref{❨146❩, , @t{restartable-check}}@: (function).
@item
@ref{❨531❩, , @t{restartable-cmdline-convert}}@: (function).
@item
@ref{❨397❩, , @t{restartable-cmdline-junk-error}}@: (function).
@item
@ref{❨64❩, , @t{restartable-convert}}@: (function).
@item
@ref{❨565❩, , @t{restartable-environment-convert}}@: (function).
@item
@ref{❨91❩, , @t{restartable-invalid-negated-syntax-error}}@: (macro).
@item
@ref{❨241❩, , @t{restartable-spurious-cmdline-argument-error}}@: (macro).
@item
@ref{❨330❩, , @t{retrieve-from-environment}}@: (generic function).
@item
@ref{❨315❩, , @t{retrieve-from-long-call}}@: (generic function).
@item
@ref{❨133❩, , @t{retrieve-from-negated-call}}@: (generic function).
@item
@ref{❨96❩, , @t{retrieve-from-short-call}}@: (generic function).
@item
@ref{❨352❩, , @t{right-padding}}@: (generic reader).
@item
@ref{❨220❩, , @t{safe-left-margin}}@: (function).
@item
@ref{❨566❩, , @t{safe-right-margin}}@: (function).
@item
@ref{❨244❩, , @t{search-branch}}@: (function).
@item
@ref{❨95❩, , @t{search-face}}@: (function).
@item
@ref{❨94❩, , @t{search-option}}@: (function).
@item
@ref{❨292❩, , @t{search-option-by-abbreviation}}@: (function).
@item
@ref{❨143❩, , @t{search-option-by-name}}@: (function).
@item
@ref{❨290❩, , @t{search-path}}@: (generic reader).
@item
@ref{❨158❩, , @t{search-sticky-option}}@: (function).
@item
@ref{❨488❩, , @t{select-keys}}@: (function).
@item
@ref{❨551❩, , @t{sface}}@: (class).
@item
@ref{❨299❩, , @t{sface-tree}}@: (generic reader).
@item
@ref{❨254❩, , @t{sheet}}@: (class).
@item
@ref{❨568❩, , @t{short-call}}@: (generic reader).
@item
@ref{❨325❩, , @t{short-name}}@: (generic reader).
@item
@ref{❨140❩, , @t{short-pack}}@: (generic function).
@item
@ref{❨53❩, , @t{short-pack-char}}@: (generic function).
@item
@ref{❨525❩, , @t{short-syntax-help-spec-prefix}}@: (generic function).
@item
@ref{❨459❩, , @t{sibling}}@: (generic reader).
@item
@ref{❨532❩, , @t{split-path}}@: (function).
@item
@ref{❨62❩, , @t{spurious-cmdline-argument}}@: (condition).
@item
@ref{❨439❩, , @t{stream-ioctl-output-handle}}@: (generic function).
@item
@ref{❨245❩, , @t{stream-line-width}}@: (function).
@item
@ref{❨447❩, , @t{stringify}}@: (generic function).
@item
@ref{❨267❩, , @t{stropt}}@: (class).
@item
@ref{❨247❩, , @t{subface}}@: (generic function).
@item
@ref{❨423❩, , @t{subfaces}}@: (generic reader).
@item
@ref{❨282❩, , @t{switch}}@: (class).
@item
@ref{❨512❩, , @t{switch-base}}@: (class).
@item
@ref{❨576❩, , @t{synopsis}}@: (generic reader).
@item
@ref{❨578❩, , @t{synopsis}}@: (class).
@item
@ref{❨265❩, , @t{text}}@: (class).
@item
@ref{❨200❩, , @t{theme}}@: (generic reader).
@item
@ref{❨189❩, , @t{top-padding}}@: (generic function).
@item
@ref{❨308❩, , @t{traversedp}}@: (generic reader).
@item
@ref{❨310❩, , @t{(setf traversedp)}}@: (generic writer).
@item
@ref{❨156❩, , @t{try-read-sface-tree}}@: (function).
@item
@ref{❨354❩, , @t{try-read-theme}}@: (function).
@item
@ref{❨48❩, , @t{typespec}}@: (generic reader).
@item
@ref{❨489❩, , @t{underline}}@: (generic reader).
@item
@ref{❨230❩, , @t{unknown-cmdline-option-error}}@: (condition).
@item
@ref{❨437❩, , @t{unrecognized-negated-call-error}}@: (condition).
@item
@ref{❨454❩, , @t{unrecognized-short-call-error}}@: (condition).
@item
@ref{❨399❩, , @t{untraverse}}@: (generic function).
@item
@ref{❨187❩, , @t{value}}@: (generic reader).
@item
@ref{❨294❩, , @t{valued-option}}@: (class).
@item
@ref{❨477❩, , @t{visiblep}}@: (generic reader).
@item
@ref{❨160❩, , @t{with-context-error-handler}}@: (macro).
@item
@ref{❨154❩, , @t{xswitch}}@: (class).
@item
@ref{❨557❩, , @t{yes-values}}@: (generic reader).
@item
@ref{❨559❩, , @t{(setf yes-values)}}@: (generic writer).
@end itemize
@end table


@c --------------------------------------
@c The net.didierverna.clon.setup package
@c --------------------------------------
@node The net․didierverna․clon․setup package, , The net․didierverna․clon package, Packages
@section @t{net.didierverna.clon.setup}
@anchor{❨46❩}@c
@packageindex{net.didierverna.clon.setup}@c
The Clon setup library's package.
@table @strong
@item Source
@ref{❨14❩, , @t{package.lisp}}.
@item Use List
@t{common-lisp}.
@item Used By List
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Public Interface
@itemize @bullet
@item
@ref{❨641❩, , @t{*copyright-years*}}@: (special variable).
@item
@ref{❨639❩, , @t{*release-major-level*}}@: (special variable).
@item
@ref{❨644❩, , @t{*release-minor-level*}}@: (special variable).
@item
@ref{❨645❩, , @t{*release-name*}}@: (special variable).
@item
@ref{❨647❩, , @t{*release-status*}}@: (special variable).
@item
@ref{❨640❩, , @t{*release-status-level*}}@: (special variable).
@item
@ref{❨642❩, , @t{configuration}}@: (function).
@item
@ref{❨638❩, , @t{configure}}@: (function).
@item
@ref{❨646❩, , @t{setup-termio}}@: (function).
@item
@ref{❨643❩, , @t{version}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨631❩, , @t{%version}}@: (function).
@item
@ref{❨630❩, , @t{*configuration*}}@: (special variable).
@item
@ref{❨637❩, , @t{clindent}}@: (function).
@item
@ref{❨633❩, , @t{defindent}}@: (macro).
@item
@ref{❨635❩, , @t{i-reader}}@: (function).
@item
@ref{❨632❩, , @t{release-status-number}}@: (function).
@item
@ref{❨634❩, , @t{restrict-because}}@: (function).
@item
@ref{❨636❩, , @t{~-reader}}@: (function).
@end itemize
@end table



@c ====================================================================
@c Definitions
@c ====================================================================
@node Definitions, Indexes, Packages, Top
@chapter Definitions
Definitions are sorted by export status, category, package, and then by
lexicographic order.

@menu
* Public Interface::
* Internals::
@end menu


@c ----------------
@c Public Interface
@c ----------------
@node Public Interface, Internals, Definitions, Definitions
@section Public Interface
@menu
* Public special variables::
* Public macros::
* Public ordinary functions::
* Public standalone methods::
@end menu

@node Public special variables, Public macros, Public Interface, Public Interface
@subsection Special variables
@defvr {Special Variable} {*context*}
@anchor{❨599❩}@c
@specialsubindex{*context*}@c
The current context.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*copyright-years*}
@anchor{❨641❩}@c
@specialsubindex{*copyright-years*}@c
A string denoting the copyright years for the whole project.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*executablep*}
@anchor{❨602❩}@c
@specialsubindex{*executablep*}@c
Whether the current Lisp image is a standalone executable.@*
This information is needed in several implementations to distinguish
user options from implementation-specific ones on the command-line.

It is set automatically to T by the `dump' function@comma{} which see.@*
If the image is dumped by ASDF's program-op@comma{} this variable is ignored.
In any other case@comma{} that is@comma{} when dumping via an implementation-specific
function@comma{} it must be set manually to T just before dumping.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-major-level*}
@anchor{❨639❩}@c
@specialsubindex{*release-major-level*}@c
The major level of this release.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-minor-level*}
@anchor{❨644❩}@c
@specialsubindex{*release-minor-level*}@c
The minor level of this release.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-name*}
@anchor{❨645❩}@c
@specialsubindex{*release-name*}@c
The name of this release.@*
The general naming theme for Clon is "Great Jazz musicians".
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-status*}
@anchor{❨647❩}@c
@specialsubindex{*release-status*}@c
The status of this release.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-status-level*}
@anchor{❨640❩}@c
@specialsubindex{*release-status-level*}@c
The status level of this release.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*synopsis*}
@anchor{❨629❩}@c
@specialsubindex{*synopsis*}@c
The current synopsis.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@end table
@end defvr

@node Public macros, Public ordinary functions, Public special variables, Public Interface
@subsection Macros
@deffn {Macro} {defgroup} ((&rest keys &key header hidden) &body forms)
@anchor{❨612❩}@c
@macrosubindex{defgroup}@c
Define a new group.@*
KEYS are initargs to MAKE-GROUP (currently@comma{} only :header).@*
Each form in FORMS will be treated as a new :item.@*
The CAR of each form is the name of the operation to perform: TEXT@comma{} GROUP@comma{} or
an option class name. The rest are the arguments to the MAKE-<OP> function or
the DEFGROUP macro.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨36❩, , @t{group.lisp}}.
@end table
@end deffn
@deffn {Macro} {defsynopsis} ((&rest keys &key postfix make-default) &body forms)
@anchor{❨617❩}@c
@macrosubindex{defsynopsis}@c
Define a new synopsis.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@end table
@end deffn
@deffn {Macro} {do-cmdline-options} ((option name value source &key context) &body body)
@anchor{❨626❩}@c
@macrosubindex{do-cmdline-options}@c
Evaluate BODY over all command-line options in CONTEXT.@*
OPTION@comma{} NAME and VALUE are bound to each option's object@comma{} name used on the
command-line and retrieved value.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Macro} {dump} (name function &rest args)
@anchor{❨627❩}@c
@macrosubindex{dump}@c
Dump a standalone executable named NAME starting with FUNCTION.@*
ARGS may be any arguments understood by the underlying implementation's
dumping facility. They will simply be passed along. Note that DUMP already
passes some such arguments. Some of them are critical for the dumping facility
(e.g. :executable) and cannot be overridden. Some others@comma{} however@comma{} will be if
you provide them as well (e.g. :load-init-file).@*

Since executable dumping is not available in all supported implementations@comma{}
this function behaves differently in some cases@comma{} as described below.@*

- ECL doesn't create executables by dumping a Lisp image@comma{} but relies on having
  toplevel code to execute instead@comma{} so this macro simply expands to a call to
  FUNCTION. This also means that ARGS is unused.@*
- ABCL can't dump executables at all because of the underlying Java
  implementation@comma{} so this macro expands to just (PROGN) but creates a Java
  class file with a main function that creates an interpreter@comma{} loads@*
  the file in which this macro call appears and calls FUNCTION. This also
  means that ARGS is unused.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {multiple-value-getopt-cmdline} ((option name value source &key context) &body body)
@anchor{❨606❩}@c
@macrosubindex{multiple-value-getopt-cmdline}@c
Get the next command-line option in CONTEXT. and evaluate BODY.
OPTION@comma{} NAME and VALUE are bound to the values returned by GETOPT-CMDLINE.
BODY is executed only if there is a next command-line option.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Macro} {with-context} (context &body body)
@anchor{❨601❩}@c
@macrosubindex{with-context}@c
Execute BODY with *context* bound to CONTEXT.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn

@node Public ordinary functions, Public standalone methods, Public macros, Public Interface
@subsection Ordinary functions
@deffn {Function} {cmdline} ()
@anchor{❨623❩}@c
@functionsubindex{cmdline}@c
Get the current application's command-line.@*
This command-line is not supposed to contain any Lisp implementation specific
option; only user-level ones. When a standalone executable is dumped@comma{} this is
always the case. When used interactively@comma{} this depends on the underlying Lisp
implementation. See appendix A.5 of the user manual for more information.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {cmdline-options-p} (&key context)
@anchor{❨609❩}@c
@functionsubindex{cmdline-options-p}@c
Return T if CONTEXT has any unprocessed options left.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {cmdline-p} (&key context)
@anchor{❨608❩}@c
@functionsubindex{cmdline-p}@c
Return T if CONTEXT has anything on its command-line.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {configuration} (key)
@anchor{❨642❩}@c
@functionsubindex{configuration}@c
Return KEY's value in the current Clon configuration.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨15❩, , @t{configuration.lisp}}.
@end table
@end deffn
@deffn {Function} {configure} (key value)
@anchor{❨638❩}@c
@functionsubindex{configure}@c
Set KEY to VALUE in the current Clon configuration.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨15❩, , @t{configuration.lisp}}.
@end table
@end deffn
@deffn {Function} {executablep} ()
@anchor{❨622❩}@c
@functionsubindex{executablep}@c
Return T if the current Lisp image is a standalone executable.@*
This function detects executables dumped by ASDF's program-op operation@comma{}
those dumped by Clon's `dump' function (which see)@comma{} and those in which
`*executablep*' (which see) has been set to T manually.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {exit} (&optional status)
@anchor{❨625❩}@c
@functionsubindex{exit}@c
Quit the current application with STATUS.@*
This function is considered deprecated. Please use UIOP:QUIT instead.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {getopt} (&rest keys &key context short-name long-name option)
@anchor{❨604❩}@c
@functionsubindex{getopt}@c
Get an option's value in CONTEXT.@*
The option can be specified either by SHORT-NAME@comma{} LONG-NAME@comma{} or directly via
an OPTION object.@*
Return two values:@*
- the retrieved value@comma{}@*
- the value's source.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {getopt-cmdline} (&key context)
@anchor{❨603❩}@c
@functionsubindex{getopt-cmdline}@c
Get the next command-line option in CONTEXT.@*
When there is no next command-line option@comma{} return nil.
Otherwise@comma{} return four values:@*
- the option object@comma{}@*
- the option's name used on the command-line@comma{}@*
- the retrieved value@comma{}@*
- the value source.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {help} (&key context item output-stream search-path theme line-width highlight)
@anchor{❨615❩}@c
@functionsubindex{help}@c
Print CONTEXT's help.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {make-context} (&rest keys &key synopsis cmdline progname make-current)
@anchor{❨628❩}@c
@functionsubindex{make-context}@c
Make a new context.@*
- SYNOPSIS is the program synopsis to use in that context.@*
  It defaults to *SYNOPSIS*.@*
- CMDLINE is the argument list (strings) to process.@*
  It defaults to a POSIX conformant argv.@*
- PROGNAME is an alternate value for argv[0].@*
  It defaults to NIL@comma{} in which case the actual argv[0] is used.
  Otherwise@comma{} it can be a non-empty string@comma{} standing for itself@comma{}@*
  or :environment meaning to retrieve the value of the __CL_ARGV0 environment
  variable (ignored if it's empty).@*
  value.@*
- If MAKE-CURRENT@comma{} make the new context current. This is the default.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {make-enum} (&rest keys &key short-name long-name description argument-name argument-type enum env-var fallback-value default-value hidden)
@anchor{❨624❩}@c
@functionsubindex{make-enum}@c
Make a new enum option.@*
- SHORT-NAME is the option's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the option's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the option's description appearing in help strings.@*
  It defaults to nil.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENUM is the set of possible values.@*
- ENV-VAR is the option's associated environment variable.@*
  It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨33❩, , @t{enum.lisp}}.
@end table
@end deffn
@deffn {Function} {make-flag} (&rest keys &key short-name long-name description env-var hidden)
@anchor{❨614❩}@c
@functionsubindex{make-flag}@c
Make a new flag.@*
- SHORT-NAME is the option's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the option's long name (without the double-dash).
  It defaults to nil.@*
- DESCRIPTION is the option's description appearing in help strings.
  It defaults to nil.@*
- ENV-VAR is the flag's associated environment variable.@*
  It defaults to nil.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨24❩, , @t{flag.lisp}}.
@end table
@end deffn
@deffn {Function} {make-group} (&rest keys &key header item hidden)
@anchor{❨607❩}@c
@functionsubindex{make-group}@c
Make a new group.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨36❩, , @t{group.lisp}}.
@end table
@end deffn
@deffn {Function} {make-lispobj} (&rest keys &key short-name long-name description argument-name argument-type env-var typespec fallback-value default-value hidden)
@anchor{❨620❩}@c
@functionsubindex{make-lispobj}@c
Make a new lispobj option.@*
- SHORT-NAME is the option's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the option's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the option's description appearing in help strings.@*
  It defaults to nil.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable.@*
  It defaults to nil.@*
- TYPESPEC is a type specifier the option's value should satisfy.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨30❩, , @t{lispobj.lisp}}.
@end table
@end deffn
@deffn {Function} {make-path} (&rest keys &key short-name long-name description argument-name argument-type env-var fallback-value default-value type hidden)
@anchor{❨600❩}@c
@functionsubindex{make-path}@c
Make a new path option.@*
- SHORT-NAME is the option's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the option's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the option's description appearing in help strings.@*
  It defaults to nil.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable.@*
  It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- TYPE is the pathname type. It can be one of :file@comma{} :directory@comma{} :file-list@comma{}
  :directory-list or nil meaning that everything is allowed.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨31❩, , @t{path.lisp}}.
@end table
@end deffn
@deffn {Function} {make-stropt} (&rest keys &key short-name long-name description argument-name argument-type env-var fallback-value default-value hidden)
@anchor{❨605❩}@c
@functionsubindex{make-stropt}@c
Make a new string option.@*
- SHORT-NAME is the option's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the option's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the option's description appearing in help strings.@*
  It defaults to nil.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable.@*
  It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨29❩, , @t{stropt.lisp}}.
@end table
@end deffn
@deffn {Function} {make-switch} (&rest keys &key short-name long-name description argument-style argument-type env-var default-value hidden)
@anchor{❨610❩}@c
@functionsubindex{make-switch}@c
Make a new switch.@*
- SHORT-NAME is the switch's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the switch's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the switch's description appearing in help strings.@*
  It defaults to nil.@*
- ARGUMENT-STYLE is the switch's argument display style. It can be one of
  :yes/no@comma{} :on/off@comma{} :true/false@comma{} :yup/nope or :yeah/nah.@*
  It defaults to :yes/no.@*
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the switch's associated environment variable.@*
  It defaults to nil.@*
- DEFAULT-VALUE is the switch's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨28❩, , @t{switch.lisp}}.
@end table
@end deffn
@deffn {Function} {make-synopsis} (&rest keys &key postfix item make-default)
@anchor{❨621❩}@c
@functionsubindex{make-synopsis}@c
Make a new SYNOPSIS.@*
- POSTFIX is a string to append to the program synopsis@comma{} in case it accepts a
remainder.@*
- If MAKE-DEFAULT@comma{} make the new synopsis the default one.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@end table
@end deffn
@deffn {Function} {make-text} (&rest keys &key contents hidden)
@anchor{❨616❩}@c
@functionsubindex{make-text}@c
Make a new text.@*
- CONTENTS is the actual text to display.@*
- When HIDDEN@comma{} the text doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨22❩, , @t{text.lisp}}.
@end table
@end deffn
@deffn {Function} {make-xswitch} (&rest keys &key short-name long-name description argument-name argument-type enum env-var default-value hidden)
@anchor{❨619❩}@c
@functionsubindex{make-xswitch}@c
Make a new xswitch.@*
- SHORT-NAME is the xswitch's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the xswitch's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the xswitch's description appearing in help strings.
  It defaults to nil.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENUM is the set of possible non-boolean values.@*
- ENV-VAR is the xswitch's associated environment variable.@*
  It defaults to nil.@*
- DEFAULT-VALUE is the xswitch's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨34❩, , @t{xswitch.lisp}}.
@end table
@end deffn
@deffn {Function} {nickname-package} (&optional nickname)
@anchor{❨613❩}@c
@functionsubindex{nickname-package}@c
Add NICKNAME (:CLON by default) to the :NET.DIDIERVERNA.CLON package.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨19❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {progname} (&key context)
@anchor{❨618❩}@c
@functionsubindex{progname}@c
Return CONTEXT's program name.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {remainder} (&key context)
@anchor{❨611❩}@c
@functionsubindex{remainder}@c
Return CONTEXT's remainder.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {setup-termio} ()
@anchor{❨646❩}@c
@functionsubindex{setup-termio}@c
Autodetect termio support.@*
Update Clon configuration and *FEATURES* accordingly.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨18❩, , @t{termio.lisp}}.
@end table
@end deffn
@deffn {Function} {version} (&optional type)
@anchor{❨643❩}@c
@functionsubindex{version}@c
Return the current version of Clon.@*
TYPE can be one of :number@comma{} :short or :long.@*

A version number is computed as major*10000 + minor*100 + patchlevel@comma{} leaving
two digits for each level. Alpha@comma{} beta and rc status are ignored in version
numbers.@*

A short version is something like 1.3@lbracechar{}a@comma{}b@comma{}rc@rbracechar{}4@comma{} or 1.3.4 for patchlevel.
Alpha@comma{} beta or rc levels start at 1. Patchlevels start at 0 but are ignored
in the output@comma{} so that 1.3.0 appears as just 1.3.@*

A long version is something like@*
1.3 @lbracechar{}alpha@comma{}beta@comma{}release candidate@comma{}patchlevel@rbracechar{} 4 "Michael Brecker". As for
the short version@comma{} a patchlevel of 0 is ignored in the output.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end deffn

@node Public standalone methods, , Public ordinary functions, Public Interface
@subsection Standalone methods
@deffn {Method} {initialize-instance} :around ((container @ref{❨149❩, , @t{container}}) &rest keys &key item)
@anchor{❨660❩}@c
@methodsubindex{initialize-instance}@c
Canonicalize initialization arguments.@*
This involves:@*
- computing the :items initarg from the :item ones.
@table @strong
@item Source
@ref{❨35❩, , @t{container.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((container @ref{❨149❩, , @t{container}}) &key)
@anchor{❨661❩}@c
@methodsubindex{initialize-instance}@c
Perform name clash check on CONTAINER's items.
@table @strong
@item Source
@ref{❨35❩, , @t{container.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((context @ref{❨169❩, , @t{context}}) &key cmdline progname)
@anchor{❨662❩}@c
@methodsubindex{initialize-instance}@c
Parse CMDLINE.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :before ((enum-base @ref{❨203❩, , @t{enum-base}}) &key enum)
@anchor{❨663❩}@c
@methodsubindex{initialize-instance}@c
@table @strong
@item Source
@ref{❨32❩, , @t{enum-base.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :around ((sheet @ref{❨254❩, , @t{sheet}}) &rest keys &key output-stream line-width highlight)
@anchor{❨664❩}@c
@methodsubindex{initialize-instance}@c
Handle unset line width and AUTO highlight according to OUTPUT-STREAM.
@table @strong
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((sheet @ref{❨254❩, , @t{sheet}}) &key theme search-path)
@anchor{❨665❩}@c
@methodsubindex{initialize-instance}@c
Finish initialization of SHEET.@*
This involves:@*
- computing SHEET's sface tree from THEME and SEARCH-PATH@comma{}@*
- initializing SHEET's toplevel sface's sibling to a raw face tree.
@table @strong
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((switch @ref{❨282❩, , @t{switch}}) &key)
@anchor{❨666❩}@c
@methodsubindex{initialize-instance}@c
Provide an argument name conformant to the selected argument style.
@table @strong
@item Source
@ref{❨28❩, , @t{switch.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :before ((option @ref{❨294❩, , @t{valued-option}}) &key argument-type fallback-value default-value)
@anchor{❨668❩}@c
@methodsubindex{initialize-instance}@c
Check validity of the value-related initargs.
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((option @ref{❨294❩, , @t{valued-option}}) &key argument-type fallback-value default-value)
@anchor{❨669❩}@c
@methodsubindex{initialize-instance}@c
Compute uninitialized OPTION slots with indirect initargs.@*
This currently involves the conversion of the ARGUMENT-TYPE key to the
ARGUMENT-REQUIRED-P slot.
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :before ((option @ref{❨410❩, , @t{option}}) &key short-name long-name description internal)
@anchor{❨672❩}@c
@methodsubindex{initialize-instance}@c
Check validity of the name-related initargs.
@table @strong
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :around ((option @ref{❨410❩, , @t{option}}) &rest keys &key long-name env-var internal)
@anchor{❨673❩}@c
@methodsubindex{initialize-instance}@c
If INTERNAL@comma{} prefix LONG-NAME with "clon-" and ENV-VAR with "CLON_".
@table @strong
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :around ((instance @ref{❨491❩, , @t{face}}) &rest keys &key face bold display hidden revealed)
@anchor{❨722❩}@c
@methodsubindex{initialize-instance}@c
Canonicalize initialization arguments.@*
This involves:@*
- computing the :subfaces initarg from the :face ones@comma{}
- handling convenience highlight properties.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :before ((face @ref{❨491❩, , @t{face}}) &key name subfaces)
@anchor{❨723❩}@c
@methodsubindex{initialize-instance}@c
Check for unicity of FACE subfaces.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((face @ref{❨491❩, , @t{face}}) &key)
@anchor{❨724❩}@c
@methodsubindex{initialize-instance}@c
Fill in the parent slot of all subfaces.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :before ((switch-base @ref{❨512❩, , @t{switch-base}}) &key argument-style argument-styles)
@anchor{❨725❩}@c
@methodsubindex{initialize-instance}@c
Check for validity of the :ARGUMENT-STYLE initarg.
@table @strong
@item Source
@ref{❨27❩, , @t{switch-base.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :around ((switch-base @ref{❨512❩, , @t{switch-base}}) &rest keys &key argument-type)
@anchor{❨726❩}@c
@methodsubindex{initialize-instance}@c
Provide a fallback value of t when ARGUMENT-TYPE is optional.
@table @strong
@item Source
@ref{❨27❩, , @t{switch-base.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :around ((synopsis @ref{❨578❩, , @t{synopsis}}) &rest keys)
@anchor{❨734❩}@c
@methodsubindex{initialize-instance}@c
Prepare Clon specific options.
@table @strong
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((synopsis @ref{❨578❩, , @t{synopsis}}) &key)
@anchor{❨735❩}@c
@methodsubindex{initialize-instance}@c
Compute SYNOSPSIS's short and negated packs.
@table @strong
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@end table
@end deffn
@deffn {Method} {make-instance} ((class @ref{❨547❩, , @t{abstract-class}}) &rest initargs)
@anchor{❨731❩}@c
@methodsubindex{make-instance}@c
@table @strong
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {slot-unbound} (class (face @ref{❨491❩, , @t{face}}) slot)
@anchor{❨721❩}@c
@methodsubindex{slot-unbound}@c
Look up SLOT's value in FACE's parent if it's a highlight property.
If FACE has no parent@comma{} return nil.@*
For other properties@comma{} trigger an error.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Method} {validate-superclass} ((class @ref{❨547❩, , @t{abstract-class}}) (superclass @t{standard-class}))
@anchor{❨732❩}@c
@methodsubindex{validate-superclass}@c
@table @strong
@item Package
@t{sb-mop}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {validate-superclass} ((class @t{standard-class}) (superclass @ref{❨547❩, , @t{abstract-class}}))
@anchor{❨733❩}@c
@methodsubindex{validate-superclass}@c
@table @strong
@item Package
@t{sb-mop}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn


@c ---------
@c Internals
@c ---------
@node Internals, , Public Interface, Definitions
@section Internals
@menu
* Private special variables::
* Private macros::
* Private ordinary functions::
* Private generic functions::
* Private conditions::
* Private structures::
* Private classes::
@end menu

@node Private special variables, Private macros, Internals, Internals
@subsection Special variables
@defvr {Special Variable} {*configuration*}
@anchor{❨630❩}@c
@specialsubindex{*configuration*}@c
The Clon configuration settings.@*
This variable contains a property list of configuration options.
Current options are:@*
- :swank-eval-in-emacs (Boolean)@*
- :restricted (Boolean)@*
- :dump (Boolean)@*

See section A.1 of the user manual for more information.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨15❩, , @t{configuration.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*highlight-properties*}
@anchor{❨394❩}@c
@specialsubindex{*highlight-properties*}@c
The highlight face properties.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*item-names*}
@anchor{❨167❩}@c
@specialsubindex{*item-names*}@c
The list of defined item names.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@end table
@end defvr

@node Private macros, Private ordinary functions, Private special variables, Internals
@subsection Macros
@deffn {Macro} {%defgroup} (internalp (&rest keys &key header hidden) &body forms)
@anchor{❨543❩}@c
@macrosubindex{%defgroup}@c
Define a new group.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨36❩, , @t{group.lisp}}.
@end table
@end deffn
@deffn {Macro} {accumulate} ((initial-value) &body body)
@anchor{❨461❩}@c
@macrosubindex{accumulate}@c
Accumulate BODY forms in a list beginning with INITIAL-VALUE.
INITIAL-VALUE is not evaluated. BODY forms are accumulated only when their
value is non-nil.@*
If nothing to accumulate@comma{} then return nil instead of the list of
INITIAL-VALUE.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {declare-valid-superclass} (class superclass)
@anchor{❨358❩}@c
@macrosubindex{declare-valid-superclass}@c
Validate SUPERCLASS classes for CLASS classes.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {defabstract} (class super-classes slots &rest options)
@anchor{❨570❩}@c
@macrosubindex{defabstract}@c
Like DEFCLASS@comma{} but define an abstract class.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {defindent} (symbol indent)
@anchor{❨633❩}@c
@macrosubindex{defindent}@c
Wrapper around `clindent' to avoid quoting SYMBOL and INDENT.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨16❩, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Macro} {defoption} (class superclasses slots &rest options)
@anchor{❨104❩}@c
@macrosubindex{defoption}@c
Create a new option CLASS and register it with Clon.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@end table
@end deffn
@deffn {Macro} {do-options} ((opt there) &body body)
@anchor{❨302❩}@c
@macrosubindex{do-options}@c
Execute BODY with OPT bound to every option in THERE.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@end table
@end deffn
@deffn {Macro} {econd} (&body clauses)
@anchor{❨470❩}@c
@macrosubindex{econd}@c
Like COND@comma{} but signal an error if no clause evaluates to t.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {endpush} (object place)
@anchor{❨476❩}@c
@macrosubindex{endpush}@c
Like push@comma{} but at the end.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {highlight-property-ecase} (property value &body clauses)
@anchor{❨263❩}@c
@macrosubindex{highlight-property-ecase}@c
Create an ECASE form to extract PROPERTY's VALUE escape sequence.@*
Each clause looks like: (PROPERTY-NAME (VALUE-OR-VALUE-LIST ESCAPE-SEQUENCE)*).
The value-matching part will itself be enclosed in an ECASE expression.@*
In addition@comma{} the special clause syntax (BOOLEAN <PROPERTY-NAME> <YES> <NO>)
is a shortcut for: (PROPERTY-NAME ((on t) YES) ((off nil) NO)).
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Macro} {map-frames} (function (sheet &key reverse))
@anchor{❨344❩}@c
@macrosubindex{map-frames}@c
Map FUNCTION over SHEET's frames.
If REVERSE@comma{} map in reverse order.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Macro} {maybe-pop-argument} (cmdline option cmdline-argument)
@anchor{❨250❩}@c
@macrosubindex{maybe-pop-argument}@c
Pop OPTION's argument from CMDLINE if needed.
If so@comma{} store it in CMDLINE-ARGUMENT.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@end table
@end deffn
@deffn {Macro} {maybe-push} (object place)
@anchor{❨598❩}@c
@macrosubindex{maybe-push}@c
Like push@comma{} but only if OBJECT is non-nil.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {replace-in-keys} ((key val) keys the-key form)
@anchor{❨529❩}@c
@macrosubindex{replace-in-keys}@c
Replace every occurrence of THE-KEY in KEYS with FORM.@*
At every KEYS round@comma{} KEY and VAL are bound to the current key-value pair.
FORM is evaluated each time and should return a key-value list.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {restartable-invalid-negated-syntax-error} ((option) &body body)
@anchor{❨91❩}@c
@macrosubindex{restartable-invalid-negated-syntax-error}@c
Restartably throw an invalid-negated-syntax error.@*
The error relates to the command-line use of OPTION.@*
BODY constitutes the body of the only restart available@comma{}@*
use-short-call@comma{} and should act as if OPTION had been normally called by short
name.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@end table
@end deffn
@deffn {Macro} {restartable-spurious-cmdline-argument-error} ((option name argument) &body body)
@anchor{❨241❩}@c
@macrosubindex{restartable-spurious-cmdline-argument-error}@c
Restartably throw a spurious-cmdline-argument error.@*
The error relates to the command-line use of OPTION called by NAME with
ARGUMENT.@*
BODY constitutes the body of the only restart available@comma{} discard-argument@comma{} and
should act as if ARGUMENT had not been provided.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@end table
@end deffn
@deffn {Macro} {with-context-error-handler} (context &body body)
@anchor{❨160❩}@c
@macrosubindex{with-context-error-handler}@c
Execute BODY with CONTEXT's error handler bound for CONDITION.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn

@node Private ordinary functions, Private generic functions, Private macros, Internals
@subsection Ordinary functions
@deffn {Function} {%version} (type major minor status level name)
@anchor{❨631❩}@c
@functionsubindex{%version}@c
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end deffn
@deffn {Function} {add-subface} (face subface)
@anchor{❨484❩}@c
@functionsubindex{add-subface}@c
Add SUBFACE to FACE's subfaces and return it.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Function} {argument-popable-p} (cmdline)
@anchor{❨307❩}@c
@functionsubindex{argument-popable-p}@c
Return true if the first CMDLINE item is an argument.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@end table
@end deffn
@deffn {Function} {attach-face-tree} (face face-tree)
@anchor{❨251❩}@c
@functionsubindex{attach-face-tree}@c
Create a copy of FACE-TREE@comma{} attach it to FACE and return it.@*
Apart from the parenting information@comma{} the copied faces share slot values with
the original ones.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Function} {available-right-margin} (sheet)
@anchor{❨542❩}@c
@functionsubindex{available-right-margin}@c
Return SHEET's available right margin.@*
This margin is the first non-self margin specified by a frame. All inner self
frames can potentially write until the available right margin.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {beginning-of-string-p} (beginning string &optional ignore-case)
@anchor{❨214❩}@c
@functionsubindex{beginning-of-string-p}@c
Check that STRING starts with BEGINNING.
If IGNORE-CASE@comma{} well@comma{} ignore case.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {clindent} (symbol indent)
@anchor{❨637❩}@c
@functionsubindex{clindent}@c
Send SYMBOL's INDENTation information to Emacs.@*
Emacs will set the 'common-lisp-indent-function property.@*
If INDENT is a symbol@comma{} use its indentation definition. Otherwise@comma{} INDENT is
considered as an indentation definition.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨16❩, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Function} {close-line} (sheet)
@anchor{❨481❩}@c
@functionsubindex{close-line}@c
Close all frames on SHEET's current line and go to next line.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {close-sface} (sheet)
@anchor{❨105❩}@c
@functionsubindex{close-sface}@c
Close SHEET's current sface.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {closest-match} (match list &key ignore-case key)
@anchor{❨56❩}@c
@functionsubindex{closest-match}@c
Return the LIST element closest to MATCH@comma{} or nil.@*
If IGNORE-CASE@comma{} well@comma{} ignore case.@*
KEY should provide a way to get a string from each LIST element.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {cmdline-convert} (valued-option cmdline-name cmdline-argument)
@anchor{❨213❩}@c
@functionsubindex{cmdline-convert}@c
Convert CMDLINE-ARGUMENT to VALUED-OPTION's value.@*
This function is used when the conversion comes from a command-line usage of
VALUED-OPTION@comma{} called by CMDLINE-NAME@comma{} and intercepts invalid-argument errors
to raise the higher level invalid-cmdline-argument error instead.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@end table
@end deffn
@deffn {Reader} {cmdline-option-name} (instance)
@anchor{❨425❩}@c
@functionsubindex{cmdline-option-name}@c
@deffnx {Writer} {(setf cmdline-option-name)} (instance)
@anchor{❨426❩}@c
@functionsubindex{(setf cmdline-option-name)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨572❩, , @t{name}}.
@end table
@end deffn
@deffn {Reader} {cmdline-option-option} (instance)
@anchor{❨147❩}@c
@functionsubindex{cmdline-option-option}@c
@deffnx {Writer} {(setf cmdline-option-option)} (instance)
@anchor{❨148❩}@c
@functionsubindex{(setf cmdline-option-option)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨573❩, , @t{option}}.
@end table
@end deffn
@deffn {Function} {cmdline-option-p} (object)
@anchor{❨243❩}@c
@functionsubindex{cmdline-option-p}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Reader} {cmdline-option-source} (instance)
@anchor{❨432❩}@c
@functionsubindex{cmdline-option-source}@c
@deffnx {Writer} {(setf cmdline-option-source)} (instance)
@anchor{❨433❩}@c
@functionsubindex{(setf cmdline-option-source)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨575❩, , @t{source}}.
@end table
@end deffn
@deffn {Reader} {cmdline-option-value} (instance)
@anchor{❨236❩}@c
@functionsubindex{cmdline-option-value}@c
@deffnx {Writer} {(setf cmdline-option-value)} (instance)
@anchor{❨237❩}@c
@functionsubindex{(setf cmdline-option-value)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨574❩, , @t{value}}.
@end table
@end deffn
@deffn {Function} {complete-string} (beginning complete)
@anchor{❨198❩}@c
@functionsubindex{complete-string}@c
Complete BEGINNING with the rest of COMPLETE in parentheses.
For instance@comma{} completing 'he' with 'help' will produce 'he(lp)'.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {copy-cmdline-option} (instance)
@anchor{❨264❩}@c
@functionsubindex{copy-cmdline-option}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {copy-frame} (instance)
@anchor{❨195❩}@c
@functionsubindex{copy-frame}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {copy-highlight-frame} (instance)
@anchor{❨407❩}@c
@functionsubindex{copy-highlight-frame}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {copy-highlight-property-instance} (instance)
@anchor{❨120❩}@c
@functionsubindex{copy-highlight-property-instance}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {current-frame} (sheet)
@anchor{❨301❩}@c
@functionsubindex{current-frame}@c
Return SHEET's current frame.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {current-left-margin} (sheet)
@anchor{❨550❩}@c
@functionsubindex{current-left-margin}@c
Return SHEET's current left margin.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {current-right-margin} (sheet)
@anchor{❨199❩}@c
@functionsubindex{current-right-margin}@c
Return SHEET's current right margin.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {current-sface} (sheet)
@anchor{❨269❩}@c
@functionsubindex{current-sface}@c
Return SHEET's current sface or nil.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {directory-pathname-p} (pathname)
@anchor{❨588❩}@c
@functionsubindex{directory-pathname-p}@c
Return true if PATHNAME denotes a directory.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨31❩, , @t{path.lisp}}.
@end table
@end deffn
@deffn {Function} {environment-convert} (valued-option env-val)
@anchor{❨303❩}@c
@functionsubindex{environment-convert}@c
Convert ENV-VAL to VALUED-OPTION's value.@*
This function is used when the conversion comes from an environment variable
associated with VALUED-OPTION@comma{} and intercepts invalid-argument errors@*
to raise the higher level invalid-environment-value error instead.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨38❩, , @t{environ.lisp}}.
@end table
@end deffn
@deffn {Function} {exit-abnormally} (error)
@anchor{❨456❩}@c
@functionsubindex{exit-abnormally}@c
Print ERROR on *ERROR-OUTPUT* and exit with status code 1.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {face-highlight-property-set-p} (face property)
@anchor{❨121❩}@c
@functionsubindex{face-highlight-property-set-p}@c
Return t if PROPERTY is set explicitely in FACE.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Function} {face-highlight-property-value} (face property)
@anchor{❨334❩}@c
@functionsubindex{face-highlight-property-value}@c
Return PROPERTY's value in FACE.@*
Since faces inherit highlight properties@comma{} the actual value might come from one
of FACE's ancestors.@*
if PROPERTY is not et@comma{} return nil.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Function} {find-sface} (sface name)
@anchor{❨567❩}@c
@functionsubindex{find-sface}@c
Find an sface starting at SFACE named NAME.@*
If the sface can't be found in SFACE's face tree@comma{} find one in SFACE's sibling
instead@comma{} and make a copy of it.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {flush-sheet} (sheet)
@anchor{❨242❩}@c
@functionsubindex{flush-sheet}@c
Flush SHEET.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Reader} {frame-left-margin} (instance)
@anchor{❨276❩}@c
@functionsubindex{frame-left-margin}@c
@deffnx {Writer} {(setf frame-left-margin)} (instance)
@anchor{❨277❩}@c
@functionsubindex{(setf frame-left-margin)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨285❩, , @t{left-margin}}.
@end table
@end deffn
@deffn {Function} {frame-p} (object)
@anchor{❨90❩}@c
@functionsubindex{frame-p}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Reader} {frame-right-margin} (instance)
@anchor{❨472❩}@c
@functionsubindex{frame-right-margin}@c
@deffnx {Writer} {(setf frame-right-margin)} (instance)
@anchor{❨473❩}@c
@functionsubindex{(setf frame-right-margin)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨286❩, , @t{right-margin}}.
@end table
@end deffn
@deffn {Reader} {frame-sface} (instance)
@anchor{❨374❩}@c
@functionsubindex{frame-sface}@c
@deffnx {Writer} {(setf frame-sface)} (instance)
@anchor{❨375❩}@c
@functionsubindex{(setf frame-sface)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨284❩, , @t{sface}}.
@end table
@end deffn
@deffn {Function} {get-top-padding} (sface items)
@anchor{❨487❩}@c
@functionsubindex{get-top-padding}@c
Return top padding of the next item in ITEMS that will print under SFACE.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {getenv} (variable)
@anchor{❨246❩}@c
@functionsubindex{getenv}@c
Get environment VARIABLE's value. VARIABLE may be null.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {help-spec-items-will-print} (sface items)
@anchor{❨139❩}@c
@functionsubindex{help-spec-items-will-print}@c
Return t if at least one of ITEMS will print under SFACE.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Reader} {highlight-frame-highlight-property-instances} (instance)
@anchor{❨144❩}@c
@functionsubindex{highlight-frame-highlight-property-instances}@c
@deffnx {Writer} {(setf highlight-frame-highlight-property-instances)} (instance)
@anchor{❨145❩}@c
@functionsubindex{(setf highlight-frame-highlight-property-instances)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨445❩, , @t{highlight-property-instances}}.
@end table
@end deffn
@deffn {Function} {highlight-frame-left-margin} (instance)
@anchor{❨350❩}@c
@functionsubindex{highlight-frame-left-margin}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {(setf highlight-frame-left-margin)} (instance)
@anchor{❨351❩}@c
@functionsubindex{(setf highlight-frame-left-margin)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {highlight-frame-p} (object)
@anchor{❨384❩}@c
@functionsubindex{highlight-frame-p}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {highlight-frame-right-margin} (instance)
@anchor{❨238❩}@c
@functionsubindex{highlight-frame-right-margin}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {(setf highlight-frame-right-margin)} (instance)
@anchor{❨239❩}@c
@functionsubindex{(setf highlight-frame-right-margin)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {highlight-frame-sface} (instance)
@anchor{❨395❩}@c
@functionsubindex{highlight-frame-sface}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {(setf highlight-frame-sface)} (instance)
@anchor{❨396❩}@c
@functionsubindex{(setf highlight-frame-sface)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {highlight-property-instance-escape-sequence} (instance)
@anchor{❨235❩}@c
@functionsubindex{highlight-property-instance-escape-sequence}@c
Return highlight property INSTANCE's escape sequence.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Reader} {highlight-property-instance-name} (instance)
@anchor{❨222❩}@c
@functionsubindex{highlight-property-instance-name}@c
@deffnx {Writer} {(setf highlight-property-instance-name)} (instance)
@anchor{❨223❩}@c
@functionsubindex{(setf highlight-property-instance-name)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨366❩, , @t{name}}.
@end table
@end deffn
@deffn {Function} {highlight-property-instance-p} (object)
@anchor{❨205❩}@c
@functionsubindex{highlight-property-instance-p}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Reader} {highlight-property-instance-value} (instance)
@anchor{❨115❩}@c
@functionsubindex{highlight-property-instance-value}@c
@deffnx {Writer} {(setf highlight-property-instance-value)} (instance)
@anchor{❨116❩}@c
@functionsubindex{(setf highlight-property-instance-value)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨367❩, , @t{value}}.
@end table
@end deffn
@deffn {Function} {home-directory} ()
@anchor{❨327❩}@c
@functionsubindex{home-directory}@c
Return user's home directory in canonical form.@*
If the user's home directory cannot be computed@comma{} signal a warning and return
NIL.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {i-reader} (stream subchar arg)
@anchor{❨635❩}@c
@functionsubindex{i-reader}@c
Construct a call to `defindent' by reading an argument list from STREAM.
This dispatch macro character function is installed on @hashchar{}i in the
NET.DIDIERVERNA.CLON named readtable.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨16❩, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Function} {list-to-string} (list &key key separator)
@anchor{❨541❩}@c
@functionsubindex{list-to-string}@c
Return a SEPARATOR-separated string of all LIST elements.@*
- KEY should provide a way to get a string from each LIST element.
- SEPARATOR is the string to insert between elements.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {macosp} ()
@anchor{❨590❩}@c
@functionsubindex{macosp}@c
Return t if running on Mac OS.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {make-cmdline-option} (&key name option value source)
@anchor{❨137❩}@c
@functionsubindex{make-cmdline-option}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {make-frame} (&key sface left-margin right-margin)
@anchor{❨587❩}@c
@functionsubindex{make-frame}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {make-highlight-frame} (&key sface left-margin right-margin highlight-property-instances)
@anchor{❨281❩}@c
@functionsubindex{make-highlight-frame}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {make-highlight-property-instance} (&key name value)
@anchor{❨202❩}@c
@functionsubindex{make-highlight-property-instance}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {make-internal-enum} (long-name description &rest keys &key argument-name argument-type enum env-var fallback-value default-value hidden)
@anchor{❨421❩}@c
@functionsubindex{make-internal-enum}@c
Make a new internal (Clon-specific) enum option.@*
- LONG-NAME is the option's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the options's description.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENUM is the set of possible values.@*
- ENV-VAR is the option's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨33❩, , @t{enum.lisp}}.
@end table
@end deffn
@deffn {Function} {make-internal-flag} (long-name description &rest keys &key env-var hidden)
@anchor{❨61❩}@c
@functionsubindex{make-internal-flag}@c
Make a new internal (Clon-specific) flag.@*
- LONG-NAME is the flag's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the flag's description.@*
- ENV-VAR is the flag's associated environment variable@comma{} sans the 'CLON_'
  prefix. It default to nil.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨24❩, , @t{flag.lisp}}.
@end table
@end deffn
@deffn {Function} {make-internal-lispobj} (long-name description &rest keys &key argument-name argument-type env-var typespec fallback-value default-value hidden)
@anchor{❨166❩}@c
@functionsubindex{make-internal-lispobj}@c
Make a new internal (Clon-specific) string option.@*
- LONG-NAME is the option's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the options's description.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- TYPESPEC is a type specifier the option's value should satisfy.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨30❩, , @t{lispobj.lisp}}.
@end table
@end deffn
@deffn {Function} {make-internal-path} (long-name description &rest keys &key argument-name argument-type env-var fallback-value default-value type hidden)
@anchor{❨59❩}@c
@functionsubindex{make-internal-path}@c
Make a new internal (Clon-specific) path option.@*
- LONG-NAME is the option's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the options's description.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- TYPE is the pathname type. It can be one of :file@comma{} :directory@comma{} :file-list@comma{}
  :directory-list or nil meaning that everything is allowed.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨31❩, , @t{path.lisp}}.
@end table
@end deffn
@deffn {Function} {make-internal-stropt} (long-name description &rest keys &key argument-name argument-type env-var fallback-value default-value hidden)
@anchor{❨168❩}@c
@functionsubindex{make-internal-stropt}@c
Make a new internal (Clon-specific) string option.@*
- LONG-NAME is the option's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the options's description.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨29❩, , @t{stropt.lisp}}.
@end table
@end deffn
@deffn {Function} {make-internal-switch} (long-name description &rest keys &key argument-style argument-type env-var default-value hidden)
@anchor{❨462❩}@c
@functionsubindex{make-internal-switch}@c
Make a new internal (Clon-specific) switch.@*
- LONG-NAME is the switch's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the switch's description.@*
- ARGUMENT-STYLE is the switch's argument display style. It can be one of
  :yes/no@comma{} :on/off@comma{} :true/false@comma{} :yup/nope or :yeah/nah.@*
  It defaults to :yes/no.@*
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the switch's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- DEFAULT-VALUE is the switch's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨28❩, , @t{switch.lisp}}.
@end table
@end deffn
@deffn {Function} {make-internal-text} (&rest keys &key contents hidden)
@anchor{❨457❩}@c
@functionsubindex{make-internal-text}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨22❩, , @t{text.lisp}}.
@end table
@end deffn
@deffn {Function} {make-internal-xswitch} (long-name description &rest keys &key argument-name argument-type enum env-var default-value hidden)
@anchor{❨305❩}@c
@functionsubindex{make-internal-xswitch}@c
Make a new internal (Clon-specific) xswitch.@*
- LONG-NAME is the xswitch's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the xswitch's description.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENUM is the set of possible non-boolean values.@*
- ENV-VAR is the xswitch's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- DEFAULT-VALUE is the xswitch's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨34❩, , @t{xswitch.lisp}}.
@end table
@end deffn
@deffn {Function} {make-raw-face-tree} (&optional face-class)
@anchor{❨78❩}@c
@functionsubindex{make-raw-face-tree}@c
Make a raw (boring yet functional) face tree.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Function} {make-raw-sface} (sibling)
@anchor{❨536❩}@c
@functionsubindex{make-raw-sface}@c
Return a new SFace based on SIBLING.@*
This function does not consider SIBLING as a face tree:@*
only face properties are copied; the face parent and children are set to nil.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {make-sheet} (&rest keys &key output-stream search-path theme line-width highlight)
@anchor{❨159❩}@c
@functionsubindex{make-sheet}@c
Make a new SHEET.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {match-option} (option &key short-name long-name)
@anchor{❨52❩}@c
@functionsubindex{match-option}@c
Try to match OPTION against SHORT-NAME@comma{} LONG-NAME.
If OPTION matches@comma{} return the name that matched.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@end table
@end deffn
@deffn {Function} {open-line} (sheet)
@anchor{❨306❩}@c
@functionsubindex{open-line}@c
Open all frames on SHEET's current line.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {open-next-line} (sheet)
@anchor{❨93❩}@c
@functionsubindex{open-next-line}@c
Close SHEET's current line and open the next one.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {open-sface} (sheet sface)
@anchor{❨99❩}@c
@functionsubindex{open-sface}@c
Create a frame for SFACE and open it.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {option-abbreviation-distance} (option partial-name)
@anchor{❨343❩}@c
@functionsubindex{option-abbreviation-distance}@c
Return the distance between OPTION's long name and PARTIAL-NAME.
If PARTIAL-NAME does not abbreviate OPTION's long name@comma{} return
MOST-POSITIVE-FIXNUM.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@end table
@end deffn
@deffn {Function} {option-call-p} (str)
@anchor{❨324❩}@c
@functionsubindex{option-call-p}@c
Return true if STR looks like an option call.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@end table
@end deffn
@deffn {Function} {parent-generation} (face parent-name)
@anchor{❨398❩}@c
@functionsubindex{parent-generation}@c
Return FACE's parent generation for PARENT-NAME.@*
That is@comma{} 1 if PARENT-NAME names FACE's parent@comma{} 2 if it names its grand-parent
etc. If PARENT-NAME does not name one of FACE's ancestors@comma{} trigger an error.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Function} {pathname-component-null-p} (component)
@anchor{❨138❩}@c
@functionsubindex{pathname-component-null-p}@c
Return true if COMPONENT is either null or :unspecific.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨31❩, , @t{path.lisp}}.
@end table
@end deffn
@deffn {Function} {pop-frame} (sheet)
@anchor{❨132❩}@c
@functionsubindex{pop-frame}@c
Pop SHEET's current frame.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {potential-pack-char} (option &optional as-string)
@anchor{❨345❩}@c
@functionsubindex{potential-pack-char}@c
Return OPTION's potential pack character@comma{} if any.
If AS-STRING@comma{} return a string of that character.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@end table
@end deffn
@deffn {Function} {princ-char} (sheet char)
@anchor{❨89❩}@c
@functionsubindex{princ-char}@c
Princ CHAR on SHEET's stream and increment the column position.@*
The effect of printing CHAR must be exactly to move right by one column@comma{} so
control characters@comma{} as well as newlines and tabs are forbidden here.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {princ-highlight-property-instances} (sheet instances)
@anchor{❨469❩}@c
@functionsubindex{princ-highlight-property-instances}@c
Princ highlight proeprty INSTANCES on SHEET's stream.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {princ-spaces} (sheet number)
@anchor{❨92❩}@c
@functionsubindex{princ-spaces}@c
Princ NUMBER spaces to SHEET's stream and update the column position.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {princ-string} (sheet string)
@anchor{❨446❩}@c
@functionsubindex{princ-string}@c
Princ STRING on SHEET's stream and update the column position.@*
The effect of printing STRING must be exactly to move right by the
corresponding string length@comma{} so control characters@comma{} as well as newlines and
tabs are forbidden here.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {print-error} (error &optional interactivep)
@anchor{❨221❩}@c
@functionsubindex{print-error}@c
Print ERROR on *ERROR-OUTPUT*.@*
When INTERACTIVEP@comma{} print on *QUERY-IO* instead.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {print-faced-help-spec} (sheet sface items)
@anchor{❨100❩}@c
@functionsubindex{print-faced-help-spec}@c
Print all help specification ITEMS on SHEET with SFACE.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {print-help} (sheet help)
@anchor{❨240❩}@c
@functionsubindex{print-help}@c
Open the toplevel help face and print HELP on SHEET with it.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {print-string} (sheet string)
@anchor{❨511❩}@c
@functionsubindex{print-string}@c
Output STRING to SHEET.@*
STRING is output within the current frame's bounds.@*
Spacing characters are honored but newlines might replace spaces when the
output reaches the rightmost bound.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {push-frame} (sheet frame)
@anchor{❨458❩}@c
@functionsubindex{push-frame}@c
Push a new frame to SHEET's frames.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {putenv} (variable value)
@anchor{❨60❩}@c
@functionsubindex{putenv}@c
Set environment VARIABLE to VALUE.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {reach-column} (sheet column)
@anchor{❨530❩}@c
@functionsubindex{reach-column}@c
Reach COLUMN on SHEET by princ'ing spaces.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {read-argument} ()
@anchor{❨422❩}@c
@functionsubindex{read-argument}@c
Read an option argument from standard input.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@end table
@end deffn
@deffn {Function} {read-call} (&optional negated)
@anchor{❨293❩}@c
@functionsubindex{read-call}@c
Read an option's call or pack from standard input.@*
If NEGATED@comma{} read a negated call or pack. Otherwise@comma{} read a short call or pack.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {read-env-val} (env-var)
@anchor{❨304❩}@c
@functionsubindex{read-env-val}@c
Read ENV-VAR's new value from standard input.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨38❩, , @t{environ.lisp}}.
@end table
@end deffn
@deffn {Function} {read-long-name} ()
@anchor{❨528❩}@c
@functionsubindex{read-long-name}@c
Read an option's long name from standard input.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {read-sface-tree} (pathname)
@anchor{❨88❩}@c
@functionsubindex{read-sface-tree}@c
Read an sface tree from PATHNAME.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {read-value} ()
@anchor{❨131❩}@c
@functionsubindex{read-value}@c
Read an option value from standard input.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@end table
@end deffn
@deffn {Function} {release-status-number} (release-status)
@anchor{❨632❩}@c
@functionsubindex{release-status-number}@c
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end deffn
@deffn {Function} {remove-keys} (keys &rest removed)
@anchor{❨589❩}@c
@functionsubindex{remove-keys}@c
Return a new property list from KEYS without REMOVED ones.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {replace-key} (replacement keys)
@anchor{❨416❩}@c
@functionsubindex{replace-key}@c
Return a new property list from KEYS with REPLACEMENT.@*
REPLACEMENT can take the following forms:@*
- :KEY@*
  The effect is to remove :KEY from KEYS@comma{} as per REMOVE-KEYS.@*
- (:KEY :NEW-KEY)@*
  The effect is to replace :KEY with :NEW-KEY@comma{} leaving the values unchanged.
- (:KEY :NEW-KEY (VAL-OR-VALS NEW-VAL)*)@comma{} with VAL-OR-VALS being@*
  either a value or a list of values. The effect is to replace :KEY with
  :NEW-KEY and a value matching one of the VAL-OR-VALS with the
  corresponding NEW-VAL. Values not matching any VAL-OR-VALS remain unchanged.
- (:KEY (VAL-OR-VALS :NEW-KEY NEW-VAL...)*)@comma{} with VAL-OR-VALS as above. The
  effect is the same as above@comma{} but :NEW-KEY additionally depends on the
  matched value. If multiple :NEW-KEY NEW-VAL couples are provided@comma{} that many
  new keys are inserted along with their values. For values not matching any
  VAL-OR-VALS@comma{} :KEY and its value remain unchanged.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {replace-keys} (keys &rest replacements)
@anchor{❨119❩}@c
@functionsubindex{replace-keys}@c
Return a new property list from KEYS with REPLACEMENTS.@*
See REPLACE-KEY for more information on the replacement syntax.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {restart-on-error} (error)
@anchor{❨233❩}@c
@functionsubindex{restart-on-error}@c
Print ERROR and offer available restarts on *QUERY-IO*.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {restartable-check} (valued-option value)
@anchor{❨146❩}@c
@functionsubindex{restartable-check}@c
Restartably check that VALUE is valid for VALUED-OPTION.@*
The only restart available@comma{} use-value@comma{} offers to try a different value from
the one that was provided.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@end table
@end deffn
@deffn {Function} {restartable-cmdline-convert} (valued-option cmdline-name cmdline-argument)
@anchor{❨531❩}@c
@functionsubindex{restartable-cmdline-convert}@c
Restartably convert CMDLINE-ARGUMENT to VALUED-OPTION's value.@*
This function is used when the conversion comes from a command-line usage of
VALUED-OPTION@comma{} called by CMDLINE-NAME.@*

As well as conversion errors@comma{} this function might raise a
missing-cmdline-argument error if CMDLINE-ARGUMENT is nil and an argument is
required.@*

Available restarts are (depending on the context):@*
- use-fallback-value: return FALLBACK-VALUE@comma{}@*
- use-default-value: return VALUED-OPTION's default value@comma{}@*
- use-value: return another (already converted) value@comma{}@*
- use-argument: return the conversion of another argument.@*

Return two values: VALUED-OPTION's value and the actual value source.
The value source may be :cmdline@comma{} :fallback or :default.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@end table
@end deffn
@deffn {Function} {restartable-cmdline-junk-error} (junk)
@anchor{❨397❩}@c
@functionsubindex{restartable-cmdline-junk-error}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {restartable-convert} (valued-option argument)
@anchor{❨64❩}@c
@functionsubindex{restartable-convert}@c
Restartably convert ARGUMENT to VALUED-OPTION's value.
Available restarts are:@*
- use-default-value: return OPTION's default value@comma{}@*
- use-value: return another (already converted) value@comma{}
- use-argument: return the conversion of another argument.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@end table
@end deffn
@deffn {Function} {restartable-environment-convert} (valued-option env-val)
@anchor{❨565❩}@c
@functionsubindex{restartable-environment-convert}@c
Restartably convert ENV-VAL to VALUED-OPTION's value.@*
This function is used when the conversion comes from an environment variable
associated with VALUED-OPTION.@*

Available restarts are:@*
- use-default-value: return VALUED-OPTION's default value@comma{}@*
- use-value: return another (already converted) value@comma{}@*
- use-argument: return the conversion of another argument@comma{}@*
- modify-env: modify the environment variable's value.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨38❩, , @t{environ.lisp}}.
@end table
@end deffn
@deffn {Function} {restrict-because} (reason)
@anchor{❨634❩}@c
@functionsubindex{restrict-because}@c
Put Clon in restricted mode because of REASON.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨18❩, , @t{termio.lisp}}.
@end table
@end deffn
@deffn {Function} {safe-left-margin} (sheet margin)
@anchor{❨220❩}@c
@functionsubindex{safe-left-margin}@c
Return either MARGIN or a safe value instead.@*
To be safe@comma{} margin must be greater than the current left margin and smaller
than the currently available margin.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {safe-right-margin} (sheet left-margin margin)
@anchor{❨566❩}@c
@functionsubindex{safe-right-margin}@c
Return either MARGIN or a safe value instead.@*
To be safe@comma{} margin must be greater than LEFT-MARGIN and smaller
than the currently available right margin.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {search-branch} (face names)
@anchor{❨244❩}@c
@functionsubindex{search-branch}@c
Search for a branch of faces named NAMES starting at FACE.@*
The branch is searched for as a direct subbranch of FACE@comma{} or as a direct
subbranch of FACE's ancestors.@*
If a branch is found@comma{} return its leaf face. Otherwise return nil.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Function} {search-face} (face name &optional error-me)
@anchor{❨95❩}@c
@functionsubindex{search-face}@c
Search for a face named NAME starting at FACE.@*
The face is looked for as a direct subface of FACE (in which case it is simply
returned)@comma{} or up in the hierarchy and by successive upper branches (in which
case it is copied and attached to FACE).@*
If ERROR-ME@comma{} trigger an error if no face is found; otherwise@comma{} return nil.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@end table
@end deffn
@deffn {Function} {search-option} (context &rest keys &key short-name long-name partial-name)
@anchor{❨94❩}@c
@functionsubindex{search-option}@c
Search for an option in CONTEXT.@*
The search is done with SHORT-NAME@comma{} LONG-NAME@comma{} or PARTIAL-NAME.@*
In case of a PARTIAL-NAME search@comma{} look for an option the long name of which
begins with it.@*
In case of multiple matches by PARTIAL-NAME@comma{} the longest match is selected.
When such an option exists@comma{} return wo values:@*
- the option itself@comma{}@*
- the name used to find the option@comma{} possibly completed if partial.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {search-option-by-abbreviation} (context partial-name)
@anchor{❨292❩}@c
@functionsubindex{search-option-by-abbreviation}@c
Search for option abbreviated with PARTIAL-NAME in CONTEXT.
When such an option exists@comma{} return two values:@*
- the option itself@comma{}@*
- the completed name.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {search-option-by-name} (context &rest keys &key short-name long-name)
@anchor{❨143❩}@c
@functionsubindex{search-option-by-name}@c
Search for option with either SHORT-NAME or LONG-NAME in CONTEXT.
When such an option exists@comma{} return two values:@*
- the option itself@comma{}@*
- the name that matched.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {search-sticky-option} (context namearg)
@anchor{❨158❩}@c
@functionsubindex{search-sticky-option}@c
Search for a sticky option in CONTEXT@comma{} matching NAMEARG.@*
NAMEARG is the concatenation of the option's short name and its argument.
In case of multiple matches@comma{} the option with the longest name is selected.
When such an option exists@comma{} return two values:@*
- the option itself@comma{}@*
- the argument part of NAMEARG.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Function} {select-keys} (keys &rest selected)
@anchor{❨488❩}@c
@functionsubindex{select-keys}@c
Return a new property list from KEYS with only SELECTED ones.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {split-path} (path)
@anchor{❨532❩}@c
@functionsubindex{split-path}@c
Split PATH into a list of directories.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨31❩, , @t{path.lisp}}.
@end table
@end deffn
@deffn {Function} {stream-line-width} (stream)
@anchor{❨245❩}@c
@functionsubindex{stream-line-width}@c
Get STREAM's line width.@*
Return two values:@*
- the stream's line width@comma{} or nil if it can't be computed
  (typically when the stream does not denote a tty)@comma{}
- an error message if the operation failed.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨44❩, , @t{termio.lisp}}.
@end table
@end deffn
@deffn {Function} {try-read-sface-tree} (pathname)
@anchor{❨156❩}@c
@functionsubindex{try-read-sface-tree}@c
Read an sface tree from PATHNAME if it exists or return nil.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {try-read-theme} (pathname)
@anchor{❨354❩}@c
@functionsubindex{try-read-theme}@c
Read a theme from PATHNAME or PATHNAME.cth if it exists or return nil.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Function} {~-reader} (stream char)
@anchor{❨636❩}@c
@functionsubindex{~-reader}@c
Read a series of ~"string" to be concatenated together.
@table @strong
@item Package
@ref{❨46❩, , @t{net.didierverna.clon.setup}}.
@item Source
@ref{❨16❩, , @t{readtable.lisp}}.
@end table
@end deffn

@node Private generic functions, Private conditions, Private ordinary functions, Internals
@subsection Generic functions
@deffn {Generic Reader} {argument} (condition)
@anchor{❨179❩}@c
@genericsubindex{argument}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {argument} ((condition @ref{❨230❩, , @t{unknown-cmdline-option-error}}))
@anchor{❨180❩}@c
@methodsubindex{argument}@c
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨232❩, , @t{argument}}.
@end table
@end deffn
@deffn {Reader Method} {argument} ((condition @ref{❨62❩, , @t{spurious-cmdline-argument}}))
@anchor{❨181❩}@c
@methodsubindex{argument}@c
@table @strong
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Target Slot
@ref{❨63❩, , @t{argument}}.
@end table
@end deffn
@deffn {Reader Method} {argument} ((condition @ref{❨593❩, , @t{invalid-argument}}))
@anchor{❨182❩}@c
@methodsubindex{argument}@c
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Target Slot
@ref{❨594❩, , @t{argument}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {argument-name} (object)
@anchor{❨224❩}@c
@genericsubindex{argument-name}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {argument-name} ((valued-option @ref{❨294❩, , @t{valued-option}}))
@anchor{❨225❩}@c
@methodsubindex{argument-name}@c
The option's argument display name.
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Target Slot
@ref{❨295❩, , @t{argument-name}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {argument-required-p} (object)
@anchor{❨363❩}@c
@genericsubindex{argument-required-p}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {argument-required-p} ((valued-option @ref{❨294❩, , @t{valued-option}}))
@anchor{❨364❩}@c
@methodsubindex{argument-required-p}@c
Whether the option's argument is required.
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Target Slot
@ref{❨296❩, , @t{argument-required-p}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {argument-style} (object)
@anchor{❨539❩}@c
@genericsubindex{argument-style}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {argument-style} ((switch-base @ref{❨512❩, , @t{switch-base}}))
@anchor{❨540❩}@c
@methodsubindex{argument-style}@c
The selected argument style.
@table @strong
@item Source
@ref{❨27❩, , @t{switch-base.lisp}}.
@item Target Slot
@ref{❨516❩, , @t{argument-style}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {argument-styles} (object)
@anchor{❨463❩}@c
@genericsubindex{argument-styles}@c
@deffnx {Generic Writer} {(setf argument-styles)} (object)
@anchor{❨465❩}@c
@genericsubindex{(setf argument-styles)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {argument-styles} ((switch-base @ref{❨512❩, , @t{switch-base}}))
@anchor{❨464❩}@c
@methodsubindex{argument-styles}@c
@deffnx {Writer Method} {(setf argument-styles)} ((switch-base @ref{❨512❩, , @t{switch-base}}))
@anchor{❨466❩}@c
@methodsubindex{(setf argument-styles)}@c
The possible argument styles.@*
The position of every argument style in the list must correspond to the
position of the associated strings in the yes-values and no-values slots.
@table @strong
@item Source
@ref{❨27❩, , @t{switch-base.lisp}}.
@item Target Slot
@ref{❨513❩, , @t{argument-styles}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {background} (object)
@anchor{❨427❩}@c
@genericsubindex{background}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {background} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨428❩}@c
@methodsubindex{background}@c
The face background.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨508❩, , @t{background}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {blink} (object)
@anchor{❨193❩}@c
@genericsubindex{blink}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {blink} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨194❩}@c
@methodsubindex{blink}@c
The face's blink speed.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨502❩, , @t{blink}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {bottom-padding} (object)
@anchor{❨65❩}@c
@genericsubindex{bottom-padding}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {bottom-padding} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨66❩}@c
@methodsubindex{bottom-padding}@c
The face bottom padding.@*
This property can take the following forms:@*
- nil: the next output can start right at the end of this face's@comma{}
- 0: the next output should start on the next line@comma{}@*
- N>0: there should be N empty lines before the next output.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨497❩, , @t{bottom-padding}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {check} (valued-option value)
@anchor{❨107❩}@c
@genericsubindex{check}@c
Check that VALUE is valid for VALUED-OPTION.@*
If VALUE is valid@comma{} return it. Otherwise@comma{} raise an invalid-value error.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Methods
@deffn {Method} {check} ((xswitch @ref{❨154❩, , @t{xswitch}}) value)
@anchor{❨108❩}@c
@methodsubindex{check}@c
Check that VALUE is valid for XSWITCH.
@table @strong
@item Source
@ref{❨34❩, , @t{xswitch.lisp}}.
@end table
@end deffn
@deffn {Method} {check} ((enum @ref{❨320❩, , @t{enum}}) value)
@anchor{❨109❩}@c
@methodsubindex{check}@c
Check that VALUE is valid for ENUM.
@table @strong
@item Source
@ref{❨33❩, , @t{enum.lisp}}.
@end table
@end deffn
@deffn {Method} {check} ((path @ref{❨434❩, , @t{path}}) value)
@anchor{❨110❩}@c
@methodsubindex{check}@c
Check that VALUE is valid for PATH.
@table @strong
@item Source
@ref{❨31❩, , @t{path.lisp}}.
@end table
@end deffn
@deffn {Method} {check} ((lispobj @ref{❨381❩, , @t{lispobj}}) value)
@anchor{❨111❩}@c
@methodsubindex{check}@c
Check that VALUE is valid for LISPOBJ.
@table @strong
@item Source
@ref{❨30❩, , @t{lispobj.lisp}}.
@end table
@end deffn
@deffn {Method} {check} ((stropt @ref{❨267❩, , @t{stropt}}) value)
@anchor{❨112❩}@c
@methodsubindex{check}@c
Check that VALUE is valid for STROPT.
@table @strong
@item Source
@ref{❨29❩, , @t{stropt.lisp}}.
@end table
@end deffn
@deffn {Method} {check} ((switch @ref{❨282❩, , @t{switch}}) value)
@anchor{❨113❩}@c
@methodsubindex{check}@c
Check that VALUE is valid for SWITCH.
@table @strong
@item Source
@ref{❨28❩, , @t{switch.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {check-name-clash} (item1 item2)
@anchor{❨122❩}@c
@genericsubindex{check-name-clash}@c
Check for name clash between ITEM1's options and ITEM2's options.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@item Methods
@deffn {Method} {check-name-clash} ((container1 @ref{❨149❩, , @t{container}}) (container2 @ref{❨149❩, , @t{container}}))
@anchor{❨123❩}@c
@methodsubindex{check-name-clash}@c
Check for name clash between CONTAINER1's options and CONTAINER2's ones.
@table @strong
@item Source
@ref{❨35❩, , @t{container.lisp}}.
@end table
@end deffn
@deffn {Method} {check-name-clash} (item1 (container @ref{❨149❩, , @t{container}}))
@anchor{❨124❩}@c
@methodsubindex{check-name-clash}@c
Check for name clash between ITEM1's options and CONTAINER's ones.
@table @strong
@item Source
@ref{❨35❩, , @t{container.lisp}}.
@end table
@end deffn
@deffn {Method} {check-name-clash} ((container @ref{❨149❩, , @t{container}}) item2)
@anchor{❨125❩}@c
@methodsubindex{check-name-clash}@c
Check for name clash between CONTAINER's options and ITEM2's ones.
@table @strong
@item Source
@ref{❨35❩, , @t{container.lisp}}.
@end table
@end deffn
@deffn {Method} {check-name-clash} (item1 (text @ref{❨265❩, , @t{text}}))
@anchor{❨126❩}@c
@methodsubindex{check-name-clash}@c
Do nothing (no name clash with a text object.
@table @strong
@end table
@end deffn
@deffn {Method} {check-name-clash} ((text @ref{❨265❩, , @t{text}}) item2)
@anchor{❨127❩}@c
@methodsubindex{check-name-clash}@c
Do nothing (no name clash with a text object.
@table @strong
@end table
@end deffn
@deffn {Method} {check-name-clash} ((option1 @ref{❨410❩, , @t{option}}) (option2 @ref{❨410❩, , @t{option}}))
@anchor{❨128❩}@c
@methodsubindex{check-name-clash}@c
Ensure that there is no name clash between OPTION1 and OPTION2.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {clon-options-group} (object)
@anchor{❨533❩}@c
@genericsubindex{clon-options-group}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Method} {clon-options-group} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨534❩}@c
@methodsubindex{clon-options-group}@c
Return the Clon options group of CONTEXT's synopsis.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Reader Method} {clon-options-group} ((synopsis @ref{❨578❩, , @t{synopsis}}))
@anchor{❨535❩}@c
@methodsubindex{clon-options-group}@c
The Clon options group.
@table @strong
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@item Target Slot
@ref{❨583❩, , @t{clon-options-group}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {close-frame} (sheet frame)
@anchor{❨544❩}@c
@genericsubindex{close-frame}@c
Close FRAME on SHEET.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Method Combination
@t{progn}.
@table @strong
@item Options
@t{:most-specific-last}
@end table
@item Methods
@deffn {Method} {close-frame} progn (sheet (frame @ref{❨283❩, , @t{frame}}))
@anchor{❨545❩}@c
@methodsubindex{close-frame}@c
Reach FRAME's right margin if it has one.
@table @strong
@end table
@end deffn
@deffn {Method} {close-frame} progn (sheet (frame @ref{❨444❩, , @t{highlight-frame}}))
@anchor{❨546❩}@c
@methodsubindex{close-frame}@c
Restore the upper frame's highlight properties.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {cmdline-options} (object)
@anchor{❨226❩}@c
@genericsubindex{cmdline-options}@c
@deffnx {Generic Writer} {(setf cmdline-options)} (object)
@anchor{❨228❩}@c
@genericsubindex{(setf cmdline-options)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {cmdline-options} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨227❩}@c
@methodsubindex{cmdline-options}@c
@deffnx {Writer Method} {(setf cmdline-options)} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨229❩}@c
@methodsubindex{(setf cmdline-options)}@c
The options from the command-line.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨172❩, , @t{cmdline-options}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {column} (object)
@anchor{❨359❩}@c
@genericsubindex{column}@c
@deffnx {Generic Writer} {(setf column)} (object)
@anchor{❨361❩}@c
@genericsubindex{(setf column)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {column} ((sheet @ref{❨254❩, , @t{sheet}}))
@anchor{❨360❩}@c
@methodsubindex{column}@c
@deffnx {Writer Method} {(setf column)} ((sheet @ref{❨254❩, , @t{sheet}}))
@anchor{❨362❩}@c
@methodsubindex{(setf column)}@c
The sheet's current column.
@table @strong
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨259❩, , @t{column}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {comment} (condition)
@anchor{❨79❩}@c
@genericsubindex{comment}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {comment} ((condition @ref{❨593❩, , @t{invalid-argument}}))
@anchor{❨80❩}@c
@methodsubindex{comment}@c
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Target Slot
@ref{❨595❩, , @t{comment}}.
@end table
@end deffn
@deffn {Reader Method} {comment} ((condition @ref{❨387❩, , @t{invalid-value}}))
@anchor{❨81❩}@c
@methodsubindex{comment}@c
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Target Slot
@ref{❨389❩, , @t{comment}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {concealedp} (object)
@anchor{❨474❩}@c
@genericsubindex{concealedp}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {concealedp} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨475❩}@c
@methodsubindex{concealedp}@c
The face's concealed status.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨504❩, , @t{concealedp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {contents} (object)
@anchor{❨596❩}@c
@genericsubindex{contents}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {contents} ((text @ref{❨265❩, , @t{text}}))
@anchor{❨597❩}@c
@methodsubindex{contents}@c
The actual text string.
@table @strong
@item Source
@ref{❨22❩, , @t{text.lisp}}.
@item Target Slot
@ref{❨266❩, , @t{contents}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {convert} (valued-option argument)
@anchor{❨206❩}@c
@genericsubindex{convert}@c
Convert ARGUMENT to VALUED-OPTION's value.@*
If ARGUMENT is invalid@comma{} raise an invalid-argument error.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Methods
@deffn {Method} {convert} ((xswitch @ref{❨154❩, , @t{xswitch}}) argument)
@anchor{❨207❩}@c
@methodsubindex{convert}@c
Convert ARGUMENT to an XSWITCH value.
@table @strong
@item Source
@ref{❨34❩, , @t{xswitch.lisp}}.
@end table
@end deffn
@deffn {Method} {convert} ((enum @ref{❨320❩, , @t{enum}}) argument)
@anchor{❨208❩}@c
@methodsubindex{convert}@c
Convert ARGUMENT to an ENUM value.
@table @strong
@item Source
@ref{❨33❩, , @t{enum.lisp}}.
@end table
@end deffn
@deffn {Method} {convert} ((path @ref{❨434❩, , @t{path}}) argument)
@anchor{❨209❩}@c
@methodsubindex{convert}@c
Convert ARGUMENT to a PATH value.
@table @strong
@item Source
@ref{❨31❩, , @t{path.lisp}}.
@end table
@end deffn
@deffn {Method} {convert} ((lispobj @ref{❨381❩, , @t{lispobj}}) argument)
@anchor{❨210❩}@c
@methodsubindex{convert}@c
Convert ARGUMENT to a LISPOBJ value.
@table @strong
@item Source
@ref{❨30❩, , @t{lispobj.lisp}}.
@end table
@end deffn
@deffn {Method} {convert} ((stropt @ref{❨267❩, , @t{stropt}}) argument)
@anchor{❨211❩}@c
@methodsubindex{convert}@c
Convert ARGUMENT to an STROPT value.
@table @strong
@item Source
@ref{❨29❩, , @t{stropt.lisp}}.
@end table
@end deffn
@deffn {Method} {convert} ((switch @ref{❨282❩, , @t{switch}}) argument)
@anchor{❨212❩}@c
@methodsubindex{convert}@c
Convert ARGUMENT to a SWITCH value.
@table @strong
@item Source
@ref{❨28❩, , @t{switch.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {copy-instance} (instance &optional subclass)
@anchor{❨185❩}@c
@genericsubindex{copy-instance}@c
Return a copy of INSTANCE.@*
Copy is either an object of INSTANCE's class@comma{} or INSTANCE's SUBCLASS if given.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@item Methods
@deffn {Method} {copy-instance} (instance &optional subclass)
@anchor{❨186❩}@c
@methodsubindex{copy-instance}@c
Return a copy of INSTANCE.@*
Both instances share the same slot values.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {crossed-out-p} (object)
@anchor{❨161❩}@c
@genericsubindex{crossed-out-p}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {crossed-out-p} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨162❩}@c
@methodsubindex{crossed-out-p}@c
The face's crossed out status.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨505❩, , @t{crossed-out-p}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {default-value} (object)
@anchor{❨417❩}@c
@genericsubindex{default-value}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {default-value} ((valued-option @ref{❨294❩, , @t{valued-option}}))
@anchor{❨418❩}@c
@methodsubindex{default-value}@c
The option's default value.
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Target Slot
@ref{❨298❩, , @t{default-value}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {description} (object)
@anchor{❨372❩}@c
@genericsubindex{description}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {description} ((option @ref{❨410❩, , @t{option}}))
@anchor{❨373❩}@c
@methodsubindex{description}@c
The option's description.
@table @strong
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@item Target Slot
@ref{❨413❩, , @t{description}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {enum} (object)
@anchor{❨318❩}@c
@genericsubindex{enum}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {enum} ((enum-base @ref{❨203❩, , @t{enum-base}}))
@anchor{❨319❩}@c
@methodsubindex{enum}@c
The set of possible values.
@table @strong
@item Source
@ref{❨32❩, , @t{enum-base.lisp}}.
@item Target Slot
@ref{❨204❩, , @t{enum}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {env-val} (condition)
@anchor{❨385❩}@c
@genericsubindex{env-val}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {env-val} ((condition @ref{❨467❩, , @t{invalid-environment-value}}))
@anchor{❨386❩}@c
@methodsubindex{env-val}@c
@table @strong
@item Source
@ref{❨38❩, , @t{environ.lisp}}.
@item Target Slot
@ref{❨468❩, , @t{argument}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {env-var} (object)
@anchor{❨278❩}@c
@genericsubindex{env-var}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {env-var} ((condition @ref{❨479❩, , @t{environment-error}}))
@anchor{❨279❩}@c
@methodsubindex{env-var}@c
@table @strong
@item Source
@ref{❨38❩, , @t{environ.lisp}}.
@item Target Slot
@ref{❨480❩, , @t{env-var}}.
@end table
@end deffn
@deffn {Reader Method} {env-var} ((option @ref{❨410❩, , @t{option}}))
@anchor{❨280❩}@c
@methodsubindex{env-var}@c
The option's associated environment variable.
@table @strong
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@item Target Slot
@ref{❨414❩, , @t{env-var}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {error-handler} (object)
@anchor{❨57❩}@c
@genericsubindex{error-handler}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {error-handler} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨58❩}@c
@methodsubindex{error-handler}@c
The behavior to adopt on option retrieval errors.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨178❩, , @t{error-handler}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {error-string} (condition)
@anchor{❨368❩}@c
@genericsubindex{error-string}@c
@deffnx {Generic Writer} {(setf error-string)} (condition)
@anchor{❨370❩}@c
@genericsubindex{(setf error-string)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {error-string} ((condition @ref{❨328❩, , @t{home-directory}}))
@anchor{❨369❩}@c
@methodsubindex{error-string}@c
@deffnx {Writer Method} {(setf error-string)} ((condition @ref{❨328❩, , @t{home-directory}}))
@anchor{❨371❩}@c
@methodsubindex{(setf error-string)}@c
@table @strong
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@item Target Slot
@ref{❨329❩, , @t{error-string}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {fallback-value} (object)
@anchor{❨548❩}@c
@genericsubindex{fallback-value}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {fallback-value} ((valued-option @ref{❨294❩, , @t{valued-option}}))
@anchor{❨549❩}@c
@methodsubindex{fallback-value}@c
The option's fallback value.
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Target Slot
@ref{❨297❩, , @t{fallback-value}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {foreground} (object)
@anchor{❨485❩}@c
@genericsubindex{foreground}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {foreground} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨486❩}@c
@methodsubindex{foreground}@c
The face foreground.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨507❩, , @t{foreground}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {framedp} (object)
@anchor{❨129❩}@c
@genericsubindex{framedp}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {framedp} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨130❩}@c
@methodsubindex{framedp}@c
The face's framed status.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨506❩, , @t{framedp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {frames} (object)
@anchor{❨346❩}@c
@genericsubindex{frames}@c
@deffnx {Generic Writer} {(setf frames)} (object)
@anchor{❨348❩}@c
@genericsubindex{(setf frames)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {frames} ((sheet @ref{❨254❩, , @t{sheet}}))
@anchor{❨347❩}@c
@methodsubindex{frames}@c
@deffnx {Writer Method} {(setf frames)} ((sheet @ref{❨254❩, , @t{sheet}}))
@anchor{❨349❩}@c
@methodsubindex{(setf frames)}@c
The stack of currently open frames.
@table @strong
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨260❩, , @t{frames}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {get-bottom-padding} (sface help-spec)
@anchor{❨584❩}@c
@genericsubindex{get-bottom-padding}@c
Get HELP-SPEC's bottom-padding under SFACE.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Methods
@deffn {Method} {get-bottom-padding} (sface help-spec)
@anchor{❨585❩}@c
@methodsubindex{get-bottom-padding}@c
Basic help specifications (chars@comma{} strings etc) don't provide a bottom padding.
@table @strong
@end table
@end deffn
@deffn {Method} {get-bottom-padding} (sface (help-spec @t{list}))
@anchor{❨586❩}@c
@methodsubindex{get-bottom-padding}@c
Return the bottom padding of HELP-SPEC's face.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {header} (object)
@anchor{❨419❩}@c
@genericsubindex{header}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {header} ((group @ref{❨405❩, , @t{group}}))
@anchor{❨420❩}@c
@methodsubindex{header}@c
The group's header.
@table @strong
@item Source
@ref{❨36❩, , @t{group.lisp}}.
@item Target Slot
@ref{❨406❩, , @t{header}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {help-spec} (item &key program unhide &allow-other-keys)
@anchor{❨335❩}@c
@genericsubindex{help-spec}@c
Return ITEM's help specification.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨21❩, , @t{item.lisp}}.
@item Methods
@deffn {Method} {help-spec} ((synopsis @ref{❨578❩, , @t{synopsis}}) &key program)
@anchor{❨336❩}@c
@methodsubindex{help-spec}@c
Return SYNOPSIS's help specification.
@table @strong
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@end table
@end deffn
@deffn {Method} {help-spec} ((group @ref{❨405❩, , @t{group}}) &key)
@anchor{❨337❩}@c
@methodsubindex{help-spec}@c
Return GROUP's help specification.
@table @strong
@item Source
@ref{❨36❩, , @t{group.lisp}}.
@end table
@end deffn
@deffn {Method} {help-spec} ((container @ref{❨149❩, , @t{container}}) &key)
@anchor{❨338❩}@c
@methodsubindex{help-spec}@c
Return CONTAINER's help specification.
@table @strong
@item Source
@ref{❨35❩, , @t{container.lisp}}.
@end table
@end deffn
@deffn {Method} {help-spec} ((option @ref{❨294❩, , @t{valued-option}}) &key)
@anchor{❨339❩}@c
@methodsubindex{help-spec}@c
Return OPTION's help specification.
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@end table
@end deffn
@deffn {Method} {help-spec} ((option @ref{❨410❩, , @t{option}}) &key)
@anchor{❨340❩}@c
@methodsubindex{help-spec}@c
Return OPTION's help specification.
@table @strong
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@end table
@end deffn
@deffn {Method} {help-spec} ((text @ref{❨265❩, , @t{text}}) &key)
@anchor{❨341❩}@c
@methodsubindex{help-spec}@c
Return TEXT's help specification.
@table @strong
@item Source
@ref{❨22❩, , @t{text.lisp}}.
@end table
@end deffn
@deffn {Method} {help-spec} :around ((item @ref{❨69❩, , @t{item}}) &key unhide)
@anchor{❨342❩}@c
@methodsubindex{help-spec}@c
Call the actual method only when ITEM is not hidden or UNHIDE.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {help-spec-will-print} (sface help-spec)
@anchor{❨72❩}@c
@genericsubindex{help-spec-will-print}@c
Return t if HELP-SPEC will print under FACE.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Methods
@deffn {Method} {help-spec-will-print} :before (sface help-spec)
@anchor{❨73❩}@c
@methodsubindex{help-spec-will-print}@c
@table @strong
@end table
@end deffn
@deffn {Method} {help-spec-will-print} (sface help-spec)
@anchor{❨74❩}@c
@methodsubindex{help-spec-will-print}@c
Basic help specifications (chars@comma{} strings etc) do print.
@table @strong
@end table
@end deffn
@deffn {Method} {help-spec-will-print} (sface (help-spec @t{list}))
@anchor{❨75❩}@c
@methodsubindex{help-spec-will-print}@c
Return t if HELP-SPEC's items will print under HELP-SPEC's face.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {hiddenp} (object)
@anchor{❨215❩}@c
@genericsubindex{hiddenp}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {hiddenp} ((item @ref{❨69❩, , @t{item}}))
@anchor{❨216❩}@c
@methodsubindex{hiddenp}@c
Whether the item is hidden in help strings.
@table @strong
@item Source
@ref{❨21❩, , @t{item.lisp}}.
@item Target Slot
@ref{❨71❩, , @t{hiddenp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {highlight} (object)
@anchor{❨183❩}@c
@genericsubindex{highlight}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {highlight} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨184❩}@c
@methodsubindex{highlight}@c
Clon's output highlight mode.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨177❩, , @t{highlight}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {highlightp} (object)
@anchor{❨86❩}@c
@genericsubindex{highlightp}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {highlightp} ((sheet @ref{❨254❩, , @t{sheet}}))
@anchor{❨87❩}@c
@methodsubindex{highlightp}@c
Whether to highlight SHEET's output.
@table @strong
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨257❩, , @t{highlightp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {intensity} (object)
@anchor{❨561❩}@c
@genericsubindex{intensity}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {intensity} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨562❩}@c
@methodsubindex{intensity}@c
The face intensity.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨499❩, , @t{intensity}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {inversep} (object)
@anchor{❨252❩}@c
@genericsubindex{inversep}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {inversep} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨253❩}@c
@methodsubindex{inversep}@c
The face's inverse video status.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨503❩, , @t{inversep}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {italicp} (object)
@anchor{❨196❩}@c
@genericsubindex{italicp}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {italicp} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨197❩}@c
@methodsubindex{italicp}@c
The face's italic status.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨500❩, , @t{italicp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {item} (condition)
@anchor{❨67❩}@c
@genericsubindex{item}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {item} ((condition @ref{❨50❩, , @t{cmdline-error}}))
@anchor{❨68❩}@c
@methodsubindex{item}@c
@table @strong
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Target Slot
@ref{❨51❩, , @t{item}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {item-separator} (object)
@anchor{❨553❩}@c
@genericsubindex{item-separator}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {item-separator} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨554❩}@c
@methodsubindex{item-separator}@c
The face item separator.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨498❩, , @t{item-separator}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {items} (object)
@anchor{❨563❩}@c
@genericsubindex{items}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {items} ((container @ref{❨149❩, , @t{container}}))
@anchor{❨564❩}@c
@methodsubindex{items}@c
The items in the container.
@table @strong
@item Source
@ref{❨35❩, , @t{container.lisp}}.
@item Target Slot
@ref{❨150❩, , @t{items}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {junk} (condition)
@anchor{❨591❩}@c
@genericsubindex{junk}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {junk} ((condition @ref{❨482❩, , @t{cmdline-junk-error}}))
@anchor{❨592❩}@c
@methodsubindex{junk}@c
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨483❩, , @t{item}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {left-padding} (object)
@anchor{❨117❩}@c
@genericsubindex{left-padding}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {left-padding} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨118❩}@c
@methodsubindex{left-padding}@c
The face left padding.@*
This property can take the following forms:@*
- <NUMBER>: the padding is relative to the enclosing face@comma{}@*
- SELF: the padding is set to wherever the face happens to be opened@comma{}
- (<NUMBER> ABSOLUTE): the padding is set in absolute value@comma{}@*
- (<NUMBER> :RELATIVE-TO <FACE-NAME>): the padding is set relatively to a
  parent face named FACE-NAME.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨494❩, , @t{left-padding}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {line-width} (object)
@anchor{❨287❩}@c
@genericsubindex{line-width}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {line-width} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨288❩}@c
@methodsubindex{line-width}@c
The line width for help display.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨176❩, , @t{line-width}}.
@end table
@end deffn
@deffn {Reader Method} {line-width} ((sheet @ref{❨254❩, , @t{sheet}}))
@anchor{❨289❩}@c
@methodsubindex{line-width}@c
The sheet's line width.
@table @strong
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨256❩, , @t{line-width}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {long-name} (object)
@anchor{❨152❩}@c
@genericsubindex{long-name}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {long-name} ((option @ref{❨410❩, , @t{option}}))
@anchor{❨153❩}@c
@methodsubindex{long-name}@c
The option's long name.
@table @strong
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@item Target Slot
@ref{❨412❩, , @t{long-name}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {make-face-tree} (definition &optional face-class)
@anchor{❨101❩}@c
@genericsubindex{make-face-tree}@c
Make a FACE-CLASS face tree from DEFINITION.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Methods
@deffn {Method} {make-face-tree} ((definition @t{list}) &optional face-class)
@anchor{❨102❩}@c
@methodsubindex{make-face-tree}@c
Make a FACE-CLASS face tree from a list of face name and initargs.
@table @strong
@end table
@end deffn
@deffn {Method} {make-face-tree} ((name @t{symbol}) &optional face-class)
@anchor{❨103❩}@c
@methodsubindex{make-face-tree}@c
Create a face named NAME.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {mapoptions} (func there)
@anchor{❨270❩}@c
@genericsubindex{mapoptions}@c
Map FUNC over all options in THERE.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@item Methods
@deffn {Method} {mapoptions} (func (context @ref{❨169❩, , @t{context}}))
@anchor{❨271❩}@c
@methodsubindex{mapoptions}@c
Map FUNC over all options in CONTEXT synopsis.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Method} {mapoptions} (func elsewhere)
@anchor{❨272❩}@c
@methodsubindex{mapoptions}@c
Do nothing by default.
@table @strong
@end table
@end deffn
@deffn {Method} {mapoptions} :after (func (item @ref{❨69❩, , @t{item}}))
@anchor{❨273❩}@c
@methodsubindex{mapoptions}@c
Mark TRAVERSABLE as traversed.
@table @strong
@end table
@end deffn
@deffn {Method} {mapoptions} (func (container @ref{❨149❩, , @t{container}}))
@anchor{❨274❩}@c
@methodsubindex{mapoptions}@c
Map FUNC over all containers or options in CONTAINER.
@table @strong
@end table
@end deffn
@deffn {Method} {mapoptions} (func (option @ref{❨410❩, , @t{option}}))
@anchor{❨275❩}@c
@methodsubindex{mapoptions}@c
Call FUNC on OPTION.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {name} (condition)
@anchor{❨390❩}@c
@genericsubindex{name}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {name} ((condition @ref{❨230❩, , @t{unknown-cmdline-option-error}}))
@anchor{❨391❩}@c
@methodsubindex{name}@c
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨231❩, , @t{item}}.
@end table
@end deffn
@deffn {Reader Method} {name} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨392❩}@c
@methodsubindex{name}@c
The face name.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨492❩, , @t{name}}.
@end table
@end deffn
@deffn {Reader Method} {name} ((condition @ref{❨261❩, , @t{cmdline-option-error}}))
@anchor{❨393❩}@c
@methodsubindex{name}@c
@table @strong
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Target Slot
@ref{❨262❩, , @t{item}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {negated-call} (condition)
@anchor{❨517❩}@c
@genericsubindex{negated-call}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {negated-call} ((condition @ref{❨437❩, , @t{unrecognized-negated-call-error}}))
@anchor{❨518❩}@c
@methodsubindex{negated-call}@c
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨438❩, , @t{item}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {negated-pack} (object)
@anchor{❨376❩}@c
@genericsubindex{negated-pack}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Method} {negated-pack} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨377❩}@c
@methodsubindex{negated-pack}@c
Return the negated pack of CONTEXT's synopsis.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Reader Method} {negated-pack} ((synopsis @ref{❨578❩, , @t{synopsis}}))
@anchor{❨378❩}@c
@methodsubindex{negated-pack}@c
The negated pack string.
@table @strong
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@item Target Slot
@ref{❨581❩, , @t{negated-pack}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {negated-pack-char} (option &optional as-string)
@anchor{❨355❩}@c
@genericsubindex{negated-pack-char}@c
Return OPTION's negated pack character@comma{} if any.
If AS-STRING@comma{} return a string of that character.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@item Methods
@deffn {Method} {negated-pack-char} ((negatable @ref{❨114❩, , @t{negatable}}) &optional as-string)
@anchor{❨356❩}@c
@methodsubindex{negated-pack-char}@c
Return NEGATABLE's negated pack character@comma{} if any.
@table @strong
@item Source
@ref{❨26❩, , @t{negatable.lisp}}.
@end table
@end deffn
@deffn {Method} {negated-pack-char} ((option @ref{❨410❩, , @t{option}}) &optional as-string)
@anchor{❨357❩}@c
@methodsubindex{negated-pack-char}@c
Return nil (only the switch hierarchy is negated-pack'able).
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {no-values} (object)
@anchor{❨82❩}@c
@genericsubindex{no-values}@c
@deffnx {Generic Writer} {(setf no-values)} (object)
@anchor{❨84❩}@c
@genericsubindex{(setf no-values)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {no-values} ((switch-base @ref{❨512❩, , @t{switch-base}}))
@anchor{❨83❩}@c
@methodsubindex{no-values}@c
@deffnx {Writer Method} {(setf no-values)} ((switch-base @ref{❨512❩, , @t{switch-base}}))
@anchor{❨85❩}@c
@methodsubindex{(setf no-values)}@c
The possible 'no' values.
@table @strong
@item Source
@ref{❨27❩, , @t{switch-base.lisp}}.
@item Target Slot
@ref{❨515❩, , @t{no-values}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {open-frame} (sheet frame)
@anchor{❨312❩}@c
@genericsubindex{open-frame}@c
Open FRAME on SHEET.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Method Combination
@t{progn}.
@table @strong
@item Options
@t{:most-specific-last}
@end table
@item Methods
@deffn {Method} {open-frame} progn (sheet (frame @ref{❨283❩, , @t{frame}}))
@anchor{❨313❩}@c
@methodsubindex{open-frame}@c
Reach the frame's left margin.
@table @strong
@end table
@end deffn
@deffn {Method} {open-frame} progn (sheet (frame @ref{❨444❩, , @t{highlight-frame}}))
@anchor{❨314❩}@c
@methodsubindex{open-frame}@c
Reach the frame's left margin and output its highlight properties.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {option} (condition)
@anchor{❨408❩}@c
@genericsubindex{option}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {option} ((condition @ref{❨379❩, , @t{option-error}}))
@anchor{❨409❩}@c
@methodsubindex{option}@c
@table @strong
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@item Target Slot
@ref{❨380❩, , @t{option}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {option-sticky-distance} (option namearg)
@anchor{❨429❩}@c
@genericsubindex{option-sticky-distance}@c
Try to match OPTION's short name with a sticky argument against NAMEARG.
If OPTION matches@comma{} return the length of OPTION's short name; otherwise 0.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@item Methods
@deffn {Method} {option-sticky-distance} ((option @ref{❨294❩, , @t{valued-option}}) namearg)
@anchor{❨430❩}@c
@methodsubindex{option-sticky-distance}@c
Try to match OPTION's short name with a sticky argument against NAMEARG.
If OPTION matches@comma{} return its short name's length; otherwise 0.
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@end table
@end deffn
@deffn {Method} {option-sticky-distance} ((option @ref{❨410❩, , @t{option}}) namearg)
@anchor{❨431❩}@c
@methodsubindex{option-sticky-distance}@c
Return 0 (non-valued options don't take any argument@comma{} sticky or not).
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {output-stream} (object)
@anchor{❨76❩}@c
@genericsubindex{output-stream}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {output-stream} ((sheet @ref{❨254❩, , @t{sheet}}))
@anchor{❨77❩}@c
@methodsubindex{output-stream}@c
The sheet's output stream.
@table @strong
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨255❩, , @t{output-stream}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {parent} (object)
@anchor{❨322❩}@c
@genericsubindex{parent}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {parent} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨323❩}@c
@methodsubindex{parent}@c
The face parent.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨510❩, , @t{parent}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {path-type} (object)
@anchor{❨537❩}@c
@genericsubindex{path-type}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {path-type} ((path @ref{❨434❩, , @t{path}}))
@anchor{❨538❩}@c
@methodsubindex{path-type}@c
The path type.
@table @strong
@item Source
@ref{❨31❩, , @t{path.lisp}}.
@item Target Slot
@ref{❨436❩, , @t{path-type}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {postfix} (object)
@anchor{❨217❩}@c
@genericsubindex{postfix}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Method} {postfix} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨218❩}@c
@methodsubindex{postfix}@c
Return the postfix of CONTEXT's synopsis.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Reader Method} {postfix} ((synopsis @ref{❨578❩, , @t{synopsis}}))
@anchor{❨219❩}@c
@methodsubindex{postfix}@c
A postfix to the program synopsis.
@table @strong
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@item Target Slot
@ref{❨579❩, , @t{postfix}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {potential-pack} (object)
@anchor{❨555❩}@c
@genericsubindex{potential-pack}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {potential-pack} ((synopsis @ref{❨578❩, , @t{synopsis}}))
@anchor{❨556❩}@c
@methodsubindex{potential-pack}@c
The potential pack string.
@table @strong
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@item Target Slot
@ref{❨582❩, , @t{potential-pack}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {potential-pack-p} (pack there)
@anchor{❨163❩}@c
@genericsubindex{potential-pack-p}@c
Return t if PACK is a potential pack in THERE.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@item Methods
@deffn {Method} {potential-pack-p} (pack (context @ref{❨169❩, , @t{context}}))
@anchor{❨164❩}@c
@methodsubindex{potential-pack-p}@c
Return t if PACK (a string) is a potential pack in CONTEXT.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Method} {potential-pack-p} (pack (synopsis @ref{❨578❩, , @t{synopsis}}))
@anchor{❨165❩}@c
@methodsubindex{potential-pack-p}@c
Return t if PACK is a potential pack for SYNOPSIS.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {print-help-spec} (sheet help-spec)
@anchor{❨519❩}@c
@genericsubindex{print-help-spec}@c
Print HELP-SPEC on SHEET.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Methods
@deffn {Method} {print-help-spec} :before (sheet help-spec)
@anchor{❨520❩}@c
@methodsubindex{print-help-spec}@c
@table @strong
@end table
@end deffn
@deffn {Method} {print-help-spec} (sheet (char @t{character}))
@anchor{❨521❩}@c
@methodsubindex{print-help-spec}@c
Print CHAR on SHEET with the current face.
@table @strong
@end table
@end deffn
@deffn {Method} {print-help-spec} (sheet (char-vector @t{simple-vector}))
@anchor{❨522❩}@c
@methodsubindex{print-help-spec}@c
Print CHAR-VECTOR on SHEET with the current face.
@table @strong
@end table
@end deffn
@deffn {Method} {print-help-spec} (sheet (string @t{string}))
@anchor{❨523❩}@c
@methodsubindex{print-help-spec}@c
Print STRING on SHEET with the current face.
@table @strong
@end table
@end deffn
@deffn {Method} {print-help-spec} (sheet (help-spec @t{list}))
@anchor{❨524❩}@c
@methodsubindex{print-help-spec}@c
Open HELP-SPEC's face and print all of its items with it.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {retrieve-from-environment} (option env-val)
@anchor{❨330❩}@c
@genericsubindex{retrieve-from-environment}@c
Retrieve OPTION's value from the environment.@*
ENV-VAL is the value stored in the associated environment variable.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨38❩, , @t{environ.lisp}}.
@item Methods
@deffn {Method} {retrieve-from-environment} :before (option env-val)
@anchor{❨331❩}@c
@methodsubindex{retrieve-from-environment}@c
Assert that ENV-VAL is not null.
@table @strong
@end table
@end deffn
@deffn {Method} {retrieve-from-environment} ((flag @ref{❨415❩, , @t{flag}}) env-val)
@anchor{❨332❩}@c
@methodsubindex{retrieve-from-environment}@c
@table @strong
@end table
@end deffn
@deffn {Method} {retrieve-from-environment} ((option @ref{❨294❩, , @t{valued-option}}) env-val)
@anchor{❨333❩}@c
@methodsubindex{retrieve-from-environment}@c
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {retrieve-from-long-call} (option cmdline-name &optional cmdline-argument cmdline)
@anchor{❨315❩}@c
@genericsubindex{retrieve-from-long-call}@c
Retrieve OPTION's value from a long call.@*
CMDLINE-NAME is the name used on the command-line.@*
CMDLINE-ARGUMENT is a potentially already parsed cmdline argument.
Otherwise@comma{} CMDLINE is where to find an argument.@*
This function returns three values:@*
- the retrieved value@comma{}@*
- the value source@comma{}@*
- the new command-line (possibly with the first item popped if the option
  requires an argument).
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Methods
@deffn {Method} {retrieve-from-long-call} ((option @ref{❨410❩, , @t{option}}) cmdline-name &optional cmdline-argument cmdline)
@anchor{❨316❩}@c
@methodsubindex{retrieve-from-long-call}@c
@table @strong
@end table
@end deffn
@deffn {Method} {retrieve-from-long-call} ((option @ref{❨294❩, , @t{valued-option}}) cmdline-name &optional cmdline-argument cmdline)
@anchor{❨317❩}@c
@methodsubindex{retrieve-from-long-call}@c
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {retrieve-from-negated-call} (option)
@anchor{❨133❩}@c
@genericsubindex{retrieve-from-negated-call}@c
Retrieve OPTION's value from a negated call.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Methods
@deffn {Method} {retrieve-from-negated-call} ((option @ref{❨410❩, , @t{option}}))
@anchor{❨134❩}@c
@methodsubindex{retrieve-from-negated-call}@c
@table @strong
@end table
@end deffn
@deffn {Method} {retrieve-from-negated-call} ((option @ref{❨294❩, , @t{valued-option}}))
@anchor{❨135❩}@c
@methodsubindex{retrieve-from-negated-call}@c
@table @strong
@end table
@end deffn
@deffn {Method} {retrieve-from-negated-call} ((negatable @ref{❨114❩, , @t{negatable}}))
@anchor{❨136❩}@c
@methodsubindex{retrieve-from-negated-call}@c
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {retrieve-from-short-call} (option &optional cmdline-argument cmdline)
@anchor{❨96❩}@c
@genericsubindex{retrieve-from-short-call}@c
Retrieve OPTION's value from a short call.@*
CMDLINE-ARGUMENT is a potentially already parsed cmdline argument.
Otherwise@comma{} CMDLINE is where to find an argument.@*
This function returns three values:@*
- the retrieved value@comma{}@*
- the value source@comma{}@*
- the new command-line (possibly with the first item popped if the option
  requires an argument).
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Methods
@deffn {Method} {retrieve-from-short-call} ((option @ref{❨410❩, , @t{option}}) &optional cmdline-argument cmdline)
@anchor{❨97❩}@c
@methodsubindex{retrieve-from-short-call}@c
@table @strong
@end table
@end deffn
@deffn {Method} {retrieve-from-short-call} ((option @ref{❨294❩, , @t{valued-option}}) &optional cmdline-argument cmdline)
@anchor{❨98❩}@c
@methodsubindex{retrieve-from-short-call}@c
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {right-padding} (object)
@anchor{❨352❩}@c
@genericsubindex{right-padding}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {right-padding} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨353❩}@c
@methodsubindex{right-padding}@c
The face right padding.@*
This property can take the following forms:@*
- <NUMBER>: the padding is relative to the enclosing face@comma{}@*
- SELF: the padding is set to wherever the face happens to be closed@comma{}
- (<NUMBER> ABSOLUTE): the padding is set in absolute value@comma{}@*
- (<NUMBER> :RELATIVE-TO <FACE-NAME>): the padding is set relatively to a
  parent face named FACE-NAME.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨495❩, , @t{right-padding}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {search-path} (object)
@anchor{❨290❩}@c
@genericsubindex{search-path}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {search-path} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨291❩}@c
@methodsubindex{search-path}@c
The search path for Clon files.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨174❩, , @t{search-path}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {sface-tree} (object)
@anchor{❨299❩}@c
@genericsubindex{sface-tree}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {sface-tree} ((sheet @ref{❨254❩, , @t{sheet}}))
@anchor{❨300❩}@c
@methodsubindex{sface-tree}@c
The sheet's sface tree.
@table @strong
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨258❩, , @t{sface-tree}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {short-call} (condition)
@anchor{❨568❩}@c
@genericsubindex{short-call}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {short-call} ((condition @ref{❨454❩, , @t{unrecognized-short-call-error}}))
@anchor{❨569❩}@c
@methodsubindex{short-call}@c
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨455❩, , @t{item}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {short-name} (object)
@anchor{❨325❩}@c
@genericsubindex{short-name}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {short-name} ((option @ref{❨410❩, , @t{option}}))
@anchor{❨326❩}@c
@methodsubindex{short-name}@c
The option's short name.
@table @strong
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@item Target Slot
@ref{❨411❩, , @t{short-name}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {short-pack} (object)
@anchor{❨140❩}@c
@genericsubindex{short-pack}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Method} {short-pack} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨141❩}@c
@methodsubindex{short-pack}@c
Return the short pack of CONTEXT's synopsis.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Reader Method} {short-pack} ((synopsis @ref{❨578❩, , @t{synopsis}}))
@anchor{❨142❩}@c
@methodsubindex{short-pack}@c
The short pack string.
@table @strong
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@item Target Slot
@ref{❨580❩, , @t{short-pack}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {short-pack-char} (option &optional as-string)
@anchor{❨53❩}@c
@genericsubindex{short-pack-char}@c
Return OPTION's short pack character@comma{} if any.
If AS-STRING@comma{} return a string of that character.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@item Methods
@deffn {Method} {short-pack-char} ((option @ref{❨294❩, , @t{valued-option}}) &optional as-string)
@anchor{❨54❩}@c
@methodsubindex{short-pack-char}@c
Return OPTION's short pack character if OPTION's argument is optional.
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@end table
@end deffn
@deffn {Method} {short-pack-char} ((option @ref{❨410❩, , @t{option}}) &optional as-string)
@anchor{❨55❩}@c
@methodsubindex{short-pack-char}@c
Return OPTION's potential pack character.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {short-syntax-help-spec-prefix} (option)
@anchor{❨525❩}@c
@genericsubindex{short-syntax-help-spec-prefix}@c
Return the help specification prefix for OPTION's short call.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Methods
@deffn {Method} {short-syntax-help-spec-prefix} ((option @ref{❨114❩, , @t{negatable}}))
@anchor{❨526❩}@c
@methodsubindex{short-syntax-help-spec-prefix}@c
@table @strong
@item Source
@ref{❨26❩, , @t{negatable.lisp}}.
@end table
@end deffn
@deffn {Method} {short-syntax-help-spec-prefix} ((option @ref{❨294❩, , @t{valued-option}}))
@anchor{❨527❩}@c
@methodsubindex{short-syntax-help-spec-prefix}@c
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {sibling} (object)
@anchor{❨459❩}@c
@genericsubindex{sibling}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {sibling} ((sface @ref{❨551❩, , @t{sface}}))
@anchor{❨460❩}@c
@methodsubindex{sibling}@c
The SFace's raw sibling.
@table @strong
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Target Slot
@ref{❨552❩, , @t{sibling}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {stream-ioctl-output-handle} (stream)
@anchor{❨439❩}@c
@genericsubindex{stream-ioctl-output-handle}@c
Return STREAM's ioctl output handle or NIL.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨44❩, , @t{termio.lisp}}.
@item Methods
@deffn {Method} {stream-ioctl-output-handle} ((stream @t{synonym-stream}))
@anchor{❨440❩}@c
@methodsubindex{stream-ioctl-output-handle}@c
@table @strong
@end table
@end deffn
@deffn {Method} {stream-ioctl-output-handle} ((stream @t{two-way-stream}))
@anchor{❨441❩}@c
@methodsubindex{stream-ioctl-output-handle}@c
@table @strong
@end table
@end deffn
@deffn {Method} {stream-ioctl-output-handle} ((stream @t{fd-stream}))
@anchor{❨442❩}@c
@methodsubindex{stream-ioctl-output-handle}@c
@table @strong
@end table
@end deffn
@deffn {Method} {stream-ioctl-output-handle} (stream)
@anchor{❨443❩}@c
@methodsubindex{stream-ioctl-output-handle}@c
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {stringify} (valued-option value)
@anchor{❨447❩}@c
@genericsubindex{stringify}@c
Transform VALUED-OPTION's VALUE into an argument.
This is the opposite of argument conversion.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Methods
@deffn {Method} {stringify} ((xswitch @ref{❨154❩, , @t{xswitch}}) value)
@anchor{❨448❩}@c
@methodsubindex{stringify}@c
Transform XSWITCH's VALUE into an argument.
@table @strong
@item Source
@ref{❨34❩, , @t{xswitch.lisp}}.
@end table
@end deffn
@deffn {Method} {stringify} ((enum @ref{❨320❩, , @t{enum}}) value)
@anchor{❨449❩}@c
@methodsubindex{stringify}@c
Transform ENUM's VALUE into an argument.
@table @strong
@item Source
@ref{❨33❩, , @t{enum.lisp}}.
@end table
@end deffn
@deffn {Method} {stringify} ((path @ref{❨434❩, , @t{path}}) value)
@anchor{❨450❩}@c
@methodsubindex{stringify}@c
Transform PATH's VALUE into an argument.
@table @strong
@item Source
@ref{❨31❩, , @t{path.lisp}}.
@end table
@end deffn
@deffn {Method} {stringify} ((lispobj @ref{❨381❩, , @t{lispobj}}) value)
@anchor{❨451❩}@c
@methodsubindex{stringify}@c
Transform LISPOBJ's VALUE into an argument.
@table @strong
@item Source
@ref{❨30❩, , @t{lispobj.lisp}}.
@end table
@end deffn
@deffn {Method} {stringify} ((stropt @ref{❨267❩, , @t{stropt}}) value)
@anchor{❨452❩}@c
@methodsubindex{stringify}@c
Transform STROPT's VALUE into an argument.
@table @strong
@item Source
@ref{❨29❩, , @t{stropt.lisp}}.
@end table
@end deffn
@deffn {Method} {stringify} ((switch @ref{❨282❩, , @t{switch}}) value)
@anchor{❨453❩}@c
@methodsubindex{stringify}@c
Transform SWITCH's VALUE into an argument.
@table @strong
@item Source
@ref{❨28❩, , @t{switch.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {subface} (face name(s))
@anchor{❨247❩}@c
@genericsubindex{subface}@c
Return subface of FACE named NAME(S) or nil.@*
If a list of names is provided instead of a single one@comma{} follow a subface
branch matching those names to find the leaf face.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Methods
@deffn {Method} {subface} (face (name @t{symbol}))
@anchor{❨248❩}@c
@methodsubindex{subface}@c
Return FACE'subface named NAME@comma{} or nil.
@table @strong
@end table
@end deffn
@deffn {Method} {subface} (face (names @t{list}))
@anchor{❨249❩}@c
@methodsubindex{subface}@c
Return the leaf face from FACE'subbranch matching NAMES@comma{} or nil.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {subfaces} (object)
@anchor{❨423❩}@c
@genericsubindex{subfaces}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {subfaces} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨424❩}@c
@methodsubindex{subfaces}@c
The face children.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨509❩, , @t{subfaces}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {synopsis} (object)
@anchor{❨576❩}@c
@genericsubindex{synopsis}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {synopsis} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨577❩}@c
@methodsubindex{synopsis}@c
The program synopsis.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨170❩, , @t{synopsis}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {theme} (object)
@anchor{❨200❩}@c
@genericsubindex{theme}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {theme} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨201❩}@c
@methodsubindex{theme}@c
The theme filename.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Target Slot
@ref{❨175❩, , @t{theme}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {top-padding} (object)
@anchor{❨189❩}@c
@genericsubindex{top-padding}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Method} {top-padding} ((help-spec @t{list}))
@anchor{❨190❩}@c
@methodsubindex{top-padding}@c
@table @strong
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Method} {top-padding} (other)
@anchor{❨191❩}@c
@methodsubindex{top-padding}@c
@table @strong
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@end table
@end deffn
@deffn {Reader Method} {top-padding} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨192❩}@c
@methodsubindex{top-padding}@c
The face top padding.@*
This property can take the following forms:@*
- nil: the output can start right away@comma{}@*
- 0: the output should start on the next line@comma{}@*
- N>0: there should be N empty lines before the output.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨496❩, , @t{top-padding}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {traversedp} (object)
@anchor{❨308❩}@c
@genericsubindex{traversedp}@c
@deffnx {Generic Writer} {(setf traversedp)} (object)
@anchor{❨310❩}@c
@genericsubindex{(setf traversedp)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {traversedp} ((item @ref{❨69❩, , @t{item}}))
@anchor{❨309❩}@c
@methodsubindex{traversedp}@c
@deffnx {Writer Method} {(setf traversedp)} ((item @ref{❨69❩, , @t{item}}))
@anchor{❨311❩}@c
@methodsubindex{(setf traversedp)}@c
The item's traversal state.
@table @strong
@item Source
@ref{❨21❩, , @t{item.lisp}}.
@item Target Slot
@ref{❨70❩, , @t{traversedp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {typespec} (object)
@anchor{❨48❩}@c
@genericsubindex{typespec}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {typespec} ((lispobj @ref{❨381❩, , @t{lispobj}}))
@anchor{❨49❩}@c
@methodsubindex{typespec}@c
A type specifier the option's value should satisfy.
@table @strong
@item Source
@ref{❨30❩, , @t{lispobj.lisp}}.
@item Target Slot
@ref{❨383❩, , @t{typespec}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {underline} (object)
@anchor{❨489❩}@c
@genericsubindex{underline}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {underline} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨490❩}@c
@methodsubindex{underline}@c
The face's underline level.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨501❩, , @t{underline}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {untraverse} (item)
@anchor{❨399❩}@c
@genericsubindex{untraverse}@c
Reset ITEM's traversal state@comma{} and return ITEM.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨21❩, , @t{item.lisp}}.
@item Methods
@deffn {Method} {untraverse} ((context @ref{❨169❩, , @t{context}}))
@anchor{❨400❩}@c
@methodsubindex{untraverse}@c
Untraverse CONTEXT synopsis.
@table @strong
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@end table
@end deffn
@deffn {Method} {untraverse} ((container @ref{❨149❩, , @t{container}}))
@anchor{❨401❩}@c
@methodsubindex{untraverse}@c
Untraverse all CONTAINER items.
@table @strong
@item Source
@ref{❨35❩, , @t{container.lisp}}.
@end table
@end deffn
@deffn {Method} {untraverse} ((option @ref{❨410❩, , @t{option}}))
@anchor{❨402❩}@c
@methodsubindex{untraverse}@c
OPTION is a terminal object: just return it.
@table @strong
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@end table
@end deffn
@deffn {Method} {untraverse} ((text @ref{❨265❩, , @t{text}}))
@anchor{❨403❩}@c
@methodsubindex{untraverse}@c
TEXT is a terminal object: just return it.
@table @strong
@item Source
@ref{❨22❩, , @t{text.lisp}}.
@end table
@end deffn
@deffn {Method} {untraverse} :after ((item @ref{❨69❩, , @t{item}}))
@anchor{❨404❩}@c
@methodsubindex{untraverse}@c
Mark ITEM as untraversed.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {value} (condition)
@anchor{❨187❩}@c
@genericsubindex{value}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {value} ((condition @ref{❨387❩, , @t{invalid-value}}))
@anchor{❨188❩}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Target Slot
@ref{❨388❩, , @t{value}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {visiblep} (object)
@anchor{❨477❩}@c
@genericsubindex{visiblep}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {visiblep} ((face @ref{❨491❩, , @t{face}}))
@anchor{❨478❩}@c
@methodsubindex{visiblep}@c
Whether the face is visible.
@table @strong
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Target Slot
@ref{❨493❩, , @t{visiblep}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {yes-values} (object)
@anchor{❨557❩}@c
@genericsubindex{yes-values}@c
@deffnx {Generic Writer} {(setf yes-values)} (object)
@anchor{❨559❩}@c
@genericsubindex{(setf yes-values)}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Methods
@deffn {Reader Method} {yes-values} ((switch-base @ref{❨512❩, , @t{switch-base}}))
@anchor{❨558❩}@c
@methodsubindex{yes-values}@c
@deffnx {Writer Method} {(setf yes-values)} ((switch-base @ref{❨512❩, , @t{switch-base}}))
@anchor{❨560❩}@c
@methodsubindex{(setf yes-values)}@c
The possible 'yes' values.
@table @strong
@item Source
@ref{❨27❩, , @t{switch-base.lisp}}.
@item Target Slot
@ref{❨514❩, , @t{yes-values}}.
@end table
@end deffn
@end table
@end deffn

@node Private conditions, Private structures, Private generic functions, Internals
@subsection Conditions
@deftp {Condition} {cmdline-error}
@anchor{❨50❩}@c
@conditionsubindex{cmdline-error}@c
An error related to a command-line item.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Direct superclasses
@t{error}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨482❩, , @t{cmdline-junk-error}}.
@item
@ref{❨261❩, , @t{cmdline-option-error}}.
@item
@ref{❨234❩, , @t{invalid-negated-equal-syntax}}.
@item
@ref{❨106❩, , @t{invalid-short-equal-syntax}}.
@item
@ref{❨230❩, , @t{unknown-cmdline-option-error}}.
@item
@ref{❨437❩, , @t{unrecognized-negated-call-error}}.
@item
@ref{❨454❩, , @t{unrecognized-short-call-error}}.
@end itemize
@item Direct methods
@ref{❨68❩, , @t{item}}.
@item Direct slots
@defvr {Slot} {item}
@anchor{❨51❩}@c
@slotsubindex{item}@c
The concerned command-line item.
@table @strong
@item Initargs
@t{:item}
@item Readers
@ref{❨68❩, , @t{item}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {cmdline-junk-error}
@anchor{❨482❩}@c
@conditionsubindex{cmdline-junk-error}@c
An error related to a command-line piece of junk.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Direct superclasses
@ref{❨50❩, , @t{cmdline-error}}.
@item Direct methods
@ref{❨592❩, , @t{junk}}.
@item Direct slots
@defvr {Slot} {item}
@anchor{❨483❩}@c
@slotsubindex{item}@c
The piece of junk appearing on the command-line.
@table @strong
@item Initargs
@t{:junk}, @t{:item}
@item Readers
@ref{❨592❩, , @t{junk}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {cmdline-option-error}
@anchor{❨261❩}@c
@conditionsubindex{cmdline-option-error}@c
An error related to a command-line (known) option.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨50❩, , @t{cmdline-error}}.
@item
@ref{❨379❩, , @t{option-error}}.
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{❨151❩, , @t{invalid-cmdline-argument}}.
@item
@ref{❨157❩, , @t{invalid-negated-syntax}}.
@item
@ref{❨47❩, , @t{missing-cmdline-argument}}.
@item
@ref{❨62❩, , @t{spurious-cmdline-argument}}.
@end itemize
@item Direct methods
@ref{❨393❩, , @t{name}}.
@item Direct slots
@defvr {Slot} {item}
@anchor{❨262❩}@c
@slotsubindex{item}@c
The option's name as it appears on the command-line.
@table @strong
@item Initargs
@t{:name}, @t{:item}
@item Readers
@ref{❨393❩, , @t{name}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {environment-error}
@anchor{❨479❩}@c
@conditionsubindex{environment-error}@c
An error related to an environment variable.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨38❩, , @t{environ.lisp}}.
@item Direct superclasses
@t{error}.
@item Direct subclasses
@ref{❨471❩, , @t{environmental-option-error}}.
@item Direct methods
@ref{❨279❩, , @t{env-var}}.
@item Direct slots
@defvr {Slot} {env-var}
@anchor{❨480❩}@c
@slotsubindex{env-var}@c
The concerned environment variable.
@table @strong
@item Initargs
@t{:env-var}
@item Readers
@ref{❨279❩, , @t{env-var}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {environmental-option-error}
@anchor{❨471❩}@c
@conditionsubindex{environmental-option-error}@c
An error related to an option's environment variable.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨38❩, , @t{environ.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨479❩, , @t{environment-error}}.
@item
@ref{❨379❩, , @t{option-error}}.
@end itemize
@item Direct subclasses
@ref{❨467❩, , @t{invalid-environment-value}}.
@end table
@end deftp
@deftp {Condition} {home-directory}
@anchor{❨328❩}@c
@conditionsubindex{home-directory}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@item Direct superclasses
@t{warning}.
@item Direct methods
@itemize @bullet
@item
@ref{❨369❩, , @t{error-string}}.
@item
@ref{❨371❩, , @t{(setf error-string)}}.
@end itemize
@item Direct slots
@defvr {Slot} {error-string}
@anchor{❨329❩}@c
@slotsubindex{error-string}@c
@table @strong
@item Initargs
@t{:error-string}
@item Readers
@ref{❨369❩, , @t{error-string}}.
@item Writers
@ref{❨371❩, , @t{(setf error-string)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-argument}
@anchor{❨593❩}@c
@conditionsubindex{invalid-argument}@c
An invalid argument error.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Direct superclasses
@ref{❨379❩, , @t{option-error}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨151❩, , @t{invalid-cmdline-argument}}.
@item
@ref{❨467❩, , @t{invalid-environment-value}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨182❩, , @t{argument}}.
@item
@ref{❨80❩, , @t{comment}}.
@end itemize
@item Direct slots
@defvr {Slot} {argument}
@anchor{❨594❩}@c
@slotsubindex{argument}@c
The invalid argument.
@table @strong
@item Initargs
@t{:argument}
@item Readers
@ref{❨182❩, , @t{argument}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {comment}
@anchor{❨595❩}@c
@slotsubindex{comment}@c
An additional comment about the error.
@table @strong
@item Initargs
@t{:comment}
@item Readers
@ref{❨80❩, , @t{comment}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-cmdline-argument}
@anchor{❨151❩}@c
@conditionsubindex{invalid-cmdline-argument}@c
An invalid command-line argument error.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨261❩, , @t{cmdline-option-error}}.
@item
@ref{❨593❩, , @t{invalid-argument}}.
@end itemize
@end table
@end deftp
@deftp {Condition} {invalid-environment-value}
@anchor{❨467❩}@c
@conditionsubindex{invalid-environment-value}@c
An invalid environment variable's value error.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨38❩, , @t{environ.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨471❩, , @t{environmental-option-error}}.
@item
@ref{❨593❩, , @t{invalid-argument}}.
@end itemize
@item Direct methods
@ref{❨386❩, , @t{env-val}}.
@item Direct slots
@defvr {Slot} {argument}
@anchor{❨468❩}@c
@slotsubindex{argument}@c
The invalid environment variable value.
@table @strong
@item Initargs
@t{:env-val}, @t{:argument}
@item Readers
@ref{❨386❩, , @t{env-val}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-negated-equal-syntax}
@anchor{❨234❩}@c
@conditionsubindex{invalid-negated-equal-syntax}@c
An error related to a negated-equal syntax.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Direct superclasses
@ref{❨50❩, , @t{cmdline-error}}.
@end table
@end deftp
@deftp {Condition} {invalid-negated-syntax}
@anchor{❨157❩}@c
@conditionsubindex{invalid-negated-syntax}@c
An invalid negated syntax error.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Direct superclasses
@ref{❨261❩, , @t{cmdline-option-error}}.
@end table
@end deftp
@deftp {Condition} {invalid-short-equal-syntax}
@anchor{❨106❩}@c
@conditionsubindex{invalid-short-equal-syntax}@c
An error related to a short-equal syntax.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Direct superclasses
@ref{❨50❩, , @t{cmdline-error}}.
@end table
@end deftp
@deftp {Condition} {invalid-value}
@anchor{❨387❩}@c
@conditionsubindex{invalid-value}@c
An invalid value error.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Direct superclasses
@ref{❨379❩, , @t{option-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨81❩, , @t{comment}}.
@item
@ref{❨188❩, , @t{value}}.
@end itemize
@item Direct slots
@defvr {Slot} {value}
@anchor{❨388❩}@c
@slotsubindex{value}@c
The invalid value.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{❨188❩, , @t{value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {comment}
@anchor{❨389❩}@c
@slotsubindex{comment}@c
An additional comment about the error.
@table @strong
@item Initargs
@t{:comment}
@item Readers
@ref{❨81❩, , @t{comment}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {missing-cmdline-argument}
@anchor{❨47❩}@c
@conditionsubindex{missing-cmdline-argument}@c
A missing command-line argument error.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Direct superclasses
@ref{❨261❩, , @t{cmdline-option-error}}.
@end table
@end deftp
@deftp {Condition} {option-error}
@anchor{❨379❩}@c
@conditionsubindex{option-error}@c
An error related to an option.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@item Direct superclasses
@t{error}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨261❩, , @t{cmdline-option-error}}.
@item
@ref{❨471❩, , @t{environmental-option-error}}.
@item
@ref{❨593❩, , @t{invalid-argument}}.
@item
@ref{❨387❩, , @t{invalid-value}}.
@end itemize
@item Direct methods
@ref{❨409❩, , @t{option}}.
@item Direct slots
@defvr {Slot} {option}
@anchor{❨380❩}@c
@slotsubindex{option}@c
The concerned option.
@table @strong
@item Initargs
@t{:option}
@item Readers
@ref{❨409❩, , @t{option}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {spurious-cmdline-argument}
@anchor{❨62❩}@c
@conditionsubindex{spurious-cmdline-argument}@c
A spurious command-line argument error.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨37❩, , @t{cmdline.lisp}}.
@item Direct superclasses
@ref{❨261❩, , @t{cmdline-option-error}}.
@item Direct methods
@ref{❨181❩, , @t{argument}}.
@item Direct slots
@defvr {Slot} {argument}
@anchor{❨63❩}@c
@slotsubindex{argument}@c
The spurious argument.
@table @strong
@item Initargs
@t{:argument}
@item Readers
@ref{❨181❩, , @t{argument}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {unknown-cmdline-option-error}
@anchor{❨230❩}@c
@conditionsubindex{unknown-cmdline-option-error}@c
An error related to an unknown command-line option.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Direct superclasses
@ref{❨50❩, , @t{cmdline-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨180❩, , @t{argument}}.
@item
@ref{❨391❩, , @t{name}}.
@end itemize
@item Direct slots
@defvr {Slot} {item}
@anchor{❨231❩}@c
@slotsubindex{item}@c
The option's name as it appears on the command-line.
@table @strong
@item Initargs
@t{:name}, @t{:item}
@item Readers
@ref{❨391❩, , @t{name}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {argument}
@anchor{❨232❩}@c
@slotsubindex{argument}@c
The option's command-line argument.
@table @strong
@item Initargs
@t{:argument}
@item Readers
@ref{❨180❩, , @t{argument}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {unrecognized-negated-call-error}
@anchor{❨437❩}@c
@conditionsubindex{unrecognized-negated-call-error}@c
An error related to an unrecognized negated call.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Direct superclasses
@ref{❨50❩, , @t{cmdline-error}}.
@item Direct methods
@ref{❨518❩, , @t{negated-call}}.
@item Direct slots
@defvr {Slot} {item}
@anchor{❨438❩}@c
@slotsubindex{item}@c
The unrecognized negated call on the command-line.
@table @strong
@item Initargs
@t{:negated-call}, @t{:item}
@item Readers
@ref{❨518❩, , @t{negated-call}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {unrecognized-short-call-error}
@anchor{❨454❩}@c
@conditionsubindex{unrecognized-short-call-error}@c
An error related to an unrecognized short call.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Direct superclasses
@ref{❨50❩, , @t{cmdline-error}}.
@item Direct methods
@ref{❨569❩, , @t{short-call}}.
@item Direct slots
@defvr {Slot} {item}
@anchor{❨455❩}@c
@slotsubindex{item}@c
The unrecognized short call on the command-line.
@table @strong
@item Initargs
@t{:short-call}, @t{:item}
@item Readers
@ref{❨569❩, , @t{short-call}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp

@node Private structures, Private classes, Private conditions, Internals
@subsection Structures
@deftp {Structure} {cmdline-option}
@anchor{❨571❩}@c
@structuresubindex{cmdline-option}@c
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Direct superclasses
@t{structure-object}.
@item Direct slots
@defvr {Slot} {name}
@anchor{❨572❩}@c
@slotsubindex{name}@c
@table @strong
@item Readers
@ref{❨425❩, , @t{cmdline-option-name}}.
@item Writers
@ref{❨426❩, , @t{(setf cmdline-option-name)}}.
@end table
@end defvr
@defvr {Slot} {option}
@anchor{❨573❩}@c
@slotsubindex{option}@c
@table @strong
@item Readers
@ref{❨147❩, , @t{cmdline-option-option}}.
@item Writers
@ref{❨148❩, , @t{(setf cmdline-option-option)}}.
@end table
@end defvr
@defvr {Slot} {value}
@anchor{❨574❩}@c
@slotsubindex{value}@c
@table @strong
@item Readers
@ref{❨236❩, , @t{cmdline-option-value}}.
@item Writers
@ref{❨237❩, , @t{(setf cmdline-option-value)}}.
@end table
@end defvr
@defvr {Slot} {source}
@anchor{❨575❩}@c
@slotsubindex{source}@c
@table @strong
@item Readers
@ref{❨432❩, , @t{cmdline-option-source}}.
@item Writers
@ref{❨433❩, , @t{(setf cmdline-option-source)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Structure} {frame}
@anchor{❨283❩}@c
@structuresubindex{frame}@c
The FRAME structure.@*
This structure hold layout properties used for printing.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Direct superclasses
@t{structure-object}.
@item Direct subclasses
@ref{❨444❩, , @t{highlight-frame}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨545❩, , @t{close-frame}}.
@item
@ref{❨313❩, , @t{open-frame}}.
@end itemize
@item Direct slots
@defvr {Slot} {sface}
@anchor{❨284❩}@c
@slotsubindex{sface}@c
@table @strong
@item Readers
@ref{❨374❩, , @t{frame-sface}}.
@item Writers
@ref{❨375❩, , @t{(setf frame-sface)}}.
@end table
@end defvr
@defvr {Slot} {left-margin}
@anchor{❨285❩}@c
@slotsubindex{left-margin}@c
@table @strong
@item Readers
@ref{❨276❩, , @t{frame-left-margin}}.
@item Writers
@ref{❨277❩, , @t{(setf frame-left-margin)}}.
@end table
@end defvr
@defvr {Slot} {right-margin}
@anchor{❨286❩}@c
@slotsubindex{right-margin}@c
@table @strong
@item Readers
@ref{❨472❩, , @t{frame-right-margin}}.
@item Writers
@ref{❨473❩, , @t{(setf frame-right-margin)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Structure} {highlight-frame}
@anchor{❨444❩}@c
@structuresubindex{highlight-frame}@c
The HIGHLIGHT-FRAME structure.@*
This structure holds both layout and highlight properties used for printing.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Direct superclasses
@ref{❨283❩, , @t{frame}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨546❩, , @t{close-frame}}.
@item
@ref{❨314❩, , @t{open-frame}}.
@end itemize
@item Direct slots
@defvr {Slot} {highlight-property-instances}
@anchor{❨445❩}@c
@slotsubindex{highlight-property-instances}@c
@table @strong
@item Readers
@ref{❨144❩, , @t{highlight-frame-highlight-property-instances}}.
@item Writers
@ref{❨145❩, , @t{(setf highlight-frame-highlight-property-instances)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Structure} {highlight-property-instance}
@anchor{❨365❩}@c
@structuresubindex{highlight-property-instance}@c
The HIGHLIGHT-PROPERTY-INSTANCE structure.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Direct superclasses
@t{structure-object}.
@item Direct slots
@defvr {Slot} {name}
@anchor{❨366❩}@c
@slotsubindex{name}@c
@table @strong
@item Readers
@ref{❨222❩, , @t{highlight-property-instance-name}}.
@item Writers
@ref{❨223❩, , @t{(setf highlight-property-instance-name)}}.
@end table
@end defvr
@defvr {Slot} {value}
@anchor{❨367❩}@c
@slotsubindex{value}@c
@table @strong
@item Readers
@ref{❨115❩, , @t{highlight-property-instance-value}}.
@item Writers
@ref{❨116❩, , @t{(setf highlight-property-instance-value)}}.
@end table
@end defvr
@end table
@end deftp

@node Private classes, , Private structures, Internals
@subsection Classes
@deftp {Class} {abstract-class}
@anchor{❨547❩}@c
@classsubindex{abstract-class}@c
The ABSTRACT-CLASS class.@*
This is the meta-class for abstract classes.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨20❩, , @t{util.lisp}}.
@item Direct superclasses
@t{standard-class}.
@item Direct methods
@itemize @bullet
@item
@ref{❨731❩, , @t{make-instance}}.
@item
@ref{❨732❩, , @t{validate-superclass}}.
@item
@ref{❨733❩, , @t{validate-superclass}}.
@end itemize
@end table
@end deftp
@deftp {Class} {container}
@anchor{❨149❩}@c
@classsubindex{container}@c
The CONTAINER class.@*
This class is a mixin used in synopsis and groups to represent the program's
command-line hierarchy.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨35❩, , @t{container.lisp}}.
@item Direct superclasses
@ref{❨69❩, , @t{item}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨405❩, , @t{group}}.
@item
@ref{❨578❩, , @t{synopsis}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨125❩, , @t{check-name-clash}}.
@item
@ref{❨124❩, , @t{check-name-clash}}.
@item
@ref{❨123❩, , @t{check-name-clash}}.
@item
@ref{❨338❩, , @t{help-spec}}.
@item
@ref{❨660❩, , @t{initialize-instance}}.
@item
@ref{❨661❩, , @t{initialize-instance}}.
@item
@ref{❨564❩, , @t{items}}.
@item
@ref{❨274❩, , @t{mapoptions}}.
@item
@ref{❨401❩, , @t{untraverse}}.
@end itemize
@item Direct slots
@defvr {Slot} {items}
@anchor{❨150❩}@c
@slotsubindex{items}@c
The items in the container.
@table @strong
@item Type
@t{list}
@item Initargs
@t{:items}
@item Readers
@ref{❨564❩, , @t{items}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {context}
@anchor{❨169❩}@c
@classsubindex{context}@c
The CONTEXT class.@*
This class represents the associatiion of a synopsis and a set of command-line
options based on it.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨42❩, , @t{context.lisp}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨534❩, , @t{clon-options-group}}.
@item
@ref{❨227❩, , @t{cmdline-options}}.
@item
@ref{❨229❩, , @t{(setf cmdline-options)}}.
@item
@ref{❨58❩, , @t{error-handler}}.
@item
@ref{❨184❩, , @t{highlight}}.
@item
@ref{❨662❩, , @t{initialize-instance}}.
@item
@ref{❨288❩, , @t{line-width}}.
@item
@ref{❨271❩, , @t{mapoptions}}.
@item
@ref{❨377❩, , @t{negated-pack}}.
@item
@ref{❨218❩, , @t{postfix}}.
@item
@ref{❨164❩, , @t{potential-pack-p}}.
@item
@ref{❨291❩, , @t{search-path}}.
@item
@ref{❨141❩, , @t{short-pack}}.
@item
@ref{❨577❩, , @t{synopsis}}.
@item
@ref{❨201❩, , @t{theme}}.
@item
@ref{❨400❩, , @t{untraverse}}.
@end itemize
@item Direct Default Initargs
@multitable @columnfractions 0.3 0.5
@headitem Initarg @tab Value
@item @t{:cmdline}
@tab @t{(cmdline)}
@end multitable
@item Direct slots
@defvr {Slot} {synopsis}
@anchor{❨170❩}@c
@slotsubindex{synopsis}@c
The program synopsis.
@table @strong
@item Type
@t{net.didierverna.clon::synopsis}
@item Initform
@t{net.didierverna.clon:*synopsis*}
@item Initargs
@t{:synopsis}
@item Readers
@ref{❨577❩, , @t{synopsis}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {progname}
@anchor{❨171❩}@c
@slotsubindex{progname}@c
The program name as it appears on the command-line.
@table @strong
@item Type
@t{string}
@end table
@end defvr
@defvr {Slot} {cmdline-options}
@anchor{❨172❩}@c
@slotsubindex{cmdline-options}@c
The options from the command-line.
@table @strong
@item Type
@t{list}
@item Readers
@ref{❨227❩, , @t{cmdline-options}}.
@item Writers
@ref{❨229❩, , @t{(setf cmdline-options)}}.
@end table
@end defvr
@defvr {Slot} {remainder}
@anchor{❨173❩}@c
@slotsubindex{remainder}@c
The non-Clon part of the command-line.
@table @strong
@item Type
@t{list}
@end table
@end defvr
@defvr {Slot} {search-path}
@anchor{❨174❩}@c
@slotsubindex{search-path}@c
The search path for Clon files.
@table @strong
@item Readers
@ref{❨291❩, , @t{search-path}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {theme}
@anchor{❨175❩}@c
@slotsubindex{theme}@c
The theme filename.
@table @strong
@item Readers
@ref{❨201❩, , @t{theme}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {line-width}
@anchor{❨176❩}@c
@slotsubindex{line-width}@c
The line width for help display.
@table @strong
@item Readers
@ref{❨288❩, , @t{line-width}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {highlight}
@anchor{❨177❩}@c
@slotsubindex{highlight}@c
Clon's output highlight mode.
@table @strong
@item Readers
@ref{❨184❩, , @t{highlight}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {error-handler}
@anchor{❨178❩}@c
@slotsubindex{error-handler}@c
The behavior to adopt on option retrieval errors.
@table @strong
@item Type
@t{symbol}
@item Initform
@t{:quit}
@item Readers
@ref{❨58❩, , @t{error-handler}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {enum}
@anchor{❨320❩}@c
@classsubindex{enum}@c
The ENUM class.@*
This class implements options whose values belong to a set of keywords.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨33❩, , @t{enum.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨203❩, , @t{enum-base}}.
@item
@ref{❨294❩, , @t{valued-option}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨109❩, , @t{check}}.
@item
@ref{❨208❩, , @t{convert}}.
@item
@ref{❨449❩, , @t{stringify}}.
@end itemize
@item Direct slots
@defvr {Slot} {argument-name}
@anchor{❨321❩}@c
@slotsubindex{argument-name}@c
@table @strong
@item Initform
@t{"type"}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {enum-base}
@anchor{❨203❩}@c
@classsubindex{enum-base}@c
The ENUM-BASE abstract class.@*
This class provides support for options including enumerated values.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨32❩, , @t{enum-base.lisp}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨320❩, , @t{enum}}.
@item
@ref{❨154❩, , @t{xswitch}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨319❩, , @t{enum}}.
@item
@ref{❨663❩, , @t{initialize-instance}}.
@end itemize
@item Direct slots
@defvr {Slot} {enum}
@anchor{❨204❩}@c
@slotsubindex{enum}@c
The set of possible values.
@table @strong
@item Initargs
@t{:enum}
@item Readers
@ref{❨319❩, , @t{enum}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {face}
@anchor{❨491❩}@c
@classsubindex{face}@c
The FACE class.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨40❩, , @t{face.lisp}}.
@item Direct subclasses
@ref{❨551❩, , @t{sface}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨428❩, , @t{background}}.
@item
@ref{❨194❩, , @t{blink}}.
@item
@ref{❨66❩, , @t{bottom-padding}}.
@item
@ref{❨475❩, , @t{concealedp}}.
@item
@ref{❨162❩, , @t{crossed-out-p}}.
@item
@ref{❨486❩, , @t{foreground}}.
@item
@ref{❨130❩, , @t{framedp}}.
@item
@ref{❨722❩, , @t{initialize-instance}}.
@item
@ref{❨723❩, , @t{initialize-instance}}.
@item
@ref{❨724❩, , @t{initialize-instance}}.
@item
@ref{❨562❩, , @t{intensity}}.
@item
@ref{❨253❩, , @t{inversep}}.
@item
@ref{❨197❩, , @t{italicp}}.
@item
@ref{❨554❩, , @t{item-separator}}.
@item
@ref{❨118❩, , @t{left-padding}}.
@item
@ref{❨392❩, , @t{name}}.
@item
@ref{❨323❩, , @t{parent}}.
@item
@ref{❨353❩, , @t{right-padding}}.
@item
@ref{❨721❩, , @t{slot-unbound}}.
@item
@ref{❨424❩, , @t{subfaces}}.
@item
@ref{❨192❩, , @t{top-padding}}.
@item
@ref{❨490❩, , @t{underline}}.
@item
@ref{❨478❩, , @t{visiblep}}.
@end itemize
@item Direct slots
@defvr {Slot} {name}
@anchor{❨492❩}@c
@slotsubindex{name}@c
The face name.
@table @strong
@item Initargs
@t{:name}
@item Readers
@ref{❨392❩, , @t{name}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {visiblep}
@anchor{❨493❩}@c
@slotsubindex{visiblep}@c
Whether the face is visible.
@table @strong
@item Initform
@t{t}
@item Initargs
@t{:visible}
@item Readers
@ref{❨478❩, , @t{visiblep}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {left-padding}
@anchor{❨494❩}@c
@slotsubindex{left-padding}@c
The face left padding.@*
This property can take the following forms:@*
- <NUMBER>: the padding is relative to the enclosing face@comma{}@*
- SELF: the padding is set to wherever the face happens to be opened@comma{}
- (<NUMBER> ABSOLUTE): the padding is set in absolute value@comma{}@*
- (<NUMBER> :RELATIVE-TO <FACE-NAME>): the padding is set relatively to a
  parent face named FACE-NAME.
@table @strong
@item Initform
@t{0}
@item Initargs
@t{:padding-left}
@item Readers
@ref{❨118❩, , @t{left-padding}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {right-padding}
@anchor{❨495❩}@c
@slotsubindex{right-padding}@c
The face right padding.@*
This property can take the following forms:@*
- <NUMBER>: the padding is relative to the enclosing face@comma{}@*
- SELF: the padding is set to wherever the face happens to be closed@comma{}
- (<NUMBER> ABSOLUTE): the padding is set in absolute value@comma{}@*
- (<NUMBER> :RELATIVE-TO <FACE-NAME>): the padding is set relatively to a
  parent face named FACE-NAME.
@table @strong
@item Initform
@t{(quote net.didierverna.clon::self)}
@item Initargs
@t{:padding-right}
@item Readers
@ref{❨353❩, , @t{right-padding}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {top-padding}
@anchor{❨496❩}@c
@slotsubindex{top-padding}@c
The face top padding.@*
This property can take the following forms:@*
- nil: the output can start right away@comma{}@*
- 0: the output should start on the next line@comma{}@*
- N>0: there should be N empty lines before the output.
@table @strong
@item Initargs
@t{:padding-top}
@item Readers
@ref{❨192❩, , @t{top-padding}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {bottom-padding}
@anchor{❨497❩}@c
@slotsubindex{bottom-padding}@c
The face bottom padding.@*
This property can take the following forms:@*
- nil: the next output can start right at the end of this face's@comma{}
- 0: the next output should start on the next line@comma{}@*
- N>0: there should be N empty lines before the next output.
@table @strong
@item Initargs
@t{:padding-bottom}
@item Readers
@ref{❨66❩, , @t{bottom-padding}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {item-separator}
@anchor{❨498❩}@c
@slotsubindex{item-separator}@c
The face item separator.
@table @strong
@item Initform
@t{@hashchar{}@backslashchar{} }
@item Initargs
@t{:item-separator}
@item Readers
@ref{❨554❩, , @t{item-separator}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {intensity}
@anchor{❨499❩}@c
@slotsubindex{intensity}@c
The face intensity.
@table @strong
@item Initargs
@t{:intensity}
@item Readers
@ref{❨562❩, , @t{intensity}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {italicp}
@anchor{❨500❩}@c
@slotsubindex{italicp}@c
The face's italic status.
@table @strong
@item Initargs
@t{:italic}
@item Readers
@ref{❨197❩, , @t{italicp}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {underline}
@anchor{❨501❩}@c
@slotsubindex{underline}@c
The face's underline level.
@table @strong
@item Initargs
@t{:underline}
@item Readers
@ref{❨490❩, , @t{underline}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {blink}
@anchor{❨502❩}@c
@slotsubindex{blink}@c
The face's blink speed.
@table @strong
@item Initargs
@t{:blink}
@item Readers
@ref{❨194❩, , @t{blink}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {inversep}
@anchor{❨503❩}@c
@slotsubindex{inversep}@c
The face's inverse video status.
@table @strong
@item Initargs
@t{:inverse}
@item Readers
@ref{❨253❩, , @t{inversep}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {concealedp}
@anchor{❨504❩}@c
@slotsubindex{concealedp}@c
The face's concealed status.
@table @strong
@item Initargs
@t{:concealed}
@item Readers
@ref{❨475❩, , @t{concealedp}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {crossed-out-p}
@anchor{❨505❩}@c
@slotsubindex{crossed-out-p}@c
The face's crossed out status.
@table @strong
@item Initargs
@t{:crossed-out}
@item Readers
@ref{❨162❩, , @t{crossed-out-p}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {framedp}
@anchor{❨506❩}@c
@slotsubindex{framedp}@c
The face's framed status.
@table @strong
@item Initargs
@t{:framed}
@item Readers
@ref{❨130❩, , @t{framedp}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {foreground}
@anchor{❨507❩}@c
@slotsubindex{foreground}@c
The face foreground.
@table @strong
@item Initargs
@t{:foreground}
@item Readers
@ref{❨486❩, , @t{foreground}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {background}
@anchor{❨508❩}@c
@slotsubindex{background}@c
The face background.
@table @strong
@item Initargs
@t{:background}
@item Readers
@ref{❨428❩, , @t{background}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {subfaces}
@anchor{❨509❩}@c
@slotsubindex{subfaces}@c
The face children.
@table @strong
@item Initargs
@t{:subfaces}
@item Readers
@ref{❨424❩, , @t{subfaces}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {parent}
@anchor{❨510❩}@c
@slotsubindex{parent}@c
The face parent.
@table @strong
@item Readers
@ref{❨323❩, , @t{parent}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {flag}
@anchor{❨415❩}@c
@classsubindex{flag}@c
The FLAG class.@*
This class implements options that don't take any argument.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨24❩, , @t{flag.lisp}}.
@item Direct superclasses
@ref{❨410❩, , @t{option}}.
@item Direct methods
@ref{❨332❩, , @t{retrieve-from-environment}}.
@end table
@end deftp
@deftp {Class} {group}
@anchor{❨405❩}@c
@classsubindex{group}@c
The GROUP class.@*
This class groups other groups@comma{} options or strings together@comma{} effectively
implementing hierarchical program command-line.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨36❩, , @t{group.lisp}}.
@item Direct superclasses
@ref{❨149❩, , @t{container}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨420❩, , @t{header}}.
@item
@ref{❨337❩, , @t{help-spec}}.
@end itemize
@item Direct slots
@defvr {Slot} {header}
@anchor{❨406❩}@c
@slotsubindex{header}@c
The group's header.
@table @strong
@item Initargs
@t{:header}
@item Readers
@ref{❨420❩, , @t{header}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {item}
@anchor{❨69❩}@c
@classsubindex{item}@c
The ITEM class.@*
This class is the base class for all synopsis items.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨21❩, , @t{item.lisp}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨149❩, , @t{container}}.
@item
@ref{❨410❩, , @t{option}}.
@item
@ref{❨265❩, , @t{text}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨342❩, , @t{help-spec}}.
@item
@ref{❨216❩, , @t{hiddenp}}.
@item
@ref{❨273❩, , @t{mapoptions}}.
@item
@ref{❨309❩, , @t{traversedp}}.
@item
@ref{❨311❩, , @t{(setf traversedp)}}.
@item
@ref{❨404❩, , @t{untraverse}}.
@end itemize
@item Direct slots
@defvr {Slot} {traversedp}
@anchor{❨70❩}@c
@slotsubindex{traversedp}@c
The item's traversal state.
@table @strong
@item Readers
@ref{❨309❩, , @t{traversedp}}.
@item Writers
@ref{❨311❩, , @t{(setf traversedp)}}.
@end table
@end defvr
@defvr {Slot} {hiddenp}
@anchor{❨71❩}@c
@slotsubindex{hiddenp}@c
Whether the item is hidden in help strings.
@table @strong
@item Initargs
@t{:hidden}
@item Readers
@ref{❨216❩, , @t{hiddenp}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {lispobj}
@anchor{❨381❩}@c
@classsubindex{lispobj}@c
The LISPOBJ class.@*
This class implements read-from-string options.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨30❩, , @t{lispobj.lisp}}.
@item Direct superclasses
@ref{❨294❩, , @t{valued-option}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨111❩, , @t{check}}.
@item
@ref{❨210❩, , @t{convert}}.
@item
@ref{❨451❩, , @t{stringify}}.
@item
@ref{❨49❩, , @t{typespec}}.
@end itemize
@item Direct slots
@defvr {Slot} {argument-name}
@anchor{❨382❩}@c
@slotsubindex{argument-name}@c
@table @strong
@item Initform
@t{"obj"}
@end table
@end defvr
@defvr {Slot} {typespec}
@anchor{❨383❩}@c
@slotsubindex{typespec}@c
A type specifier the option's value should satisfy.
@table @strong
@item Initform
@t{t}
@item Initargs
@t{:typespec}
@item Readers
@ref{❨49❩, , @t{typespec}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {negatable}
@anchor{❨114❩}@c
@classsubindex{negatable}@c
The NEGATABLE Class.@*
This class implements the negated syntax for the switch-based hierarchy.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨26❩, , @t{negatable.lisp}}.
@item Direct subclasses
@ref{❨512❩, , @t{switch-base}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨356❩, , @t{negated-pack-char}}.
@item
@ref{❨136❩, , @t{retrieve-from-negated-call}}.
@item
@ref{❨526❩, , @t{short-syntax-help-spec-prefix}}.
@end itemize
@end table
@end deftp
@deftp {Class} {option}
@anchor{❨410❩}@c
@classsubindex{option}@c
The OPTION class.@*
This is the base class for all options.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨23❩, , @t{option.lisp}}.
@item Direct superclasses
@ref{❨69❩, , @t{item}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨415❩, , @t{flag}}.
@item
@ref{❨294❩, , @t{valued-option}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨128❩, , @t{check-name-clash}}.
@item
@ref{❨373❩, , @t{description}}.
@item
@ref{❨280❩, , @t{env-var}}.
@item
@ref{❨340❩, , @t{help-spec}}.
@item
@ref{❨672❩, , @t{initialize-instance}}.
@item
@ref{❨673❩, , @t{initialize-instance}}.
@item
@ref{❨153❩, , @t{long-name}}.
@item
@ref{❨275❩, , @t{mapoptions}}.
@item
@ref{❨357❩, , @t{negated-pack-char}}.
@item
@ref{❨431❩, , @t{option-sticky-distance}}.
@item
@ref{❨316❩, , @t{retrieve-from-long-call}}.
@item
@ref{❨134❩, , @t{retrieve-from-negated-call}}.
@item
@ref{❨97❩, , @t{retrieve-from-short-call}}.
@item
@ref{❨326❩, , @t{short-name}}.
@item
@ref{❨55❩, , @t{short-pack-char}}.
@item
@ref{❨402❩, , @t{untraverse}}.
@end itemize
@item Direct Default Initargs
@multitable @columnfractions 0.3 0.5
@headitem Initarg @tab Value
@item @t{:internal}
@tab @t{nil}
@end multitable
@item Direct slots
@defvr {Slot} {short-name}
@anchor{❨411❩}@c
@slotsubindex{short-name}@c
The option's short name.
@table @strong
@item Type
@t{(or null string)}
@item Initargs
@t{:short-name}
@item Readers
@ref{❨326❩, , @t{short-name}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {long-name}
@anchor{❨412❩}@c
@slotsubindex{long-name}@c
The option's long name.
@table @strong
@item Type
@t{(or null string)}
@item Initargs
@t{:long-name}
@item Readers
@ref{❨153❩, , @t{long-name}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {description}
@anchor{❨413❩}@c
@slotsubindex{description}@c
The option's description.
@table @strong
@item Type
@t{(or null string)}
@item Initargs
@t{:description}
@item Readers
@ref{❨373❩, , @t{description}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {env-var}
@anchor{❨414❩}@c
@slotsubindex{env-var}@c
The option's associated environment variable.
@table @strong
@item Type
@t{(or null string)}
@item Initargs
@t{:env-var}
@item Readers
@ref{❨280❩, , @t{env-var}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {path}
@anchor{❨434❩}@c
@classsubindex{path}@c
The PATH class.@*
This class implements options whose values are (colon-separated lists of)
pathnames.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨31❩, , @t{path.lisp}}.
@item Direct superclasses
@ref{❨294❩, , @t{valued-option}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨110❩, , @t{check}}.
@item
@ref{❨209❩, , @t{convert}}.
@item
@ref{❨538❩, , @t{path-type}}.
@item
@ref{❨450❩, , @t{stringify}}.
@end itemize
@item Direct slots
@defvr {Slot} {argument-name}
@anchor{❨435❩}@c
@slotsubindex{argument-name}@c
@table @strong
@item Initform
@t{"path"}
@end table
@end defvr
@defvr {Slot} {path-type}
@anchor{❨436❩}@c
@slotsubindex{path-type}@c
The path type.
@table @strong
@item Initargs
@t{:type}
@item Readers
@ref{❨538❩, , @t{path-type}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {sface}
@anchor{❨551❩}@c
@classsubindex{sface}@c
The SFACE class.@*
An SFace is the association of a face and its raw sibling. The sibling is used
to create subfaces which would be missing from the original@comma{} user defined one.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Direct superclasses
@ref{❨491❩, , @t{face}}.
@item Direct methods
@ref{❨460❩, , @t{sibling}}.
@item Direct slots
@defvr {Slot} {sibling}
@anchor{❨552❩}@c
@slotsubindex{sibling}@c
The SFace's raw sibling.
@table @strong
@item Readers
@ref{❨460❩, , @t{sibling}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {sheet}
@anchor{❨254❩}@c
@classsubindex{sheet}@c
The SHEET class.@*
This class implements the notion of sheet for printing Clon help.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨41❩, , @t{sheet.lisp}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨360❩, , @t{column}}.
@item
@ref{❨362❩, , @t{(setf column)}}.
@item
@ref{❨347❩, , @t{frames}}.
@item
@ref{❨349❩, , @t{(setf frames)}}.
@item
@ref{❨87❩, , @t{highlightp}}.
@item
@ref{❨664❩, , @t{initialize-instance}}.
@item
@ref{❨665❩, , @t{initialize-instance}}.
@item
@ref{❨289❩, , @t{line-width}}.
@item
@ref{❨77❩, , @t{output-stream}}.
@item
@ref{❨300❩, , @t{sface-tree}}.
@end itemize
@item Direct slots
@defvr {Slot} {output-stream}
@anchor{❨255❩}@c
@slotsubindex{output-stream}@c
The sheet's output stream.
@table @strong
@item Type
@t{stream}
@item Initargs
@t{:output-stream}
@item Readers
@ref{❨77❩, , @t{output-stream}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {line-width}
@anchor{❨256❩}@c
@slotsubindex{line-width}@c
The sheet's line width.
@table @strong
@item Type
@t{(integer 1)}
@item Initargs
@t{:line-width}
@item Readers
@ref{❨289❩, , @t{line-width}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {highlightp}
@anchor{❨257❩}@c
@slotsubindex{highlightp}@c
Whether to highlight SHEET's output.
@table @strong
@item Initargs
@t{:highlightp}
@item Readers
@ref{❨87❩, , @t{highlightp}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {sface-tree}
@anchor{❨258❩}@c
@slotsubindex{sface-tree}@c
The sheet's sface tree.
@table @strong
@item Readers
@ref{❨300❩, , @t{sface-tree}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {column}
@anchor{❨259❩}@c
@slotsubindex{column}@c
The sheet's current column.
@table @strong
@item Type
@t{(integer 0)}
@item Initform
@t{0}
@item Readers
@ref{❨360❩, , @t{column}}.
@item Writers
@ref{❨362❩, , @t{(setf column)}}.
@end table
@end defvr
@defvr {Slot} {frames}
@anchor{❨260❩}@c
@slotsubindex{frames}@c
The stack of currently open frames.
@table @strong
@item Type
@t{list}
@item Readers
@ref{❨347❩, , @t{frames}}.
@item Writers
@ref{❨349❩, , @t{(setf frames)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {stropt}
@anchor{❨267❩}@c
@classsubindex{stropt}@c
The STROPT class.@*
This class implements options the values of which are strings.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨29❩, , @t{stropt.lisp}}.
@item Direct superclasses
@ref{❨294❩, , @t{valued-option}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨112❩, , @t{check}}.
@item
@ref{❨211❩, , @t{convert}}.
@item
@ref{❨452❩, , @t{stringify}}.
@end itemize
@item Direct slots
@defvr {Slot} {argument-name}
@anchor{❨268❩}@c
@slotsubindex{argument-name}@c
@table @strong
@item Initform
@t{"str"}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {switch}
@anchor{❨282❩}@c
@classsubindex{switch}@c
The SWITCH class.@*
This class implements boolean options.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨28❩, , @t{switch.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨512❩, , @t{switch-base}}.
@item
@ref{❨294❩, , @t{valued-option}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨113❩, , @t{check}}.
@item
@ref{❨212❩, , @t{convert}}.
@item
@ref{❨666❩, , @t{initialize-instance}}.
@item
@ref{❨453❩, , @t{stringify}}.
@end itemize
@end table
@end deftp
@deftp {Class} {switch-base}
@anchor{❨512❩}@c
@classsubindex{switch-base}@c
The SWITCH-BASE abstract class.@*
This class provides support for options including boolean values.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨27❩, , @t{switch-base.lisp}}.
@item Direct superclasses
@ref{❨114❩, , @t{negatable}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨282❩, , @t{switch}}.
@item
@ref{❨154❩, , @t{xswitch}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨540❩, , @t{argument-style}}.
@item
@ref{❨464❩, , @t{argument-styles}}.
@item
@ref{❨466❩, , @t{(setf argument-styles)}}.
@item
@ref{❨725❩, , @t{initialize-instance}}.
@item
@ref{❨726❩, , @t{initialize-instance}}.
@item
@ref{❨83❩, , @t{no-values}}.
@item
@ref{❨85❩, , @t{(setf no-values)}}.
@item
@ref{❨558❩, , @t{yes-values}}.
@item
@ref{❨560❩, , @t{(setf yes-values)}}.
@end itemize
@item Direct Default Initargs
@multitable @columnfractions 0.3 0.5
@headitem Initarg @tab Value
@item @t{:argument-type}
@tab @t{optional}
@item @t{:argument-styles}
@tab @t{(quote (yes/no on/off true/false yup/nope yeah/nah))}
@item @t{:yes-values}
@tab @t{(quote (yes on true yup yeah))}
@item @t{:no-values}
@tab @t{(quote (no off false nope nah))}
@end multitable
@item Direct slots
@defvr {Slot} {argument-styles}
@anchor{❨513❩}@c
@slotsubindex{argument-styles}@c
The possible argument styles.@*
The position of every argument style in the list must correspond to the
position of the associated strings in the yes-values and no-values slots.
@table @strong
@item Type
@t{list}
@item Initargs
@t{:argument-styles}
@item Readers
@ref{❨464❩, , @t{argument-styles}}.
@item Writers
@ref{❨466❩, , @t{(setf argument-styles)}}.
@end table
@end defvr
@defvr {Slot} {yes-values}
@anchor{❨514❩}@c
@slotsubindex{yes-values}@c
The possible 'yes' values.
@table @strong
@item Type
@t{list}
@item Initargs
@t{:yes-values}
@item Readers
@ref{❨558❩, , @t{yes-values}}.
@item Writers
@ref{❨560❩, , @t{(setf yes-values)}}.
@end table
@end defvr
@defvr {Slot} {no-values}
@anchor{❨515❩}@c
@slotsubindex{no-values}@c
The possible 'no' values.
@table @strong
@item Type
@t{list}
@item Initargs
@t{:no-values}
@item Readers
@ref{❨83❩, , @t{no-values}}.
@item Writers
@ref{❨85❩, , @t{(setf no-values)}}.
@end table
@end defvr
@defvr {Slot} {argument-style}
@anchor{❨516❩}@c
@slotsubindex{argument-style}@c
The selected argument style.
@table @strong
@item Type
@t{keyword}
@item Initform
@t{:yes/no}
@item Initargs
@t{:argument-style}
@item Readers
@ref{❨540❩, , @t{argument-style}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {synopsis}
@anchor{❨578❩}@c
@classsubindex{synopsis}@c
The SYNOPSIS class.@*
This class handles the description of the program's command-line options.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨39❩, , @t{synopsis.lisp}}.
@item Direct superclasses
@ref{❨149❩, , @t{container}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨535❩, , @t{clon-options-group}}.
@item
@ref{❨336❩, , @t{help-spec}}.
@item
@ref{❨734❩, , @t{initialize-instance}}.
@item
@ref{❨735❩, , @t{initialize-instance}}.
@item
@ref{❨378❩, , @t{negated-pack}}.
@item
@ref{❨219❩, , @t{postfix}}.
@item
@ref{❨556❩, , @t{potential-pack}}.
@item
@ref{❨165❩, , @t{potential-pack-p}}.
@item
@ref{❨142❩, , @t{short-pack}}.
@end itemize
@item Direct slots
@defvr {Slot} {postfix}
@anchor{❨579❩}@c
@slotsubindex{postfix}@c
A postfix to the program synopsis.
@table @strong
@item Type
@t{(or null string)}
@item Initargs
@t{:postfix}
@item Readers
@ref{❨219❩, , @t{postfix}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {short-pack}
@anchor{❨580❩}@c
@slotsubindex{short-pack}@c
The short pack string.
@table @strong
@item Type
@t{(or null string)}
@item Readers
@ref{❨142❩, , @t{short-pack}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {negated-pack}
@anchor{❨581❩}@c
@slotsubindex{negated-pack}@c
The negated pack string.
@table @strong
@item Type
@t{(or null string)}
@item Readers
@ref{❨378❩, , @t{negated-pack}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {potential-pack}
@anchor{❨582❩}@c
@slotsubindex{potential-pack}@c
The potential pack string.
@table @strong
@item Type
@t{(or null string)}
@item Readers
@ref{❨556❩, , @t{potential-pack}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {clon-options-group}
@anchor{❨583❩}@c
@slotsubindex{clon-options-group}@c
The Clon options group.
@table @strong
@item Type
@t{net.didierverna.clon::group}
@item Initargs
@t{:clon-options-group}
@item Readers
@ref{❨535❩, , @t{clon-options-group}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {text}
@anchor{❨265❩}@c
@classsubindex{text}@c
The TEXT class.@*
This class implements plain text objects appearing in a synopsis.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨22❩, , @t{text.lisp}}.
@item Direct superclasses
@ref{❨69❩, , @t{item}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨127❩, , @t{check-name-clash}}.
@item
@ref{❨126❩, , @t{check-name-clash}}.
@item
@ref{❨597❩, , @t{contents}}.
@item
@ref{❨341❩, , @t{help-spec}}.
@item
@ref{❨403❩, , @t{untraverse}}.
@end itemize
@item Direct slots
@defvr {Slot} {contents}
@anchor{❨266❩}@c
@slotsubindex{contents}@c
The actual text string.
@table @strong
@item Type
@t{string}
@item Initargs
@t{:contents}
@item Readers
@ref{❨597❩, , @t{contents}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {valued-option}
@anchor{❨294❩}@c
@classsubindex{valued-option}@c
The VALUED-OPTION class.@*
This is the base class for options accepting arguments.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨25❩, , @t{valued.lisp}}.
@item Direct superclasses
@ref{❨410❩, , @t{option}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨320❩, , @t{enum}}.
@item
@ref{❨381❩, , @t{lispobj}}.
@item
@ref{❨434❩, , @t{path}}.
@item
@ref{❨267❩, , @t{stropt}}.
@item
@ref{❨282❩, , @t{switch}}.
@item
@ref{❨154❩, , @t{xswitch}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨225❩, , @t{argument-name}}.
@item
@ref{❨364❩, , @t{argument-required-p}}.
@item
@ref{❨418❩, , @t{default-value}}.
@item
@ref{❨549❩, , @t{fallback-value}}.
@item
@ref{❨339❩, , @t{help-spec}}.
@item
@ref{❨668❩, , @t{initialize-instance}}.
@item
@ref{❨669❩, , @t{initialize-instance}}.
@item
@ref{❨430❩, , @t{option-sticky-distance}}.
@item
@ref{❨333❩, , @t{retrieve-from-environment}}.
@item
@ref{❨317❩, , @t{retrieve-from-long-call}}.
@item
@ref{❨135❩, , @t{retrieve-from-negated-call}}.
@item
@ref{❨98❩, , @t{retrieve-from-short-call}}.
@item
@ref{❨54❩, , @t{short-pack-char}}.
@item
@ref{❨527❩, , @t{short-syntax-help-spec-prefix}}.
@end itemize
@item Direct Default Initargs
@multitable @columnfractions 0.3 0.5
@headitem Initarg @tab Value
@item @t{:argument-type}
@tab @t{required}
@end multitable
@item Direct slots
@defvr {Slot} {argument-name}
@anchor{❨295❩}@c
@slotsubindex{argument-name}@c
The option's argument display name.
@table @strong
@item Initform
@t{"arg"}
@item Initargs
@t{:argument-name}
@item Readers
@ref{❨225❩, , @t{argument-name}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {argument-required-p}
@anchor{❨296❩}@c
@slotsubindex{argument-required-p}@c
Whether the option's argument is required.
@table @strong
@item Readers
@ref{❨364❩, , @t{argument-required-p}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {fallback-value}
@anchor{❨297❩}@c
@slotsubindex{fallback-value}@c
The option's fallback value.
@table @strong
@item Initargs
@t{:fallback-value}
@item Readers
@ref{❨549❩, , @t{fallback-value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {default-value}
@anchor{❨298❩}@c
@slotsubindex{default-value}@c
The option's default value.
@table @strong
@item Initargs
@t{:default-value}
@item Readers
@ref{❨418❩, , @t{default-value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {xswitch}
@anchor{❨154❩}@c
@classsubindex{xswitch}@c
The XSWITCH class.@*
This class merges the functionalities of switches and enumerations.
As such@comma{} the negated syntax is available for extended xswitches.
@table @strong
@item Package
@ref{❨45❩, , @t{net.didierverna.clon}}.
@item Source
@ref{❨34❩, , @t{xswitch.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨203❩, , @t{enum-base}}.
@item
@ref{❨512❩, , @t{switch-base}}.
@item
@ref{❨294❩, , @t{valued-option}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨108❩, , @t{check}}.
@item
@ref{❨207❩, , @t{convert}}.
@item
@ref{❨448❩, , @t{stringify}}.
@end itemize
@item Direct slots
@defvr {Slot} {enum}
@anchor{❨155❩}@c
@slotsubindex{enum}@c
The set of possible non-boolean values.
@table @strong
@end table
@end defvr
@end table
@end deftp



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Definitions, Top
@appendix Indexes
@menu
* Concept index::
* Function index::
* Variable index::
* Data type index::
@end menu


@c -------------
@c Concept index
@c -------------
@node Concept index, Function index, Indexes, Indexes
@appendixsec Concepts
@printindex cp

@page


@c --------------
@c Function index
@c --------------
@node Function index, Variable index, Concept index, Indexes
@appendixsec Functions
@printindex fn

@page


@c --------------
@c Variable index
@c --------------
@node Variable index, Data type index, Function index, Indexes
@appendixsec Variables
@printindex vr

@page


@c ---------------
@c Data type index
@c ---------------
@node Data type index, , Variable index, Indexes
@appendixsec Data types
@printindex tp

@bye

@c reference.texi ends here
