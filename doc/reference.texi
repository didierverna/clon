\input texinfo

@c reference.texi --- Reference manual

@c Copyright (C) 2010-2012, 2015, 2017, 2020, 2021 Didier Verna

@c This file is part of Clon.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.
@c 
@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:

@c Generated automatically by Declt version 3.0 "Montgomery Scott"
@c on Thu Mar 25 12:49:21 2021 GMT+1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename clon-reference.info
@settitle The Clon Reference Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Format Specific Tweaks
@c ====================================================================
@tex
%% Declt uses several Unicode characters to "reveal" blanks. This
%% works fine in HTML or Info output, but TeX will have problems with
%% these. The code below translates those characters to something that
%% TeX can handle.

%% U+23B5 (Bottom Square Bracket), used to reveal white spaces, is
%% translated to its Computer Modern teletype version.
\DeclareUnicodeCharacter{23B5}{{\tt\char'040}}

%% U+21B5 (Downwards Arrow With Corner Leftwards), used to reveal
%% carriage returns, is translated to \hookleftarrow in math mode.
\DeclareUnicodeCharacter{21B5}{\ensuremath\hookleftarrow}

%% U+21E5 (Rightwards Arrow To Bar), used to reveal tabs, is
%% translated to something that looks similar, based on a rightarrow
%% and a vertical bar from the math extension font.
\DeclareUnicodeCharacter{21E5}{%
  \ensuremath{\rightarrow\kern-.5em\mathchar\"130C}}


%% Declt uses several Unicode characters to replace "fragile" ones in
%% anchor names and references. These characters are chosen to resemble
%% the original ones, without interfering with Info syntax. In TeX
%% however, we can switch them back to the original versions, because
%% cross-references are done differently. In theory, I think we could do
%% something similar for HTML output (again, only the Info syntax poses
%% problems), but I don't know how to do something similar to what's
%% below.

%% U+2024 (One Dot Leader) replaces periods.
\DeclareUnicodeCharacter{2024}{.}

%% U+2236 (Ratio) replaces colons.
\DeclareUnicodeCharacter{2236}{:}

%% U+2768 (Medium Left Parenthesis Ornament) replaces left parenthesis.
\DeclareUnicodeCharacter{2768}{(}

%% U+2769 (Medium Right Parenthesis Ornament) replaces right parenthesis.
\DeclareUnicodeCharacter{2769}{)}

%% U+214B (Turned Ampersand) replaces ampersands.
\DeclareUnicodeCharacter{214B}{&}

%% U+2216 (Set Minus) replaces backslashes.
\DeclareUnicodeCharacter{2216}{\char"5C}

%% The following ones are already defined in texinfo.tex so we have nothing
%% more to do:
%% U+201A (Single Low-9 Quotation Mark) replaces commas.
%% U+2205 (Empty Set) replaces empty symbol names.

@end tex



@c ====================================================================
@c Settings
@c ====================================================================
@setchapternewpage odd
@documentdescription
The Clon Reference Manual, version 1.0 beta 24 "Michael Brecker".
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@c ---------------
@c Indexing macros
@c ---------------

@c Packages
@macro packageindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro systemindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro

@c Modules
@macro moduleindex{name}
@cindex @t{\name\}
@cindex Module, @t{\name\}
@end macro

@c Other files
@macro otherfileindex{name}
@cindex @t{\name\}
@cindex Other File, @t{\name\}
@cindex File, other, @t{\name\}
@end macro

@c Lisp files
@macro lispfileindex{name}
@cindex @t{\name\}
@cindex Lisp File, @t{\name\}
@cindex File, Lisp, @t{\name\}
@end macro

@c C files
@macro cfileindex{name}
@cindex @t{\name\}
@cindex C File, @t{\name\}
@cindex File, C, @t{\name\}
@end macro

@c Java files
@macro javafileindex{name}
@cindex @t{\name\}
@cindex Java File, @t{\name\}
@cindex File, Java, @t{\name\}
@end macro

@c Static files
@macro staticfileindex{name}
@cindex @t{\name\}
@cindex Static File, @t{\name\}
@cindex File, static, @t{\name\}
@end macro

@c Doc files
@macro docfileindex{name}
@cindex @t{\name\}
@cindex Doc File, @t{\name\}
@cindex File, doc, @t{\name\}
@end macro

@c HTML files
@macro htmlfileindex{name}
@cindex @t{\name\}
@cindex HTML File, @t{\name\}
@cindex File, html, @t{\name\}
@end macro

@c The following macros are meant to be used within @defxxx environments.
@c Texinfo performs half the indexing job and we do the other half.

@c Constants
@macro constantsubindex{name}
@vindex @r{Constant, }\name\
@end macro

@c Special variables
@macro specialsubindex{name}
@vindex @r{Special Variable, }\name\
@end macro

@c Symbol macros
@macro symbolmacrosubindex{name}
@vindex @r{Symbol Macro, }\name\
@end macro

@c Slots
@macro slotsubindex{name}
@vindex @r{Slot, }\name\
@end macro

@c Macros
@macro macrosubindex{name}
@findex @r{Macro, }\name\
@end macro

@c Compiler Macros
@macro compilermacrosubindex{name}
@findex @r{Compiler Macro, }\name\
@end macro

@c Functions
@macro functionsubindex{name}
@findex @r{Function, }\name\
@end macro

@c Methods
@macro methodsubindex{name}
@findex @r{Method, }\name\
@end macro

@c Generic Functions
@macro genericsubindex{name}
@findex @r{Generic Function, }\name\
@end macro

@c Setf Expanders
@macro setfexpandersubindex{name}
@findex @r{Setf Expander, }\name\
@end macro

@c Method Combinations
@macro shortcombinationsubindex{name}
@tpindex @r{Short Method Combination, }\name\
@tpindex @r{Method Combination, Short, }\name\
@end macro

@macro longcombinationsubindex{name}
@tpindex @r{Long Method Combination, }\name\
@tpindex @r{Method Combination, Long, }\name\
@end macro

@c Conditions
@macro conditionsubindex{name}
@tpindex @r{Condition, }\name\
@end macro

@c Structures
@macro structuresubindex{name}
@tpindex @r{Structure, }\name\
@end macro

@c Types
@macro typesubindex{name}
@tpindex @r{Type, }\name\
@end macro

@c Classes
@macro classsubindex{name}
@tpindex @r{Class, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Clon Reference: (clon-reference). The Clon Reference Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} 2010-2012@comma{} 2015@comma{} 2017@comma{} 2020@comma{} 2021 Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Clon Reference Manual
@subtitle The Command-Line Options Nuker, version 1.0 beta 24 "Michael Brecker"

@vskip 2cm
@image{splash,16cm}
@author Didier Verna <@email{didier@atchar{}didierverna.net}>

@page
@quotation
This manual was generated automatically by Declt 3.0 "Montgomery Scott" on Thu Mar 25 12:49:21 2021 GMT+1.
@end quotation
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Top
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Clon Reference Manual
This is the Clon Reference Manual, version 1.0 beta 24 "Michael Brecker",
generated automatically by Declt version 3.0 "Montgomery Scott"
on Thu Mar 25 12:49:21 2021 GMT+1.

@menu
* Copying:: The BSD License
* Introduction:: What Clon is all about
* Systems:: The systems documentation
* Modules:: The modules documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying
@quotation
Permission to use@comma{} copy@comma{} modify@comma{} and distribute this software for any
purpose with or without fee is hereby granted@comma{} provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL@comma{} DIRECT@comma{} INDIRECT@comma{} OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE@comma{} DATA OR PROFITS@comma{} WHETHER IN AN
ACTION OF CONTRACT@comma{} NEGLIGENCE OR OTHER TORTIOUS ACTION@comma{} ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Systems, Copying, Top
@chapter Introduction
@macro clon
@t{Clon}
@end macro

@macro cmdline
command-line
@end macro

@macro CmdLine
Command-Line
@end macro

@macro cl
Common-Lisp
@end macro

@macro tty
@t{tty}
@end macro

@macro etc
@i{etc.}
@end macro

@ifinfo
@macro pxenduserref{node}
@pxref{\node\, , , clon-enduser, The Clon End-User Manual}
@end macro
@end ifinfo
@ifnotinfo
@macro pxenduserref{node}
@pxref{\node\, , , enduser, The Clon End-User Manual}
@end macro
@end ifnotinfo

@ifinfo
@macro pxuserref{node}
@pxref{\node\, , , clon-user, The Clon User Manual}
@end macro
@end ifinfo
@ifnotinfo
@macro pxuserref{node}
@pxref{\node\, , , user, The Clon User Manual}
@end macro
@end ifnotinfo

@clon{} is a library for managing @cmdline{} options in standalone @cl{}
applications. It provides a unified option syntax with both short and
long names, automatic completion of partial names and automatic
retrieval/conversion of option arguments from the @cmdline{}, associated
environment variables, fallback or default values. @clon{} comes with a
set of extensible option types (switches, paths, strings @etc{}).
@clon{} also provides automatic generation and formatting of help
strings, with support for highlighting on @tty{}'s through ISO/IEC 6429
SGR. This formatting is customizable through @emph{themes}.

Depending on the target audience, @clon{} stands for either ``The
@CmdLine{} Options Nuker'' or ``The @cl{} Options Nuker''. @clon{} also
has a recursive acronym: ``@clon{} Likes Options Nuking'', and a reverse
one: ``Never Omit to Link with @clon{}''. Other possible expansions of
the acronym are still being investigated.

This is the @clon{} reference manual, and as such, it is not meant to be
read. It may help you find sleep in case of insomnia though. @clon{}
comes with two human-readable manuals:
@itemize @bullet
@item
the ``end-user manual'' (@pxenduserref{Top}) is for the @clon{}
@emph{end-user}, that is, the user of an application powered by @clon{}.
It describes how to use the @cmdline{} of clonified@footnote{An
application using @clon{} for its @cmdline{} option management is said to
be @emph{clonified}. It is also possible to say @emph{clonfiscated}.
However, we advise against using @emph{clonistified}. The term
@emph{clonificated} is also considered bad style, and the use of
@emph{clonificationated} is strictly prohibited.} applications and how to
customize @clon{}'s output. Everybody should read this manual first.
@item
the ``user manual'' (@pxenduserref{Top}) is for the @clon{} @emph{user},
that is, the developer of a @cl{} application who wants to use @clon{} for
@cmdline{} option management. It describes how to clonify your application
and extend the library with your own option types.
@end itemize



@c ====================================================================
@c Systems
@c ====================================================================
@node Systems, Modules, Introduction, Top
@chapter Systems
The main system appears first, followed by any subsystem dependency.

@menu
* The net.didierverna.clon system: The net․didierverna․clon system.
* The net.didierverna.clon.termio system: The net․didierverna․clon․termio system.
* The net.didierverna.clon.setup/termio system: The net․didierverna․clon․setup/termio system.
* The net.didierverna.clon.core system: The net․didierverna․clon․core system.
* The net.didierverna.clon.setup system: The net․didierverna․clon․setup system.
@end menu


@c -------------------------------
@c The net.didierverna.clon system
@c -------------------------------
@node The net․didierverna․clon system, The net․didierverna․clon․termio system, Systems, Systems
@section @t{net.didierverna.clon}
@anchor{go to the net․didierverna․clon system}@c
@systemindex{net.didierverna.clon}@c
@table @strong
@item Long Name
The Command-Line Options Nuker
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/clon.php}
@item Source Control
@uref{https://github.com/didierverna/clon}
@item License
BSD
@item Description
Command-line options management for standalone Common Lisp applications
@item Long Description

Clon is a library for command-line options management. It is intended to ease
the creation of standalone Common Lisp applications by providing a powerful
and uniform command-line options interface. The most important features of
Clon are the following.@*

  - From the application programmer's point of view: centralized command-line
  options specification and management@comma{} including automatic generation of help
  strings@comma{} conversion from command-line / defaults / fallbacks / environment
  variables to application-level option values@comma{} global or on-demand option
  retrieval@comma{} and extensibility (the programmer can define his own option
  types).@*

  - From the application user's point of view: uniform command-line option
  syntax across all Clon applications@comma{} customization of the help strings
  layout (with optional ISO6429 coloring on terminals that support it)@comma{}
  automatic completion of abbreviated option names and short/long/pack syntax.
@item Defsystem Dependency
@ref{go to the net․didierverna․clon․setup/termio system, , @t{net.didierverna.clon.setup/termio}} (system)
@item Dependencies
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․core system, , @t{net.didierverna.clon.core}} (system)
@item
@ref{go to the net․didierverna․clon․termio system, , @t{net.didierverna.clon.termio}} (system)
 (for feature @t{net.didierverna.clon.termio})
@end itemize
@item Source
@ref{go to the net․didierverna․clon․asd file, , @t{net.didierverna.clon.asd}} (file)
@item Directory
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/, ignore, @t{/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/}}
@end table


@c --------------------------------------
@c The net.didierverna.clon.termio system
@c --------------------------------------
@node The net․didierverna․clon․termio system, The net․didierverna․clon․setup/termio system, The net․didierverna․clon system, Systems
@section @t{net.didierverna.clon.termio}
@anchor{go to the net․didierverna․clon․termio system}@c
@systemindex{net.didierverna.clon.termio}@c
@table @strong
@item Long Name
The Command-Line Options Nuker@comma{} termio library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/clon.php}
@item Source Control
@uref{https://github.com/didierverna/clon}
@item License
BSD
@item Description
Clon's support for termio (tty geometry and fontification)
@item Long Description

Clon's termio library provides automatic detection of tty geometry and ISO6429
coloring on terminals that support it. For a more complete description of
Clon@comma{} see the net.didierverna.clon system.
@item If Feature
@t{net.didierverna.clon.termio}
@item Defsystem Dependencies
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․setup/termio system, , @t{net.didierverna.clon.setup/termio}} (system)
@item
required module @t{sb-grovel} (for feature @t{sbcl})
@item
@t{cffi-grovel} (for feature @t{(or allegro clisp lispworks)})
@end itemize
@item Dependencies
@itemize @bullet
@item
@t{sb-posix} (for feature @t{sbcl})
@item
@t{cffi} (for feature @t{(and clisp net.didierverna.clon.termio)})
@item
@ref{go to the net․didierverna․clon․setup system, , @t{net.didierverna.clon.setup}} (system)
@item
@ref{go to the net․didierverna․clon․core system, , @t{net.didierverna.clon.core}} (system)
@end itemize
@item Source
@ref{go to the net․didierverna․clon․termio․asd file, , @t{net.didierverna.clon.termio.asd}} (file)
@item Directory
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/, ignore, @t{/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/}}
@item Components
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․termio/sbcl/constants․lisp file, , @t{sbcl/constants.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․termio/termio․lisp file, , @t{termio.lisp}} (file)
@end itemize
@end table


@c --------------------------------------------
@c The net.didierverna.clon.setup/termio system
@c --------------------------------------------
@node The net․didierverna․clon․setup/termio system, The net․didierverna․clon․core system, The net․didierverna․clon․termio system, Systems
@section @t{net.didierverna.clon.setup/termio}
@anchor{go to the net․didierverna․clon․setup/termio system}@c
@systemindex{net.didierverna.clon.setup/termio}@c
@table @strong
@item Long Name
The Command-Line Options Nuker@comma{} termio setup
@item Author
Didier Verna <@email{didier@atchar{}didierverna.net}>
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/clon.php}
@item Source Control
@uref{https://github.com/didierverna/clon}
@item License
BSD
@item Description
Clon's support for automatic configuration of termio support
@item Long Description

This is a virtual subsystem or Clon (no actual code). Its purpose is only to
autodetect termio support and update Clon's preload configuration on load. For
a more complete description of Clon@comma{} see the net.didierverna.clon system.
@item Dependency
@ref{go to the net․didierverna․clon․setup system, , @t{net.didierverna.clon.setup}} (system)
@item Source
@ref{go to the net․didierverna․clon․setup․asd file, , @t{net.didierverna.clon.setup.asd}} (file)
@item Directory
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/setup/, ignore, @t{/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/setup/}}
@end table


@c ------------------------------------
@c The net.didierverna.clon.core system
@c ------------------------------------
@node The net․didierverna․clon․core system, The net․didierverna․clon․setup system, The net․didierverna․clon․setup/termio system, Systems
@section @t{net.didierverna.clon.core}
@anchor{go to the net․didierverna․clon․core system}@c
@systemindex{net.didierverna.clon.core}@c
@table @strong
@item Long Name
The Command-Line Options Nuker@comma{} core library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/clon.php}
@item Source Control
@uref{https://github.com/didierverna/clon}
@item License
BSD
@item Description
Clon's basic@comma{} platform-independent functionality
@item Long Description

Clon's core library provides the platform/feature independent part. For a more
complete description of Clon@comma{} see the net.didierverna.clon system.
@item Dependencies
@itemize @bullet
@item
required module @t{sb-posix} (for feature @t{sbcl})
@item
@ref{go to the net․didierverna․clon․setup system, , @t{net.didierverna.clon.setup}} (system)
@end itemize
@item Source
@ref{go to the net․didierverna․clon․core․asd file, , @t{net.didierverna.clon.core.asd}} (file)
@item Directory
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/, ignore, @t{/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/}}
@item Components
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․core/package․lisp file, , @t{package.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src module, , @t{src}} (module)
@end itemize
@end table


@c -------------------------------------
@c The net.didierverna.clon.setup system
@c -------------------------------------
@node The net․didierverna․clon․setup system, , The net․didierverna․clon․core system, Systems
@section @t{net.didierverna.clon.setup}
@anchor{go to the net․didierverna․clon․setup system}@c
@systemindex{net.didierverna.clon.setup}@c
@table @strong
@item Long Name
The Command-Line Options Nuker@comma{} setup library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/clon.php}
@item Source Control
@uref{https://github.com/didierverna/clon}
@item License
BSD
@item Description
Clon's preload setup library
@item Long Description

The Clon setup library provides support for various preload configuration
parameters and meta-utilities. For a more complete description of Clon@comma{}
see the `net.didierverna.clon' system.
@item Dependency
@t{named-readtables}
@item Source
@ref{go to the net․didierverna․clon․setup․asd file, , @t{net.didierverna.clon.setup.asd}} (file)
@item Directory
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/setup/, ignore, @t{/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/setup/}}
@item Components
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․setup/package․lisp file, , @t{package.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․setup/src module, , @t{src}} (module)
@end itemize
@end table



@c ====================================================================
@c Modules
@c ====================================================================
@node Modules, Files, Systems, Top
@chapter Modules
Modules are listed depth-first from the system components tree.

@menu
* The net.didierverna.clon.core/src module: The net․didierverna․clon․core/src module.
* The net.didierverna.clon.core/src/options module: The net․didierverna․clon․core/src/options module.
* The net.didierverna.clon.core/src/retrieval module: The net․didierverna․clon․core/src/retrieval module.
* The net.didierverna.clon.core/src/output module: The net․didierverna․clon․core/src/output module.
* The net.didierverna.clon.setup/src module: The net․didierverna․clon․setup/src module.
@end menu


@c ----------------------------------------
@c The net.didierverna.clon.core/src module
@c ----------------------------------------
@node The net․didierverna․clon․core/src module, The net․didierverna․clon․core/src/options module, Modules, Modules
@section @t{net.didierverna.clon.core/src}
@anchor{go to the net․didierverna․clon․core/src module}@c
@moduleindex{net.didierverna.clon.core/src}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/package․lisp file, , @t{package.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core system, , @t{net.didierverna.clon.core}} (system)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/, ignore, @t{core/src/}}
@item Components
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/item․lisp file, , @t{item.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/text․lisp file, , @t{text.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item
@ref{go to the net․didierverna․clon․core/src/container․lisp file, , @t{container.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/group․lisp file, , @t{group.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/retrieval module, , @t{retrieval}} (module)
@item
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/output module, , @t{output}} (module)
@item
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end itemize
@end table


@c ------------------------------------------------
@c The net.didierverna.clon.core/src/options module
@c ------------------------------------------------
@node The net․didierverna․clon․core/src/options module, The net․didierverna․clon․core/src/retrieval module, The net․didierverna․clon․core/src module, Modules
@section @t{net.didierverna.clon.core/src/options}
@anchor{go to the net․didierverna․clon․core/src/options module}@c
@moduleindex{net.didierverna.clon.core/src/options}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/text․lisp file, , @t{text.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/, ignore, @t{core/src/options/}}
@item Components
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/flag․lisp file, , @t{flag.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/negatable․lisp file, , @t{negatable.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/switch-base․lisp file, , @t{switch-base.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/switch․lisp file, , @t{switch.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/stropt․lisp file, , @t{stropt.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/lispobj․lisp file, , @t{lispobj.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/path․lisp file, , @t{path.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/enum-base․lisp file, , @t{enum-base.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/enum․lisp file, , @t{enum.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/xswitch․lisp file, , @t{xswitch.lisp}} (file)
@end itemize
@end table


@c --------------------------------------------------
@c The net.didierverna.clon.core/src/retrieval module
@c --------------------------------------------------
@node The net․didierverna․clon․core/src/retrieval module, The net․didierverna․clon․core/src/output module, The net․didierverna․clon․core/src/options module, Modules
@section @t{net.didierverna.clon.core/src/retrieval}
@anchor{go to the net․didierverna․clon․core/src/retrieval module}@c
@moduleindex{net.didierverna.clon.core/src/retrieval}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Parent
@ref{go to the net․didierverna․clon․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/retrieval/, ignore, @t{core/src/retrieval/}}
@item Components
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/retrieval/environ․lisp file, , @t{environ.lisp}} (file)
@end itemize
@end table


@c -----------------------------------------------
@c The net.didierverna.clon.core/src/output module
@c -----------------------------------------------
@node The net․didierverna․clon․core/src/output module, The net․didierverna․clon․setup/src module, The net․didierverna․clon․core/src/retrieval module, Modules
@section @t{net.didierverna.clon.core/src/output}
@anchor{go to the net․didierverna․clon․core/src/output module}@c
@moduleindex{net.didierverna.clon.core/src/output}@c
@table @strong
@item Dependencies
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/retrieval module, , @t{retrieval}} (module)
@end itemize
@item Parent
@ref{go to the net․didierverna․clon․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/output/, ignore, @t{core/src/output/}}
@item Components
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end itemize
@end table


@c -----------------------------------------
@c The net.didierverna.clon.setup/src module
@c -----------------------------------------
@node The net․didierverna․clon․setup/src module, , The net․didierverna․clon․core/src/output module, Modules
@section @t{net.didierverna.clon.setup/src}
@anchor{go to the net․didierverna․clon․setup/src module}@c
@moduleindex{net.didierverna.clon.setup/src}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․setup/package․lisp file, , @t{package.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․setup system, , @t{net.didierverna.clon.setup}} (system)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/setup/src/, ignore, @t{setup/src/}}
@item Components
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․setup/src/version․lisp file, , @t{version.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․setup/src/configuration․lisp file, , @t{configuration.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․setup/src/readtable․lisp file, , @t{readtable.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․setup/src/termio․lisp file, , @t{termio.lisp}} (file)
@end itemize
@end table



@c ====================================================================
@c Files
@c ====================================================================
@node Files, Packages, Modules, Top
@chapter Files
Files are sorted by type and then listed depth-first from the systems
components trees.

@menu
* Lisp files::
@end menu


@c ----------
@c Lisp files
@c ----------
@node Lisp files, , Files, Files
@section Lisp
@menu
* The net.didierverna.clon.asd file: The net․didierverna․clon․asd file.
* The net.didierverna.clon.termio.asd file: The net․didierverna․clon․termio․asd file.
* The net.didierverna.clon.core.asd file: The net․didierverna․clon․core․asd file.
* The net.didierverna.clon.setup.asd file: The net․didierverna․clon․setup․asd file.
* The net.didierverna.clon.termio/sbcl/constants.lisp file: The net․didierverna․clon․termio/sbcl/constants․lisp file.
* The net.didierverna.clon.termio/termio.lisp file: The net․didierverna․clon․termio/termio․lisp file.
* The net.didierverna.clon.core/package.lisp file: The net․didierverna․clon․core/package․lisp file.
* The net.didierverna.clon.core/src/util.lisp file: The net․didierverna․clon․core/src/util․lisp file.
* The net.didierverna.clon.core/src/item.lisp file: The net․didierverna․clon․core/src/item․lisp file.
* The net.didierverna.clon.core/src/text.lisp file: The net․didierverna․clon․core/src/text․lisp file.
* The net.didierverna.clon.core/src/options/option.lisp file: The net․didierverna․clon․core/src/options/option․lisp file.
* The net.didierverna.clon.core/src/options/flag.lisp file: The net․didierverna․clon․core/src/options/flag․lisp file.
* The net.didierverna.clon.core/src/options/valued.lisp file: The net․didierverna․clon․core/src/options/valued․lisp file.
* The net.didierverna.clon.core/src/options/negatable.lisp file: The net․didierverna․clon․core/src/options/negatable․lisp file.
* The net.didierverna.clon.core/src/options/switch-base.lisp file: The net․didierverna․clon․core/src/options/switch-base․lisp file.
* The net.didierverna.clon.core/src/options/switch.lisp file: The net․didierverna․clon․core/src/options/switch․lisp file.
* The net.didierverna.clon.core/src/options/stropt.lisp file: The net․didierverna․clon․core/src/options/stropt․lisp file.
* The net.didierverna.clon.core/src/options/lispobj.lisp file: The net․didierverna․clon․core/src/options/lispobj․lisp file.
* The net.didierverna.clon.core/src/options/path.lisp file: The net․didierverna․clon․core/src/options/path․lisp file.
* The net.didierverna.clon.core/src/options/enum-base.lisp file: The net․didierverna․clon․core/src/options/enum-base․lisp file.
* The net.didierverna.clon.core/src/options/enum.lisp file: The net․didierverna․clon․core/src/options/enum․lisp file.
* The net.didierverna.clon.core/src/options/xswitch.lisp file: The net․didierverna․clon․core/src/options/xswitch․lisp file.
* The net.didierverna.clon.core/src/container.lisp file: The net․didierverna․clon․core/src/container․lisp file.
* The net.didierverna.clon.core/src/group.lisp file: The net․didierverna․clon․core/src/group․lisp file.
* The net.didierverna.clon.core/src/retrieval/cmdline.lisp file: The net․didierverna․clon․core/src/retrieval/cmdline․lisp file.
* The net.didierverna.clon.core/src/retrieval/environ.lisp file: The net․didierverna․clon․core/src/retrieval/environ․lisp file.
* The net.didierverna.clon.core/src/synopsis.lisp file: The net․didierverna․clon․core/src/synopsis․lisp file.
* The net.didierverna.clon.core/src/output/face.lisp file: The net․didierverna․clon․core/src/output/face․lisp file.
* The net.didierverna.clon.core/src/output/sheet.lisp file: The net․didierverna․clon․core/src/output/sheet․lisp file.
* The net.didierverna.clon.core/src/context.lisp file: The net․didierverna․clon․core/src/context․lisp file.
* The net.didierverna.clon.setup/package.lisp file: The net․didierverna․clon․setup/package․lisp file.
* The net.didierverna.clon.setup/src/version.lisp file: The net․didierverna․clon․setup/src/version․lisp file.
* The net.didierverna.clon.setup/src/configuration.lisp file: The net․didierverna․clon․setup/src/configuration․lisp file.
* The net.didierverna.clon.setup/src/readtable.lisp file: The net․didierverna․clon․setup/src/readtable․lisp file.
* The net.didierverna.clon.setup/src/termio.lisp file: The net․didierverna․clon․setup/src/termio․lisp file.
@end menu

@node The net․didierverna․clon․asd file, The net․didierverna․clon․termio․asd file, Lisp files, Lisp files
@subsection @t{net.didierverna.clon.asd}
@anchor{go to the net․didierverna․clon․asd file}@c
@lispfileindex{net.didierverna.clon.asd}@c
@table @strong
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/net.didierverna.clon.asd, ignore, @t{net.didierverna.clon.asd}}
@item Systems
@ref{go to the net․didierverna․clon system, , @t{net.didierverna.clon}} (system)
@end table

@node The net․didierverna․clon․termio․asd file, The net․didierverna․clon․core․asd file, The net․didierverna․clon․asd file, Lisp files
@subsection @t{net.didierverna.clon.termio.asd}
@anchor{go to the net․didierverna․clon․termio․asd file}@c
@lispfileindex{net.didierverna.clon.termio.asd}@c
@table @strong
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/net.didierverna.clon.termio.asd, ignore, @t{termio/net.didierverna.clon.termio.asd}}
@item Systems
@ref{go to the net․didierverna․clon․termio system, , @t{net.didierverna.clon.termio}} (system)
@end table

@node The net․didierverna․clon․core․asd file, The net․didierverna․clon․setup․asd file, The net․didierverna․clon․termio․asd file, Lisp files
@subsection @t{net.didierverna.clon.core.asd}
@anchor{go to the net․didierverna․clon․core․asd file}@c
@lispfileindex{net.didierverna.clon.core.asd}@c
@table @strong
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/net.didierverna.clon.core.asd, ignore, @t{core/net.didierverna.clon.core.asd}}
@item Systems
@ref{go to the net․didierverna․clon․core system, , @t{net.didierverna.clon.core}} (system)
@end table

@node The net․didierverna․clon․setup․asd file, The net․didierverna․clon․termio/sbcl/constants․lisp file, The net․didierverna․clon․core․asd file, Lisp files
@subsection @t{net.didierverna.clon.setup.asd}
@anchor{go to the net․didierverna․clon․setup․asd file}@c
@lispfileindex{net.didierverna.clon.setup.asd}@c
@table @strong
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/setup/net.didierverna.clon.setup.asd, ignore, @t{setup/net.didierverna.clon.setup.asd}}
@item Systems
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․setup/termio system, , @t{net.didierverna.clon.setup/termio}} (system)
@item
@ref{go to the net․didierverna․clon․setup system, , @t{net.didierverna.clon.setup}} (system)
@end itemize
@end table

@node The net․didierverna․clon․termio/sbcl/constants․lisp file, The net․didierverna․clon․termio/termio․lisp file, The net․didierverna․clon․setup․asd file, Lisp files
@subsection @t{net.didierverna.clon.termio/sbcl/constants.lisp}
@anchor{go to the net․didierverna․clon․termio/sbcl/constants․lisp file}@c
@lispfileindex{net.didierverna.clon.termio/sbcl/constants.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․clon․termio system, , @t{net.didierverna.clon.termio}} (system)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp, ignore, @t{termio/sbcl/constants.lisp}}
@end table

@node The net․didierverna․clon․termio/termio․lisp file, The net․didierverna․clon․core/package․lisp file, The net․didierverna․clon․termio/sbcl/constants․lisp file, Lisp files
@subsection @t{net.didierverna.clon.termio/termio.lisp}
@anchor{go to the net․didierverna․clon․termio/termio․lisp file}@c
@lispfileindex{net.didierverna.clon.termio/termio.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․termio/sbcl/constants․lisp file, , @t{sbcl/constants.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․termio system, , @t{net.didierverna.clon.termio}} (system)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/termio.lisp, ignore, @t{termio/termio.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE generic function, , @t{stream-ioctl-output-handle}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE COMMON-LISP∶∶SYNONYM-STREAM method, , @t{stream-ioctl-output-handle}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE COMMON-LISP∶∶TWO-WAY-STREAM method, , @t{stream-ioctl-output-handle}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE SB-SYS∶∶FD-STREAM method, , @t{stream-ioctl-output-handle}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE COMMON-LISP∶∶T method, , @t{stream-ioctl-output-handle}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-LINE-WIDTH function, , @t{stream-line-width}} (function)
@end itemize
@end table

@node The net․didierverna․clon․core/package․lisp file, The net․didierverna․clon․core/src/util․lisp file, The net․didierverna․clon․termio/termio․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/package.lisp}
@anchor{go to the net․didierverna․clon․core/package․lisp file}@c
@lispfileindex{net.didierverna.clon.core/package.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․clon․core system, , @t{net.didierverna.clon.core}} (system)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/package.lisp, ignore, @t{core/package.lisp}}
@item Packages
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Exported Definitions
@ref{go to the NET․DIDIERVERNA․CLON∶∶NICKNAME-PACKAGE function, , @t{nickname-package}} (function)
@end table

@node The net․didierverna․clon․core/src/util․lisp file, The net․didierverna․clon․core/src/item․lisp file, The net․didierverna․clon․core/package․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/util.lisp}
@anchor{go to the net․didierverna․clon․core/src/util․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/util.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․clon․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/util.lisp, ignore, @t{core/src/util.lisp}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶*EXECUTABLEP* special variable, , @t{*executablep*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE function, , @t{cmdline}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DUMP macro, , @t{dump}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶EXECUTABLEP function, , @t{executablep}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶EXIT function, , @t{exit}} (function)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ABSTRACT-CLASS class, , @t{abstract-class}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ACCUMULATE macro, , @t{accumulate}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BEGINNING-OF-STRING-P function, , @t{beginning-of-string-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSEST-MATCH function, , @t{closest-match}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COMPLETE-STRING function, , @t{complete-string}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-INSTANCE generic function, , @t{copy-instance}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-INSTANCE COMMON-LISP∶∶T method, , @t{copy-instance}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DECLARE-VALID-SUPERCLASS macro, , @t{declare-valid-superclass}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFABSTRACT macro, , @t{defabstract}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ECOND macro, , @t{econd}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENDPUSH macro, , @t{endpush}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ERROR-STRING NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY method, , @t{error-string}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ERROR-STRING❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY method, , @t{(setf error-string)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GETENV function, , @t{getenv}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY function, , @t{home-directory}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY condition, , @t{home-directory}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LIST-TO-STRING function, , @t{list-to-string}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MACOSP function, , @t{macosp}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAYBE-PUSH macro, , @t{maybe-push}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PUTENV function, , @t{putenv}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REMOVE-KEYS function, , @t{remove-keys}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REPLACE-IN-KEYS macro, , @t{replace-in-keys}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REPLACE-KEY function, , @t{replace-key}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REPLACE-KEYS function, , @t{replace-keys}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SELECT-KEYS function, , @t{select-keys}} (function)
@end itemize
@end table

@node The net․didierverna․clon․core/src/item․lisp file, The net․didierverna․clon․core/src/text․lisp file, The net․didierverna․clon․core/src/util․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/item.lisp}
@anchor{go to the net․didierverna․clon․core/src/item․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/item.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/item.lisp, ignore, @t{core/src/item.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC generic function, , @t{help-spec}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶ITEM AROUND method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIDDENP NET․DIDIERVERNA․CLON∶∶ITEM method, , @t{hiddenp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM class, , @t{item}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TRAVERSEDP NET․DIDIERVERNA․CLON∶∶ITEM method, , @t{traversedp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF TRAVERSEDP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶ITEM method, , @t{(setf traversedp)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE generic function, , @t{untraverse}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶ITEM AFTER method, , @t{untraverse}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/text․lisp file, The net․didierverna․clon․core/src/options/option․lisp file, The net․didierverna․clon․core/src/item․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/text.lisp}
@anchor{go to the net․didierverna․clon․core/src/text․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/text.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/item․lisp file, , @t{item.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/text.lisp, ignore, @t{core/src/text.lisp}}
@item Exported Definitions
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-TEXT function, , @t{make-text}} (function)
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTENTS NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{contents}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-TEXT function, , @t{make-internal-text}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TEXT class, , @t{text}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{untraverse}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/option․lisp file, The net․didierverna․clon․core/src/options/flag․lisp file, The net․didierverna․clon․core/src/text․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/option.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/option․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/option.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/option.lisp, ignore, @t{core/src/options/option.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH generic function, , @t{check-name-clash}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶TEXT COMMON-LISP∶∶T method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶OPTION NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DESCRIPTION NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{description}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{env-var}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LONG-NAME NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{long-name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MATCH-OPTION function, , @t{match-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK-CHAR generic function, , @t{negated-pack-char}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK-CHAR NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{negated-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION NET․DIDIERVERNA․CLON∶∶OPTION-ERROR method, , @t{option}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION class, , @t{option}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-ABBREVIATION-DISTANCE function, , @t{option-abbreviation-distance}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-ERROR condition, , @t{option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-STICKY-DISTANCE generic function, , @t{option-sticky-distance}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-STICKY-DISTANCE NET․DIDIERVERNA․CLON∶∶OPTION COMMON-LISP∶∶T method, , @t{option-sticky-distance}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-CHAR function, , @t{potential-pack-char}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-NAME NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{short-name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK-CHAR generic function, , @t{short-pack-char}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK-CHAR NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{short-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{untraverse}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/flag․lisp file, The net․didierverna․clon․core/src/options/valued․lisp file, The net․didierverna․clon․core/src/options/option․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/flag.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/flag․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/flag.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/flag.lisp, ignore, @t{core/src/options/flag.lisp}}
@item Exported Definitions
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FLAG function, , @t{make-flag}} (function)
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FLAG class, , @t{flag}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-FLAG function, , @t{make-internal-flag}} (function)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/valued․lisp file, The net․didierverna․clon․core/src/options/negatable․lisp file, The net․didierverna․clon․core/src/options/flag․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/valued.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/valued․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/valued.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/valued.lisp, ignore, @t{core/src/options/valued.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶*ITEM-NAMES* special variable, , @t{*item-names*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT method, , @t{argument}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-NAME NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{argument-name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-REQUIRED-P NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{argument-required-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK generic function, , @t{check}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COMMENT NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT method, , @t{comment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COMMENT NET․DIDIERVERNA․CLON∶∶INVALID-VALUE method, , @t{comment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT generic function, , @t{convert}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFAULT-VALUE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{default-value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFOPTION macro, , @t{defoption}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FALLBACK-VALUE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{fallback-value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT condition, , @t{invalid-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-VALUE condition, , @t{invalid-value}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-STICKY-DISTANCE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method, , @t{option-sticky-distance}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-ARGUMENT function, , @t{read-argument}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-VALUE function, , @t{read-value}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CHECK function, , @t{restartable-check}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CONVERT function, , @t{restartable-convert}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK-CHAR NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{short-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-SYNTAX-HELP-SPEC-PREFIX generic function, , @t{short-syntax-help-spec-prefix}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-SYNTAX-HELP-SPEC-PREFIX NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{short-syntax-help-spec-prefix}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY generic function, , @t{stringify}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUE NET․DIDIERVERNA․CLON∶∶INVALID-VALUE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUED-OPTION class, , @t{valued-option}} (class)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/negatable․lisp file, The net․didierverna․clon․core/src/options/switch-base․lisp file, The net․didierverna․clon․core/src/options/valued․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/negatable.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/negatable․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/negatable.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/negatable.lisp, ignore, @t{core/src/options/negatable.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATABLE class, , @t{negatable}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK-CHAR NET․DIDIERVERNA․CLON∶∶NEGATABLE method, , @t{negated-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-SYNTAX-HELP-SPEC-PREFIX NET․DIDIERVERNA․CLON∶∶NEGATABLE method, , @t{short-syntax-help-spec-prefix}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/switch-base․lisp file, The net․didierverna․clon․core/src/options/switch․lisp file, The net․didierverna․clon․core/src/options/negatable․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/switch-base.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/switch-base․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/switch-base.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/options/negatable․lisp file, , @t{negatable.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/switch-base.lisp, ignore, @t{core/src/options/switch-base.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLE NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{argument-style}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{argument-styles}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ARGUMENT-STYLES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{(setf argument-styles)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NO-VALUES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{no-values}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF NO-VALUES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{(setf no-values)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SWITCH-BASE class, , @t{switch-base}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶YES-VALUES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{yes-values}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF YES-VALUES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{(setf yes-values)}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/switch․lisp file, The net․didierverna․clon․core/src/options/stropt․lisp file, The net․didierverna․clon․core/src/options/switch-base․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/switch.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/switch․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/switch.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/options/switch-base․lisp file, , @t{switch-base.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/switch.lisp, ignore, @t{core/src/options/switch.lisp}}
@item Exported Definitions
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-SWITCH function, , @t{make-switch}} (function)
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-SWITCH function, , @t{make-internal-switch}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SWITCH class, , @t{switch}} (class)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/stropt․lisp file, The net․didierverna․clon․core/src/options/lispobj․lisp file, The net․didierverna․clon․core/src/options/switch․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/stropt.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/stropt․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/stropt.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/stropt.lisp, ignore, @t{core/src/options/stropt.lisp}}
@item Exported Definitions
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-STROPT function, , @t{make-stropt}} (function)
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-STROPT function, , @t{make-internal-stropt}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STROPT class, , @t{stropt}} (class)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/lispobj․lisp file, The net․didierverna․clon․core/src/options/path․lisp file, The net․didierverna․clon․core/src/options/stropt․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/lispobj.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/lispobj․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/lispobj.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/lispobj.lisp, ignore, @t{core/src/options/lispobj.lisp}}
@item Exported Definitions
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-LISPOBJ function, , @t{make-lispobj}} (function)
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LISPOBJ class, , @t{lispobj}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-LISPOBJ function, , @t{make-internal-lispobj}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TYPESPEC NET․DIDIERVERNA․CLON∶∶LISPOBJ method, , @t{typespec}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/path․lisp file, The net․didierverna․clon․core/src/options/enum-base․lisp file, The net․didierverna․clon․core/src/options/lispobj․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/path.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/path․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/path.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/path.lisp, ignore, @t{core/src/options/path.lisp}}
@item Exported Definitions
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-PATH function, , @t{make-path}} (function)
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DIRECTORY-PATHNAME-P function, , @t{directory-pathname-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-PATH function, , @t{make-internal-path}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PATH class, , @t{path}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PATH-TYPE NET․DIDIERVERNA․CLON∶∶PATH method, , @t{path-type}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PATHNAME-COMPONENT-NULL-P function, , @t{pathname-component-null-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SPLIT-PATH function, , @t{split-path}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method, , @t{stringify}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/enum-base․lisp file, The net․didierverna․clon․core/src/options/enum․lisp file, The net․didierverna․clon․core/src/options/path․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/enum-base.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/enum-base․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/enum-base.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/enum-base.lisp, ignore, @t{core/src/options/enum-base.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM NET․DIDIERVERNA․CLON∶∶ENUM-BASE method, , @t{enum}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM-BASE class, , @t{enum-base}} (class)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/enum․lisp file, The net․didierverna․clon․core/src/options/xswitch․lisp file, The net․didierverna․clon․core/src/options/enum-base․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/enum.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/enum․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/enum.lisp}@c
@table @strong
@item Dependencies
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/enum-base․lisp file, , @t{enum-base.lisp}} (file)
@end itemize
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/enum.lisp, ignore, @t{core/src/options/enum.lisp}}
@item Exported Definitions
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-ENUM function, , @t{make-enum}} (function)
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM class, , @t{enum}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-ENUM function, , @t{make-internal-enum}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method, , @t{stringify}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/options/xswitch․lisp file, The net․didierverna․clon․core/src/container․lisp file, The net․didierverna․clon․core/src/options/enum․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/options/xswitch.lisp}
@anchor{go to the net․didierverna․clon․core/src/options/xswitch․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/options/xswitch.lisp}@c
@table @strong
@item Dependencies
@itemize @bullet
@item
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/switch-base․lisp file, , @t{switch-base.lisp}} (file)
@item
@ref{go to the net․didierverna․clon․core/src/options/enum-base․lisp file, , @t{enum-base.lisp}} (file)
@end itemize
@item Parent
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/options/xswitch.lisp, ignore, @t{core/src/options/xswitch.lisp}}
@item Exported Definitions
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-XSWITCH function, , @t{make-xswitch}} (function)
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-XSWITCH function, , @t{make-internal-xswitch}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶XSWITCH class, , @t{xswitch}} (class)
@end itemize
@end table

@node The net․didierverna․clon․core/src/container․lisp file, The net․didierverna․clon․core/src/group․lisp file, The net․didierverna․clon․core/src/options/xswitch․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/container.lisp}
@anchor{go to the net․didierverna․clon․core/src/container․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/container.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/options module, , @t{options}} (module)
@item Parent
@ref{go to the net․didierverna․clon․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/container.lisp, ignore, @t{core/src/container.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶CONTAINER NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶CONTAINER COMMON-LISP∶∶T method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTAINER class, , @t{container}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEMS NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{items}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{untraverse}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/group․lisp file, The net․didierverna․clon․core/src/retrieval/cmdline․lisp file, The net․didierverna․clon․core/src/container․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/group.lisp}
@anchor{go to the net․didierverna․clon․core/src/group․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/group.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/container․lisp file, , @t{container.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/group.lisp, ignore, @t{core/src/group.lisp}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFGROUP macro, , @t{defgroup}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-GROUP function, , @t{make-group}} (function)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶%DEFGROUP macro, , @t{%defgroup}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GROUP class, , @t{group}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HEADER NET․DIDIERVERNA․CLON∶∶GROUP method, , @t{header}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶GROUP method, , @t{help-spec}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/retrieval/cmdline․lisp file, The net․didierverna․clon․core/src/retrieval/environ․lisp file, The net․didierverna․clon․core/src/group․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/retrieval/cmdline.lisp}
@anchor{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/retrieval/cmdline.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․clon․core/src/retrieval module, , @t{retrieval}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/retrieval/cmdline.lisp, ignore, @t{core/src/retrieval/cmdline.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶SPURIOUS-CMDLINE-ARGUMENT method, , @t{argument}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-POPABLE-P function, , @t{argument-popable-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-CONVERT function, , @t{cmdline-convert}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR condition, , @t{cmdline-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR condition, , @t{cmdline-option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-CMDLINE-ARGUMENT condition, , @t{invalid-cmdline-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-NEGATED-SYNTAX condition, , @t{invalid-negated-syntax}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR method, , @t{item}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAYBE-POP-ARGUMENT macro, , @t{maybe-pop-argument}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MISSING-CMDLINE-ARGUMENT condition, , @t{missing-cmdline-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR method, , @t{name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-CALL-P function, , @t{option-call-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CMDLINE-CONVERT function, , @t{restartable-cmdline-convert}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-INVALID-NEGATED-SYNTAX-ERROR macro, , @t{restartable-invalid-negated-syntax-error}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-SPURIOUS-CMDLINE-ARGUMENT-ERROR macro, , @t{restartable-spurious-cmdline-argument-error}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-LONG-CALL generic function, , @t{retrieve-from-long-call}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-LONG-CALL NET․DIDIERVERNA․CLON∶∶OPTION COMMON-LISP∶∶T method, , @t{retrieve-from-long-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-LONG-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method, , @t{retrieve-from-long-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL generic function, , @t{retrieve-from-negated-call}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{retrieve-from-negated-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{retrieve-from-negated-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶NEGATABLE method, , @t{retrieve-from-negated-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-SHORT-CALL generic function, , @t{retrieve-from-short-call}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-SHORT-CALL NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{retrieve-from-short-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-SHORT-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{retrieve-from-short-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SPURIOUS-CMDLINE-ARGUMENT condition, , @t{spurious-cmdline-argument}} (condition)
@end itemize
@end table

@node The net․didierverna․clon․core/src/retrieval/environ․lisp file, The net․didierverna․clon․core/src/synopsis․lisp file, The net․didierverna․clon․core/src/retrieval/cmdline․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/retrieval/environ.lisp}
@anchor{go to the net․didierverna․clon․core/src/retrieval/environ․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/retrieval/environ.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․clon․core/src/retrieval module, , @t{retrieval}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/retrieval/environ.lisp, ignore, @t{core/src/retrieval/environ.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAL NET․DIDIERVERNA․CLON∶∶INVALID-ENVIRONMENT-VALUE method, , @t{env-val}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR NET․DIDIERVERNA․CLON∶∶ENVIRONMENT-ERROR method, , @t{env-var}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENT-CONVERT function, , @t{environment-convert}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENT-ERROR condition, , @t{environment-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENTAL-OPTION-ERROR condition, , @t{environmental-option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-ENVIRONMENT-VALUE condition, , @t{invalid-environment-value}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-ENV-VAL function, , @t{read-env-val}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-ENVIRONMENT-CONVERT function, , @t{restartable-environment-convert}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT generic function, , @t{retrieve-from-environment}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method, , @t{retrieve-from-environment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT NET․DIDIERVERNA․CLON∶∶FLAG COMMON-LISP∶∶T method, , @t{retrieve-from-environment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method, , @t{retrieve-from-environment}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/synopsis․lisp file, The net․didierverna․clon․core/src/output/face․lisp file, The net․didierverna․clon․core/src/retrieval/environ․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/synopsis.lisp}
@anchor{go to the net․didierverna․clon․core/src/synopsis․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/synopsis.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/group․lisp file, , @t{group.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/synopsis.lisp, ignore, @t{core/src/synopsis.lisp}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶*SYNOPSIS* special variable, , @t{*synopsis*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFSYNOPSIS macro, , @t{defsynopsis}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-SYNOPSIS function, , @t{make-synopsis}} (function)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLON-OPTIONS-GROUP NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{clon-options-group}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DO-OPTIONS macro, , @t{do-options}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS generic function, , @t{mapoptions}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T COMMON-LISP∶∶T method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶ITEM AFTER method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{negated-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POSTFIX NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{postfix}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{potential-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-P generic function, , @t{potential-pack-p}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-P COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{potential-pack-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{short-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SYNOPSIS class, , @t{synopsis}} (class)
@end itemize
@end table

@node The net․didierverna․clon․core/src/output/face․lisp file, The net․didierverna․clon․core/src/output/sheet․lisp file, The net․didierverna․clon․core/src/synopsis․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/output/face.lisp}
@anchor{go to the net․didierverna․clon․core/src/output/face․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/output/face.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․clon․core/src/output module, , @t{output}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/output/face.lisp, ignore, @t{core/src/output/face.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶*HIGHLIGHT-PROPERTIES* special variable, , @t{*highlight-properties*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ADD-SUBFACE function, , @t{add-subface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ATTACH-FACE-TREE function, , @t{attach-face-tree}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BACKGROUND NET․DIDIERVERNA․CLON∶∶FACE method, , @t{background}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BLINK NET․DIDIERVERNA․CLON∶∶FACE method, , @t{blink}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BOTTOM-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{bottom-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONCEALEDP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{concealedp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CROSSED-OUT-P NET․DIDIERVERNA․CLON∶∶FACE method, , @t{crossed-out-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FACE class, , @t{face}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FACE-HIGHLIGHT-PROPERTY-SET-P function, , @t{face-highlight-property-set-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FACE-HIGHLIGHT-PROPERTY-VALUE function, , @t{face-highlight-property-value}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FOREGROUND NET․DIDIERVERNA․CLON∶∶FACE method, , @t{foreground}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAMEDP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{framedp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INTENSITY NET․DIDIERVERNA․CLON∶∶FACE method, , @t{intensity}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVERSEP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{inversep}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITALICP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{italicp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM-SEPARATOR NET․DIDIERVERNA․CLON∶∶FACE method, , @t{item-separator}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LEFT-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{left-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FACE-TREE generic function, , @t{make-face-tree}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FACE-TREE COMMON-LISP∶∶LIST method, , @t{make-face-tree}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FACE-TREE COMMON-LISP∶∶SYMBOL method, , @t{make-face-tree}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-RAW-FACE-TREE function, , @t{make-raw-face-tree}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶FACE method, , @t{name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PARENT NET․DIDIERVERNA․CLON∶∶FACE method, , @t{parent}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PARENT-GENERATION function, , @t{parent-generation}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RIGHT-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{right-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-BRANCH function, , @t{search-branch}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-FACE function, , @t{search-face}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SUBFACE generic function, , @t{subface}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SUBFACE COMMON-LISP∶∶T COMMON-LISP∶∶SYMBOL method, , @t{subface}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SUBFACE COMMON-LISP∶∶T COMMON-LISP∶∶LIST method, , @t{subface}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SUBFACES NET․DIDIERVERNA․CLON∶∶FACE method, , @t{subfaces}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{top-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNDERLINE NET․DIDIERVERNA․CLON∶∶FACE method, , @t{underline}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VISIBLEP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{visiblep}} (method)
@end itemize
@end table

@node The net․didierverna․clon․core/src/output/sheet․lisp file, The net․didierverna․clon․core/src/context․lisp file, The net․didierverna․clon․core/src/output/face․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/output/sheet.lisp}
@anchor{go to the net․didierverna․clon․core/src/output/sheet․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/output/sheet.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․core/src/output module, , @t{output}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/output/sheet.lisp, ignore, @t{core/src/output/sheet.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶AVAILABLE-RIGHT-MARGIN function, , @t{available-right-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-FRAME generic function, , @t{close-frame}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶FRAME PROGN method, , @t{close-frame}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME PROGN method, , @t{close-frame}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-LINE function, , @t{close-line}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-SFACE function, , @t{close-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COLUMN NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{column}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF COLUMN❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{(setf column)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-FRAME function, , @t{copy-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-HIGHLIGHT-FRAME function, , @t{copy-highlight-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-HIGHLIGHT-PROPERTY-INSTANCE function, , @t{copy-highlight-property-instance}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-FRAME function, , @t{current-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-LEFT-MARGIN function, , @t{current-left-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-RIGHT-MARGIN function, , @t{current-right-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-SFACE function, , @t{current-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FIND-SFACE function, , @t{find-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FLUSH-SHEET function, , @t{flush-sheet}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME structure, , @t{frame}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME-LEFT-MARGIN function, , @t{frame-left-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-LEFT-MARGIN❩ function, , @t{(setf frame-left-margin)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME-P function, , @t{frame-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME-RIGHT-MARGIN function, , @t{frame-right-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-RIGHT-MARGIN❩ function, , @t{(setf frame-right-margin)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME-SFACE function, , @t{frame-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-SFACE❩ function, , @t{(setf frame-sface)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAMES NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{frames}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAMES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{(setf frames)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GET-BOTTOM-PADDING generic function, , @t{get-bottom-padding}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GET-BOTTOM-PADDING COMMON-LISP∶∶T COMMON-LISP∶∶T method, , @t{get-bottom-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GET-BOTTOM-PADDING COMMON-LISP∶∶T COMMON-LISP∶∶LIST method, , @t{get-bottom-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GET-TOP-PADDING function, , @t{get-top-padding}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-ITEMS-WILL-PRINT function, , @t{help-spec-items-will-print}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT generic function, , @t{help-spec-will-print}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method, , @t{help-spec-will-print}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT COMMON-LISP∶∶T COMMON-LISP∶∶T method, , @t{help-spec-will-print}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT COMMON-LISP∶∶T COMMON-LISP∶∶LIST method, , @t{help-spec-will-print}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME structure, , @t{highlight-frame}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-HIGHLIGHT-PROPERTY-INSTANCES function, , @t{highlight-frame-highlight-property-instances}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-HIGHLIGHT-PROPERTY-INSTANCES❩ function, , @t{(setf highlight-frame-highlight-property-instances)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-LEFT-MARGIN function, , @t{highlight-frame-left-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-LEFT-MARGIN❩ function, , @t{(setf highlight-frame-left-margin)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-P function, , @t{highlight-frame-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-RIGHT-MARGIN function, , @t{highlight-frame-right-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-RIGHT-MARGIN❩ function, , @t{(setf highlight-frame-right-margin)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-SFACE function, , @t{highlight-frame-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-SFACE❩ function, , @t{(setf highlight-frame-sface)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-ECASE macro, , @t{highlight-property-ecase}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE structure, , @t{highlight-property-instance}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-ESCAPE-SEQUENCE function, , @t{highlight-property-instance-escape-sequence}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-NAME function, , @t{highlight-property-instance-name}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-PROPERTY-INSTANCE-NAME❩ function, , @t{(setf highlight-property-instance-name)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-P function, , @t{highlight-property-instance-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-VALUE function, , @t{highlight-property-instance-value}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-PROPERTY-INSTANCE-VALUE❩ function, , @t{(setf highlight-property-instance-value)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHTP NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{highlightp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{line-width}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FRAME function, , @t{make-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-HIGHLIGHT-FRAME function, , @t{make-highlight-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-HIGHLIGHT-PROPERTY-INSTANCE function, , @t{make-highlight-property-instance}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-RAW-SFACE function, , @t{make-raw-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-SHEET function, , @t{make-sheet}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAP-FRAMES macro, , @t{map-frames}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-FRAME generic function, , @t{open-frame}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶FRAME PROGN method, , @t{open-frame}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME PROGN method, , @t{open-frame}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-LINE function, , @t{open-line}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-NEXT-LINE function, , @t{open-next-line}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-SFACE function, , @t{open-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OUTPUT-STREAM NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{output-stream}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POP-FRAME function, , @t{pop-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINC-CHAR function, , @t{princ-char}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINC-HIGHLIGHT-PROPERTY-INSTANCES function, , @t{princ-highlight-property-instances}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINC-SPACES function, , @t{princ-spaces}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINC-STRING function, , @t{princ-string}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-FACED-HELP-SPEC function, , @t{print-faced-help-spec}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP function, , @t{print-help}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC generic function, , @t{print-help-spec}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method, , @t{print-help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶CHARACTER method, , @t{print-help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶SIMPLE-VECTOR method, , @t{print-help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶STRING method, , @t{print-help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶LIST method, , @t{print-help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-STRING function, , @t{print-string}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PUSH-FRAME function, , @t{push-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REACH-COLUMN function, , @t{reach-column}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-SFACE-TREE function, , @t{read-sface-tree}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SAFE-LEFT-MARGIN function, , @t{safe-left-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SAFE-RIGHT-MARGIN function, , @t{safe-right-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SFACE class, , @t{sface}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SFACE-TREE NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{sface-tree}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHEET class, , @t{sheet}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SIBLING NET․DIDIERVERNA․CLON∶∶SFACE method, , @t{sibling}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING COMMON-LISP∶∶LIST method, , @t{top-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING COMMON-LISP∶∶T method, , @t{top-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TRY-READ-SFACE-TREE function, , @t{try-read-sface-tree}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TRY-READ-THEME function, , @t{try-read-theme}} (function)
@end itemize
@end table

@node The net․didierverna․clon․core/src/context․lisp file, The net․didierverna․clon․setup/package․lisp file, The net․didierverna․clon․core/src/output/sheet․lisp file, Lisp files
@subsection @t{net.didierverna.clon.core/src/context.lisp}
@anchor{go to the net․didierverna․clon․core/src/context․lisp file}@c
@lispfileindex{net.didierverna.clon.core/src/context.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․core/src/output module, , @t{output}} (module)
@item Parent
@ref{go to the net․didierverna․clon․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/core/src/context.lisp, ignore, @t{core/src/context.lisp}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶*CONTEXT* special variable, , @t{*context*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTIONS-P function, , @t{cmdline-options-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-P function, , @t{cmdline-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DO-CMDLINE-OPTIONS macro, , @t{do-cmdline-options}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GETOPT function, , @t{getopt}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GETOPT-CMDLINE function, , @t{getopt-cmdline}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP function, , @t{help}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-CONTEXT function, , @t{make-context}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MULTIPLE-VALUE-GETOPT-CMDLINE macro, , @t{multiple-value-getopt-cmdline}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PROGNAME function, , @t{progname}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REMAINDER function, , @t{remainder}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶WITH-CONTEXT macro, , @t{with-context}} (macro)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR method, , @t{argument}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLON-OPTIONS-GROUP NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{clon-options-group}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-JUNK-ERROR condition, , @t{cmdline-junk-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION structure, , @t{cmdline-option}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-NAME function, , @t{cmdline-option-name}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-NAME❩ function, , @t{(setf cmdline-option-name)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-OPTION function, , @t{cmdline-option-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-OPTION❩ function, , @t{(setf cmdline-option-option)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-P function, , @t{cmdline-option-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-SOURCE function, , @t{cmdline-option-source}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-SOURCE❩ function, , @t{(setf cmdline-option-source)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-VALUE function, , @t{cmdline-option-value}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-VALUE❩ function, , @t{(setf cmdline-option-value)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTIONS NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{cmdline-options}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTIONS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{(setf cmdline-options)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTEXT class, , @t{context}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-CMDLINE-OPTION function, , @t{copy-cmdline-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ERROR-HANDLER NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{error-handler}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶EXIT-ABNORMALLY function, , @t{exit-abnormally}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{highlight}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-NEGATED-EQUAL-SYNTAX condition, , @t{invalid-negated-equal-syntax}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-SHORT-EQUAL-SYNTAX condition, , @t{invalid-short-equal-syntax}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶JUNK NET․DIDIERVERNA․CLON∶∶CMDLINE-JUNK-ERROR method, , @t{junk}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{line-width}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-CMDLINE-OPTION function, , @t{make-cmdline-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR method, , @t{name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-CALL NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-NEGATED-CALL-ERROR method, , @t{negated-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{negated-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POSTFIX NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{postfix}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-P COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{potential-pack-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-ERROR function, , @t{print-error}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-CALL function, , @t{read-call}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-LONG-NAME function, , @t{read-long-name}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTART-ON-ERROR function, , @t{restart-on-error}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CMDLINE-JUNK-ERROR function, , @t{restartable-cmdline-junk-error}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-OPTION function, , @t{search-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-OPTION-BY-ABBREVIATION function, , @t{search-option-by-abbreviation}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-OPTION-BY-NAME function, , @t{search-option-by-name}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-PATH NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{search-path}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-STICKY-OPTION function, , @t{search-sticky-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-CALL NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-SHORT-CALL-ERROR method, , @t{short-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{short-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SYNOPSIS NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{synopsis}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶THEME NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{theme}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR condition, , @t{unknown-cmdline-option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-NEGATED-CALL-ERROR condition, , @t{unrecognized-negated-call-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-SHORT-CALL-ERROR condition, , @t{unrecognized-short-call-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{untraverse}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶WITH-CONTEXT-ERROR-HANDLER macro, , @t{with-context-error-handler}} (macro)
@end itemize
@end table

@node The net․didierverna․clon․setup/package․lisp file, The net․didierverna․clon․setup/src/version․lisp file, The net․didierverna․clon․core/src/context․lisp file, Lisp files
@subsection @t{net.didierverna.clon.setup/package.lisp}
@anchor{go to the net․didierverna․clon․setup/package․lisp file}@c
@lispfileindex{net.didierverna.clon.setup/package.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․clon․setup system, , @t{net.didierverna.clon.setup}} (system)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/setup/package.lisp, ignore, @t{setup/package.lisp}}
@item Packages
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@end table

@node The net․didierverna․clon․setup/src/version․lisp file, The net․didierverna․clon․setup/src/configuration․lisp file, The net․didierverna․clon․setup/package․lisp file, Lisp files
@subsection @t{net.didierverna.clon.setup/src/version.lisp}
@anchor{go to the net․didierverna․clon․setup/src/version․lisp file}@c
@lispfileindex{net.didierverna.clon.setup/src/version.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․clon․setup/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/setup/src/version.lisp, ignore, @t{setup/src/version.lisp}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*COPYRIGHT-YEARS* special variable, , @t{*copyright-years*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-MAJOR-LEVEL* special variable, , @t{*release-major-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-MINOR-LEVEL* special variable, , @t{*release-minor-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-NAME* special variable, , @t{*release-name*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-STATUS* special variable, , @t{*release-status*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-STATUS-LEVEL* special variable, , @t{*release-status-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶VERSION function, , @t{version}} (function)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶%VERSION function, , @t{%version}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶RELEASE-STATUS-NUMBER function, , @t{release-status-number}} (function)
@end itemize
@end table

@node The net․didierverna․clon․setup/src/configuration․lisp file, The net․didierverna․clon․setup/src/readtable․lisp file, The net․didierverna․clon․setup/src/version․lisp file, Lisp files
@subsection @t{net.didierverna.clon.setup/src/configuration.lisp}
@anchor{go to the net․didierverna․clon․setup/src/configuration․lisp file}@c
@lispfileindex{net.didierverna.clon.setup/src/configuration.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․clon․setup/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/setup/src/configuration.lisp, ignore, @t{setup/src/configuration.lisp}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶CONFIGURATION function, , @t{configuration}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶CONFIGURE function, , @t{configure}} (function)
@end itemize
@item Internal Definitions
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*CONFIGURATION* special variable, , @t{*configuration*}} (special variable)
@end table

@node The net․didierverna․clon․setup/src/readtable․lisp file, The net․didierverna․clon․setup/src/termio․lisp file, The net․didierverna․clon․setup/src/configuration․lisp file, Lisp files
@subsection @t{net.didierverna.clon.setup/src/readtable.lisp}
@anchor{go to the net․didierverna․clon․setup/src/readtable․lisp file}@c
@lispfileindex{net.didierverna.clon.setup/src/readtable.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․setup/src/configuration․lisp file, , @t{configuration.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․setup/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/setup/src/readtable.lisp, ignore, @t{setup/src/readtable.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶CLINDENT function, , @t{clindent}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶DEFINDENT macro, , @t{defindent}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶I-READER function, , @t{i-reader}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶~-READER function, , @t{~-reader}} (function)
@end itemize
@end table

@node The net․didierverna․clon․setup/src/termio․lisp file, , The net․didierverna․clon․setup/src/readtable․lisp file, Lisp files
@subsection @t{net.didierverna.clon.setup/src/termio.lisp}
@anchor{go to the net․didierverna․clon․setup/src/termio․lisp file}@c
@lispfileindex{net.didierverna.clon.setup/src/termio.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․clon․setup/src/configuration․lisp file, , @t{configuration.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․clon․setup/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/clon/setup/src/termio.lisp, ignore, @t{setup/src/termio.lisp}}
@item Exported Definitions
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶SETUP-TERMIO function, , @t{setup-termio}} (function)
@item Internal Definitions
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶RESTRICT-BECAUSE function, , @t{restrict-because}} (function)
@end table



@c ====================================================================
@c Packages
@c ====================================================================
@node Packages, Definitions, Files, Top
@chapter Packages
Packages are listed by definition order.

@menu
* The net.didierverna.clon package: The net․didierverna․clon package.
* The net.didierverna.clon.setup package: The net․didierverna․clon․setup package.
@end menu


@c --------------------------------
@c The net.didierverna.clon package
@c --------------------------------
@node The net․didierverna․clon package, The net․didierverna․clon․setup package, Packages, Packages
@section @t{net.didierverna.clon}
@anchor{go to the NET․DIDIERVERNA․CLON package}@c
@packageindex{net.didierverna.clon}@c
The Clon library's package.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/package․lisp file, , @t{package.lisp}} (file)
@item Nickname
@t{clon}
@item Use List
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item
@t{common-lisp}
@end itemize
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶*CONTEXT* special variable, , @t{*context*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶*EXECUTABLEP* special variable, , @t{*executablep*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶*SYNOPSIS* special variable, , @t{*synopsis*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE function, , @t{cmdline}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTIONS-P function, , @t{cmdline-options-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-P function, , @t{cmdline-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFGROUP macro, , @t{defgroup}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFSYNOPSIS macro, , @t{defsynopsis}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DO-CMDLINE-OPTIONS macro, , @t{do-cmdline-options}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DUMP macro, , @t{dump}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶EXECUTABLEP function, , @t{executablep}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶EXIT function, , @t{exit}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GETOPT function, , @t{getopt}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GETOPT-CMDLINE function, , @t{getopt-cmdline}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP function, , @t{help}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-CONTEXT function, , @t{make-context}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-ENUM function, , @t{make-enum}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FLAG function, , @t{make-flag}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-GROUP function, , @t{make-group}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-LISPOBJ function, , @t{make-lispobj}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-PATH function, , @t{make-path}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-STROPT function, , @t{make-stropt}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-SWITCH function, , @t{make-switch}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-SYNOPSIS function, , @t{make-synopsis}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-TEXT function, , @t{make-text}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-XSWITCH function, , @t{make-xswitch}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MULTIPLE-VALUE-GETOPT-CMDLINE macro, , @t{multiple-value-getopt-cmdline}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NICKNAME-PACKAGE function, , @t{nickname-package}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PROGNAME function, , @t{progname}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REMAINDER function, , @t{remainder}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶WITH-CONTEXT macro, , @t{with-context}} (macro)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶%DEFGROUP macro, , @t{%defgroup}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶*HIGHLIGHT-PROPERTIES* special variable, , @t{*highlight-properties*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶*ITEM-NAMES* special variable, , @t{*item-names*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶+TIOCGWINSZ+ constant, , @t{+tiocgwinsz+}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ABSTRACT-CLASS class, , @t{abstract-class}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ACCUMULATE macro, , @t{accumulate}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ADD-SUBFACE function, , @t{add-subface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ALLOCATE-WINSIZE function, , @t{allocate-winsize}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT generic function, , @t{argument}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR method, , @t{argument}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶SPURIOUS-CMDLINE-ARGUMENT method, , @t{argument}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT method, , @t{argument}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-NAME generic function, , @t{argument-name}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-NAME NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{argument-name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-POPABLE-P function, , @t{argument-popable-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-REQUIRED-P generic function, , @t{argument-required-p}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-REQUIRED-P NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{argument-required-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLE generic function, , @t{argument-style}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLE NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{argument-style}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLES generic function, , @t{argument-styles}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{argument-styles}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ARGUMENT-STYLES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{(setf argument-styles)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ARGUMENT-STYLES❩ generic function, , @t{(setf argument-styles)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ATTACH-FACE-TREE function, , @t{attach-face-tree}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶AVAILABLE-RIGHT-MARGIN function, , @t{available-right-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BACKGROUND generic function, , @t{background}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BACKGROUND NET․DIDIERVERNA․CLON∶∶FACE method, , @t{background}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BEGINNING-OF-STRING-P function, , @t{beginning-of-string-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BLINK generic function, , @t{blink}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BLINK NET․DIDIERVERNA․CLON∶∶FACE method, , @t{blink}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BOTTOM-PADDING generic function, , @t{bottom-padding}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BOTTOM-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{bottom-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK generic function, , @t{check}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH generic function, , @t{check-name-clash}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶CONTAINER NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶CONTAINER COMMON-LISP∶∶T method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶TEXT COMMON-LISP∶∶T method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶OPTION NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLON-OPTIONS-GROUP generic function, , @t{clon-options-group}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLON-OPTIONS-GROUP NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{clon-options-group}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLON-OPTIONS-GROUP NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{clon-options-group}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-FRAME generic function, , @t{close-frame}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶FRAME PROGN method, , @t{close-frame}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME PROGN method, , @t{close-frame}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-LINE function, , @t{close-line}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-SFACE function, , @t{close-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSEST-MATCH function, , @t{closest-match}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-CONVERT function, , @t{cmdline-convert}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR condition, , @t{cmdline-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-JUNK-ERROR condition, , @t{cmdline-junk-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION structure, , @t{cmdline-option}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR condition, , @t{cmdline-option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-NAME function, , @t{cmdline-option-name}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-NAME❩ function, , @t{(setf cmdline-option-name)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-OPTION function, , @t{cmdline-option-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-OPTION❩ function, , @t{(setf cmdline-option-option)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-P function, , @t{cmdline-option-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-SOURCE function, , @t{cmdline-option-source}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-SOURCE❩ function, , @t{(setf cmdline-option-source)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-VALUE function, , @t{cmdline-option-value}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-VALUE❩ function, , @t{(setf cmdline-option-value)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTIONS generic function, , @t{cmdline-options}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTIONS NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{cmdline-options}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTIONS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{(setf cmdline-options)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTIONS❩ generic function, , @t{(setf cmdline-options)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COLUMN generic function, , @t{column}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COLUMN NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{column}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF COLUMN❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{(setf column)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF COLUMN❩ generic function, , @t{(setf column)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COMMENT generic function, , @t{comment}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COMMENT NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT method, , @t{comment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COMMENT NET․DIDIERVERNA․CLON∶∶INVALID-VALUE method, , @t{comment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COMPLETE-STRING function, , @t{complete-string}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONCEALEDP generic function, , @t{concealedp}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONCEALEDP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{concealedp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTAINER class, , @t{container}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTENTS generic function, , @t{contents}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTENTS NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{contents}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTEXT class, , @t{context}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT generic function, , @t{convert}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-CMDLINE-OPTION function, , @t{copy-cmdline-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-FRAME function, , @t{copy-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-HIGHLIGHT-FRAME function, , @t{copy-highlight-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-HIGHLIGHT-PROPERTY-INSTANCE function, , @t{copy-highlight-property-instance}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-INSTANCE generic function, , @t{copy-instance}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COPY-INSTANCE COMMON-LISP∶∶T method, , @t{copy-instance}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CROSSED-OUT-P generic function, , @t{crossed-out-p}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CROSSED-OUT-P NET․DIDIERVERNA․CLON∶∶FACE method, , @t{crossed-out-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-FRAME function, , @t{current-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-LEFT-MARGIN function, , @t{current-left-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-RIGHT-MARGIN function, , @t{current-right-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-SFACE function, , @t{current-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DECLARE-VALID-SUPERCLASS macro, , @t{declare-valid-superclass}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFABSTRACT macro, , @t{defabstract}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFAULT-VALUE generic function, , @t{default-value}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFAULT-VALUE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{default-value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFOPTION macro, , @t{defoption}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DESCRIPTION generic function, , @t{description}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DESCRIPTION NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{description}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DIRECTORY-PATHNAME-P function, , @t{directory-pathname-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DO-OPTIONS macro, , @t{do-options}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ECOND macro, , @t{econd}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENDPUSH macro, , @t{endpush}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM generic function, , @t{enum}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM NET․DIDIERVERNA․CLON∶∶ENUM-BASE method, , @t{enum}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM class, , @t{enum}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM-BASE class, , @t{enum-base}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAL generic function, , @t{env-val}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAL NET․DIDIERVERNA․CLON∶∶INVALID-ENVIRONMENT-VALUE method, , @t{env-val}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR generic function, , @t{env-var}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR NET․DIDIERVERNA․CLON∶∶ENVIRONMENT-ERROR method, , @t{env-var}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{env-var}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENT-CONVERT function, , @t{environment-convert}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENT-ERROR condition, , @t{environment-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENTAL-OPTION-ERROR condition, , @t{environmental-option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ERROR-HANDLER generic function, , @t{error-handler}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ERROR-HANDLER NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{error-handler}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ERROR-STRING generic function, , @t{error-string}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ERROR-STRING NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY method, , @t{error-string}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ERROR-STRING❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY method, , @t{(setf error-string)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ERROR-STRING❩ generic function, , @t{(setf error-string)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶EXIT-ABNORMALLY function, , @t{exit-abnormally}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FACE class, , @t{face}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FACE-HIGHLIGHT-PROPERTY-SET-P function, , @t{face-highlight-property-set-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FACE-HIGHLIGHT-PROPERTY-VALUE function, , @t{face-highlight-property-value}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FALLBACK-VALUE generic function, , @t{fallback-value}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FALLBACK-VALUE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{fallback-value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FIND-SFACE function, , @t{find-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FLAG class, , @t{flag}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FLUSH-SHEET function, , @t{flush-sheet}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FOREGROUND generic function, , @t{foreground}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FOREGROUND NET․DIDIERVERNA․CLON∶∶FACE method, , @t{foreground}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME structure, , @t{frame}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME-LEFT-MARGIN function, , @t{frame-left-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-LEFT-MARGIN❩ function, , @t{(setf frame-left-margin)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME-P function, , @t{frame-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME-RIGHT-MARGIN function, , @t{frame-right-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-RIGHT-MARGIN❩ function, , @t{(setf frame-right-margin)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME-SFACE function, , @t{frame-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-SFACE❩ function, , @t{(setf frame-sface)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAMEDP generic function, , @t{framedp}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAMEDP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{framedp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAMES generic function, , @t{frames}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAMES NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{frames}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAMES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{(setf frames)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAMES❩ generic function, , @t{(setf frames)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GET-BOTTOM-PADDING generic function, , @t{get-bottom-padding}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GET-BOTTOM-PADDING COMMON-LISP∶∶T COMMON-LISP∶∶T method, , @t{get-bottom-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GET-BOTTOM-PADDING COMMON-LISP∶∶T COMMON-LISP∶∶LIST method, , @t{get-bottom-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GET-TOP-PADDING function, , @t{get-top-padding}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GETENV function, , @t{getenv}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GROUP class, , @t{group}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HEADER generic function, , @t{header}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HEADER NET․DIDIERVERNA․CLON∶∶GROUP method, , @t{header}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC generic function, , @t{help-spec}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶GROUP method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶ITEM AROUND method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-ITEMS-WILL-PRINT function, , @t{help-spec-items-will-print}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT generic function, , @t{help-spec-will-print}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method, , @t{help-spec-will-print}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT COMMON-LISP∶∶T COMMON-LISP∶∶T method, , @t{help-spec-will-print}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT COMMON-LISP∶∶T COMMON-LISP∶∶LIST method, , @t{help-spec-will-print}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIDDENP generic function, , @t{hiddenp}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIDDENP NET․DIDIERVERNA․CLON∶∶ITEM method, , @t{hiddenp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT generic function, , @t{highlight}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{highlight}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME structure, , @t{highlight-frame}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-HIGHLIGHT-PROPERTY-INSTANCES function, , @t{highlight-frame-highlight-property-instances}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-HIGHLIGHT-PROPERTY-INSTANCES❩ function, , @t{(setf highlight-frame-highlight-property-instances)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-LEFT-MARGIN function, , @t{highlight-frame-left-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-LEFT-MARGIN❩ function, , @t{(setf highlight-frame-left-margin)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-P function, , @t{highlight-frame-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-RIGHT-MARGIN function, , @t{highlight-frame-right-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-RIGHT-MARGIN❩ function, , @t{(setf highlight-frame-right-margin)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-SFACE function, , @t{highlight-frame-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-SFACE❩ function, , @t{(setf highlight-frame-sface)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-ECASE macro, , @t{highlight-property-ecase}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE structure, , @t{highlight-property-instance}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-ESCAPE-SEQUENCE function, , @t{highlight-property-instance-escape-sequence}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-NAME function, , @t{highlight-property-instance-name}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-PROPERTY-INSTANCE-NAME❩ function, , @t{(setf highlight-property-instance-name)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-P function, , @t{highlight-property-instance-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-VALUE function, , @t{highlight-property-instance-value}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-PROPERTY-INSTANCE-VALUE❩ function, , @t{(setf highlight-property-instance-value)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHTP generic function, , @t{highlightp}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHTP NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{highlightp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY function, , @t{home-directory}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY condition, , @t{home-directory}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INTENSITY generic function, , @t{intensity}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INTENSITY NET․DIDIERVERNA․CLON∶∶FACE method, , @t{intensity}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT condition, , @t{invalid-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-CMDLINE-ARGUMENT condition, , @t{invalid-cmdline-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-ENVIRONMENT-VALUE condition, , @t{invalid-environment-value}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-NEGATED-EQUAL-SYNTAX condition, , @t{invalid-negated-equal-syntax}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-NEGATED-SYNTAX condition, , @t{invalid-negated-syntax}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-SHORT-EQUAL-SYNTAX condition, , @t{invalid-short-equal-syntax}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-VALUE condition, , @t{invalid-value}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVERSEP generic function, , @t{inversep}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVERSEP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{inversep}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITALICP generic function, , @t{italicp}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITALICP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{italicp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM generic function, , @t{item}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR method, , @t{item}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM class, , @t{item}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM-SEPARATOR generic function, , @t{item-separator}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM-SEPARATOR NET․DIDIERVERNA․CLON∶∶FACE method, , @t{item-separator}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEMS generic function, , @t{items}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEMS NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{items}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶JUNK generic function, , @t{junk}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶JUNK NET․DIDIERVERNA․CLON∶∶CMDLINE-JUNK-ERROR method, , @t{junk}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LEFT-PADDING generic function, , @t{left-padding}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LEFT-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{left-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH generic function, , @t{line-width}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{line-width}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{line-width}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LISPOBJ class, , @t{lispobj}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LIST-TO-STRING function, , @t{list-to-string}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LONG-NAME generic function, , @t{long-name}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LONG-NAME NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{long-name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MACOSP function, , @t{macosp}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-CMDLINE-OPTION function, , @t{make-cmdline-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FACE-TREE generic function, , @t{make-face-tree}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FACE-TREE COMMON-LISP∶∶LIST method, , @t{make-face-tree}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FACE-TREE COMMON-LISP∶∶SYMBOL method, , @t{make-face-tree}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FRAME function, , @t{make-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-HIGHLIGHT-FRAME function, , @t{make-highlight-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-HIGHLIGHT-PROPERTY-INSTANCE function, , @t{make-highlight-property-instance}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-ENUM function, , @t{make-internal-enum}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-FLAG function, , @t{make-internal-flag}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-LISPOBJ function, , @t{make-internal-lispobj}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-PATH function, , @t{make-internal-path}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-STROPT function, , @t{make-internal-stropt}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-SWITCH function, , @t{make-internal-switch}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-TEXT function, , @t{make-internal-text}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-XSWITCH function, , @t{make-internal-xswitch}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-RAW-FACE-TREE function, , @t{make-raw-face-tree}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-RAW-SFACE function, , @t{make-raw-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAKE-SHEET function, , @t{make-sheet}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAP-FRAMES macro, , @t{map-frames}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS generic function, , @t{mapoptions}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T COMMON-LISP∶∶T method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶ITEM AFTER method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MATCH-OPTION function, , @t{match-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAYBE-POP-ARGUMENT macro, , @t{maybe-pop-argument}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAYBE-PUSH macro, , @t{maybe-push}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MISSING-CMDLINE-ARGUMENT condition, , @t{missing-cmdline-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME generic function, , @t{name}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR method, , @t{name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶FACE method, , @t{name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR method, , @t{name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATABLE class, , @t{negatable}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-CALL generic function, , @t{negated-call}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-CALL NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-NEGATED-CALL-ERROR method, , @t{negated-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK generic function, , @t{negated-pack}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{negated-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{negated-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK-CHAR generic function, , @t{negated-pack-char}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK-CHAR NET․DIDIERVERNA․CLON∶∶NEGATABLE method, , @t{negated-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK-CHAR NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{negated-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NO-VALUES generic function, , @t{no-values}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NO-VALUES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{no-values}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF NO-VALUES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{(setf no-values)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF NO-VALUES❩ generic function, , @t{(setf no-values)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OFFSET-OF-WINSIZE-WS-COL constant, , @t{offset-of-winsize-ws-col}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OFFSET-OF-WINSIZE-WS-ROW constant, , @t{offset-of-winsize-ws-row}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OFFSET-OF-WINSIZE-WS-XPIXEL constant, , @t{offset-of-winsize-ws-xpixel}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OFFSET-OF-WINSIZE-WS-YPIXEL constant, , @t{offset-of-winsize-ws-ypixel}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-FRAME generic function, , @t{open-frame}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶FRAME PROGN method, , @t{open-frame}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME PROGN method, , @t{open-frame}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-LINE function, , @t{open-line}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-NEXT-LINE function, , @t{open-next-line}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-SFACE function, , @t{open-sface}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION generic function, , @t{option}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION NET․DIDIERVERNA․CLON∶∶OPTION-ERROR method, , @t{option}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION class, , @t{option}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-ABBREVIATION-DISTANCE function, , @t{option-abbreviation-distance}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-CALL-P function, , @t{option-call-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-ERROR condition, , @t{option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-STICKY-DISTANCE generic function, , @t{option-sticky-distance}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-STICKY-DISTANCE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method, , @t{option-sticky-distance}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-STICKY-DISTANCE NET․DIDIERVERNA․CLON∶∶OPTION COMMON-LISP∶∶T method, , @t{option-sticky-distance}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OUTPUT-STREAM generic function, , @t{output-stream}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OUTPUT-STREAM NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{output-stream}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PARENT generic function, , @t{parent}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PARENT NET․DIDIERVERNA․CLON∶∶FACE method, , @t{parent}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PARENT-GENERATION function, , @t{parent-generation}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PATH class, , @t{path}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PATH-TYPE generic function, , @t{path-type}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PATH-TYPE NET․DIDIERVERNA․CLON∶∶PATH method, , @t{path-type}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PATHNAME-COMPONENT-NULL-P function, , @t{pathname-component-null-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POP-FRAME function, , @t{pop-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POSTFIX generic function, , @t{postfix}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POSTFIX NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{postfix}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POSTFIX NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{postfix}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK generic function, , @t{potential-pack}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{potential-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-CHAR function, , @t{potential-pack-char}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-P generic function, , @t{potential-pack-p}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-P COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{potential-pack-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-P COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{potential-pack-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINC-CHAR function, , @t{princ-char}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINC-HIGHLIGHT-PROPERTY-INSTANCES function, , @t{princ-highlight-property-instances}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINC-SPACES function, , @t{princ-spaces}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINC-STRING function, , @t{princ-string}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-ERROR function, , @t{print-error}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-FACED-HELP-SPEC function, , @t{print-faced-help-spec}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP function, , @t{print-help}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC generic function, , @t{print-help-spec}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method, , @t{print-help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶CHARACTER method, , @t{print-help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶SIMPLE-VECTOR method, , @t{print-help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶STRING method, , @t{print-help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶LIST method, , @t{print-help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PRINT-STRING function, , @t{print-string}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PUSH-FRAME function, , @t{push-frame}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PUTENV function, , @t{putenv}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REACH-COLUMN function, , @t{reach-column}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-ARGUMENT function, , @t{read-argument}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-CALL function, , @t{read-call}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-ENV-VAL function, , @t{read-env-val}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-LONG-NAME function, , @t{read-long-name}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-SFACE-TREE function, , @t{read-sface-tree}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶READ-VALUE function, , @t{read-value}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REMOVE-KEYS function, , @t{remove-keys}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REPLACE-IN-KEYS macro, , @t{replace-in-keys}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REPLACE-KEY function, , @t{replace-key}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶REPLACE-KEYS function, , @t{replace-keys}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTART-ON-ERROR function, , @t{restart-on-error}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CHECK function, , @t{restartable-check}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CMDLINE-CONVERT function, , @t{restartable-cmdline-convert}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CMDLINE-JUNK-ERROR function, , @t{restartable-cmdline-junk-error}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CONVERT function, , @t{restartable-convert}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-ENVIRONMENT-CONVERT function, , @t{restartable-environment-convert}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-INVALID-NEGATED-SYNTAX-ERROR macro, , @t{restartable-invalid-negated-syntax-error}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-SPURIOUS-CMDLINE-ARGUMENT-ERROR macro, , @t{restartable-spurious-cmdline-argument-error}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT generic function, , @t{retrieve-from-environment}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method, , @t{retrieve-from-environment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT NET․DIDIERVERNA․CLON∶∶FLAG COMMON-LISP∶∶T method, , @t{retrieve-from-environment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method, , @t{retrieve-from-environment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-LONG-CALL generic function, , @t{retrieve-from-long-call}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-LONG-CALL NET․DIDIERVERNA․CLON∶∶OPTION COMMON-LISP∶∶T method, , @t{retrieve-from-long-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-LONG-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method, , @t{retrieve-from-long-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL generic function, , @t{retrieve-from-negated-call}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{retrieve-from-negated-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{retrieve-from-negated-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶NEGATABLE method, , @t{retrieve-from-negated-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-SHORT-CALL generic function, , @t{retrieve-from-short-call}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-SHORT-CALL NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{retrieve-from-short-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-SHORT-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{retrieve-from-short-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RIGHT-PADDING generic function, , @t{right-padding}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RIGHT-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{right-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SAFE-LEFT-MARGIN function, , @t{safe-left-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SAFE-RIGHT-MARGIN function, , @t{safe-right-margin}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-BRANCH function, , @t{search-branch}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-FACE function, , @t{search-face}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-OPTION function, , @t{search-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-OPTION-BY-ABBREVIATION function, , @t{search-option-by-abbreviation}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-OPTION-BY-NAME function, , @t{search-option-by-name}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-PATH generic function, , @t{search-path}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-PATH NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{search-path}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-STICKY-OPTION function, , @t{search-sticky-option}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SELECT-KEYS function, , @t{select-keys}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SFACE class, , @t{sface}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SFACE-TREE generic function, , @t{sface-tree}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SFACE-TREE NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{sface-tree}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHEET class, , @t{sheet}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-CALL generic function, , @t{short-call}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-CALL NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-SHORT-CALL-ERROR method, , @t{short-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-NAME generic function, , @t{short-name}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-NAME NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{short-name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK generic function, , @t{short-pack}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{short-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{short-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK-CHAR generic function, , @t{short-pack-char}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK-CHAR NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{short-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK-CHAR NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{short-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-SYNTAX-HELP-SPEC-PREFIX generic function, , @t{short-syntax-help-spec-prefix}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-SYNTAX-HELP-SPEC-PREFIX NET․DIDIERVERNA․CLON∶∶NEGATABLE method, , @t{short-syntax-help-spec-prefix}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-SYNTAX-HELP-SPEC-PREFIX NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{short-syntax-help-spec-prefix}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SIBLING generic function, , @t{sibling}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SIBLING NET․DIDIERVERNA․CLON∶∶SFACE method, , @t{sibling}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SIZE-OF-WINSIZE constant, , @t{size-of-winsize}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SPLIT-PATH function, , @t{split-path}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SPURIOUS-CMDLINE-ARGUMENT condition, , @t{spurious-cmdline-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE generic function, , @t{stream-ioctl-output-handle}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE COMMON-LISP∶∶SYNONYM-STREAM method, , @t{stream-ioctl-output-handle}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE COMMON-LISP∶∶TWO-WAY-STREAM method, , @t{stream-ioctl-output-handle}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE SB-SYS∶∶FD-STREAM method, , @t{stream-ioctl-output-handle}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE COMMON-LISP∶∶T method, , @t{stream-ioctl-output-handle}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STREAM-LINE-WIDTH function, , @t{stream-line-width}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY generic function, , @t{stringify}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STROPT class, , @t{stropt}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SUBFACE generic function, , @t{subface}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SUBFACE COMMON-LISP∶∶T COMMON-LISP∶∶SYMBOL method, , @t{subface}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SUBFACE COMMON-LISP∶∶T COMMON-LISP∶∶LIST method, , @t{subface}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SUBFACES generic function, , @t{subfaces}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SUBFACES NET․DIDIERVERNA․CLON∶∶FACE method, , @t{subfaces}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SWITCH class, , @t{switch}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SWITCH-BASE class, , @t{switch-base}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SYNOPSIS generic function, , @t{synopsis}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SYNOPSIS NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{synopsis}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SYNOPSIS class, , @t{synopsis}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TEXT class, , @t{text}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶THEME generic function, , @t{theme}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶THEME NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{theme}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING generic function, , @t{top-padding}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING COMMON-LISP∶∶LIST method, , @t{top-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING COMMON-LISP∶∶T method, , @t{top-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{top-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TRAVERSEDP generic function, , @t{traversedp}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TRAVERSEDP NET․DIDIERVERNA․CLON∶∶ITEM method, , @t{traversedp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF TRAVERSEDP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶ITEM method, , @t{(setf traversedp)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF TRAVERSEDP❩ generic function, , @t{(setf traversedp)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TRY-READ-SFACE-TREE function, , @t{try-read-sface-tree}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TRY-READ-THEME function, , @t{try-read-theme}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TYPESPEC generic function, , @t{typespec}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TYPESPEC NET․DIDIERVERNA․CLON∶∶LISPOBJ method, , @t{typespec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNDERLINE generic function, , @t{underline}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNDERLINE NET․DIDIERVERNA․CLON∶∶FACE method, , @t{underline}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR condition, , @t{unknown-cmdline-option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-NEGATED-CALL-ERROR condition, , @t{unrecognized-negated-call-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-SHORT-CALL-ERROR condition, , @t{unrecognized-short-call-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE generic function, , @t{untraverse}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{untraverse}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{untraverse}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{untraverse}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{untraverse}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶ITEM AFTER method, , @t{untraverse}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUE generic function, , @t{value}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUE NET․DIDIERVERNA․CLON∶∶INVALID-VALUE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUED-OPTION class, , @t{valued-option}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VISIBLEP generic function, , @t{visiblep}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VISIBLEP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{visiblep}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶WINSIZE-WS-COL function, , @t{winsize-ws-col}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF WINSIZE-WS-COL❩ function, , @t{(setf winsize-ws-col)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶WINSIZE-WS-ROW function, , @t{winsize-ws-row}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF WINSIZE-WS-ROW❩ function, , @t{(setf winsize-ws-row)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶WINSIZE-WS-XPIXEL function, , @t{winsize-ws-xpixel}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF WINSIZE-WS-XPIXEL❩ function, , @t{(setf winsize-ws-xpixel)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶WINSIZE-WS-YPIXEL function, , @t{winsize-ws-ypixel}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF WINSIZE-WS-YPIXEL❩ function, , @t{(setf winsize-ws-ypixel)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶WITH-CONTEXT-ERROR-HANDLER macro, , @t{with-context-error-handler}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶WITH-WINSIZE macro, , @t{with-winsize}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶XSWITCH class, , @t{xswitch}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶YES-VALUES generic function, , @t{yes-values}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶YES-VALUES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{yes-values}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF YES-VALUES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{(setf yes-values)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF YES-VALUES❩ generic function, , @t{(setf yes-values)}} (generic function)
@end itemize
@end table


@c --------------------------------------
@c The net.didierverna.clon.setup package
@c --------------------------------------
@node The net․didierverna․clon․setup package, , The net․didierverna․clon package, Packages
@section @t{net.didierverna.clon.setup}
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP package}@c
@packageindex{net.didierverna.clon.setup}@c
The Clon setup library's package.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․setup/package․lisp file, , @t{package.lisp}} (file)
@item Use List
@t{common-lisp}
@item Used By List
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*COPYRIGHT-YEARS* special variable, , @t{*copyright-years*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-MAJOR-LEVEL* special variable, , @t{*release-major-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-MINOR-LEVEL* special variable, , @t{*release-minor-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-NAME* special variable, , @t{*release-name*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-STATUS* special variable, , @t{*release-status*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-STATUS-LEVEL* special variable, , @t{*release-status-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶CONFIGURATION function, , @t{configuration}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶CONFIGURE function, , @t{configure}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶SETUP-TERMIO function, , @t{setup-termio}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶VERSION function, , @t{version}} (function)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶%VERSION function, , @t{%version}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*CONFIGURATION* special variable, , @t{*configuration*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶CLINDENT function, , @t{clindent}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶DEFINDENT macro, , @t{defindent}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶I-READER function, , @t{i-reader}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶RELEASE-STATUS-NUMBER function, , @t{release-status-number}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶RESTRICT-BECAUSE function, , @t{restrict-because}} (function)
@item
@ref{go to the NET․DIDIERVERNA․CLON․SETUP∶∶~-READER function, , @t{~-reader}} (function)
@end itemize
@end table



@c ====================================================================
@c Definitions
@c ====================================================================
@node Definitions, Indexes, Packages, Top
@chapter Definitions
Definitions are sorted by export status, category, package, and then by
lexicographic order.

@menu
* Exported definitions::
* Internal definitions::
@end menu


@c --------------------
@c Exported definitions
@c --------------------
@node Exported definitions, Internal definitions, Definitions, Definitions
@section Exported definitions
@menu
* Exported special variables::
* Exported macros::
* Exported functions::
@end menu

@node Exported special variables, Exported macros, Exported definitions, Exported definitions
@subsection Special variables
@defvr {Special Variable} *context*
@anchor{go to the NET․DIDIERVERNA․CLON∶∶*CONTEXT* special variable}@c
@specialsubindex{*context*}@c
The current context.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *copyright-years*
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*COPYRIGHT-YEARS* special variable}@c
@specialsubindex{*copyright-years*}@c
A string denoting the copyright years for the whole project.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/version․lisp file, , @t{version.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *executablep*
@anchor{go to the NET․DIDIERVERNA․CLON∶∶*EXECUTABLEP* special variable}@c
@specialsubindex{*executablep*}@c
Whether the current Lisp image is a standalone executable.@*
This information is needed in several implementations to distinguish
user options from implementation-specific ones on the command-line.

It is set automatically to T by the `dump' function@comma{} which see.@*
If the image is dumped by ASDF's program-op@comma{} this variable is ignored.
In any other case@comma{} that is@comma{} when dumping via an implementation-specific
function@comma{} it must be set manually to T just before dumping.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *release-major-level*
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-MAJOR-LEVEL* special variable}@c
@specialsubindex{*release-major-level*}@c
The major level of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/version․lisp file, , @t{version.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *release-minor-level*
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-MINOR-LEVEL* special variable}@c
@specialsubindex{*release-minor-level*}@c
The minor level of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/version․lisp file, , @t{version.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *release-name*
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-NAME* special variable}@c
@specialsubindex{*release-name*}@c
The name of this release.@*
The general naming theme for Clon is "Great Jazz musicians".
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/version․lisp file, , @t{version.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *release-status*
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-STATUS* special variable}@c
@specialsubindex{*release-status*}@c
The status of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/version․lisp file, , @t{version.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *release-status-level*
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*RELEASE-STATUS-LEVEL* special variable}@c
@specialsubindex{*release-status-level*}@c
The status level of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/version․lisp file, , @t{version.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *synopsis*
@anchor{go to the NET․DIDIERVERNA․CLON∶∶*SYNOPSIS* special variable}@c
@specialsubindex{*synopsis*}@c
The current synopsis.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@end table
@end defvr

@node Exported macros, Exported functions, Exported special variables, Exported definitions
@subsection Macros
@deffn {Macro} {defgroup} (&rest KEYS &key HEADER HIDDEN) &body FORMS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DEFGROUP macro}@c
@macrosubindex{defgroup}@c
Define a new group.@*
KEYS are initargs to MAKE-GROUP (currently@comma{} only :header).@*
Each form in FORMS will be treated as a new :item.@*
The CAR of each form is the name of the operation to perform: TEXT@comma{} GROUP@comma{} or
an option class name. The rest are the arguments to the MAKE-<OP> function or
the DEFGROUP macro.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/group․lisp file, , @t{group.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {defsynopsis} (&rest KEYS &key POSTFIX MAKE-DEFAULT) &body FORMS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DEFSYNOPSIS macro}@c
@macrosubindex{defsynopsis}@c
Define a new synopsis.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {do-cmdline-options} (OPTION NAME VALUE SOURCE &key CONTEXT) &body BODY
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DO-CMDLINE-OPTIONS macro}@c
@macrosubindex{do-cmdline-options}@c
Evaluate BODY over all command-line options in CONTEXT.@*
OPTION@comma{} NAME and VALUE are bound to each option's object@comma{} name used on the
command-line and retrieved value.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {dump} NAME FUNCTION &rest ARGS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DUMP macro}@c
@macrosubindex{dump}@c
Dump a standalone executable named NAME starting with FUNCTION.@*
ARGS may be any arguments understood by the underlying implementation's
dumping facility. They will simply be passed along. Note that DUMP already
passes some such arguments. Some of them are critical for the dumping facility
(e.g. :executable) and cannot be overridden. Some others@comma{} however@comma{} will be if
you provide them as well (e.g. :load-init-file).@*

Since executable dumping is not available in all supported implementations@comma{}
this function behaves differently in some cases@comma{} as described below.@*

- ECL doesn't create executables by dumping a Lisp image@comma{} but relies on having
  toplevel code to execute instead@comma{} so this macro simply expands to a call to
  FUNCTION. This also means that ARGS is unused.@*
- ABCL can't dump executables at all because of the underlying Java
  implementation@comma{} so this macro expands to just (PROGN) but creates a Java
  class file with a main function that creates an interpreter@comma{} loads@*
  the file in which this macro call appears and calls FUNCTION. This also
  means that ARGS is unused.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {multiple-value-getopt-cmdline} (OPTION NAME VALUE SOURCE &key CONTEXT) &body BODY
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MULTIPLE-VALUE-GETOPT-CMDLINE macro}@c
@macrosubindex{multiple-value-getopt-cmdline}@c
Get the next command-line option in CONTEXT. and evaluate BODY.
OPTION@comma{} NAME and VALUE are bound to the values returned by GETOPT-CMDLINE.
BODY is executed only if there is a next command-line option.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {with-context} CONTEXT &body BODY
@anchor{go to the NET․DIDIERVERNA․CLON∶∶WITH-CONTEXT macro}@c
@macrosubindex{with-context}@c
Execute BODY with *context* bound to CONTEXT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn

@node Exported functions, , Exported macros, Exported definitions
@subsection Functions
@deffn {Function} {cmdline} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE function}@c
@functionsubindex{cmdline}@c
Get the current application's command-line.@*
This command-line is not supposed to contain any Lisp implementation specific
option; only user-level ones. When a standalone executable is dumped@comma{} this is
always the case. When used interactively@comma{} this depends on the underlying Lisp
implementation. See appendix A.5 of the user manual for more information.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {cmdline-options-p} &key CONTEXT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTIONS-P function}@c
@functionsubindex{cmdline-options-p}@c
Return T if CONTEXT has any unprocessed options left.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {cmdline-p} &key CONTEXT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-P function}@c
@functionsubindex{cmdline-p}@c
Return T if CONTEXT has anything on its command-line.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {configuration} KEY
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶CONFIGURATION function}@c
@functionsubindex{configuration}@c
Return KEY's value in the current Clon configuration.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/configuration․lisp file, , @t{configuration.lisp}} (file)
@end table
@end deffn
@deffn {Function} {configure} KEY VALUE
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶CONFIGURE function}@c
@functionsubindex{configure}@c
Set KEY to VALUE in the current Clon configuration.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/configuration․lisp file, , @t{configuration.lisp}} (file)
@end table
@end deffn
@deffn {Function} {executablep} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶EXECUTABLEP function}@c
@functionsubindex{executablep}@c
Return T if the current Lisp image is a standalone executable.@*
This function detects executables dumped by ASDF's program-op operation@comma{}
those dumped by Clon's `dump' function (which see)@comma{} and those in which
`*executablep*' (which see) has been set to T manually.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {exit} &optional STATUS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶EXIT function}@c
@functionsubindex{exit}@c
Quit the current application with STATUS.@*
This function is considered deprecated. Please use UIOP:QUIT instead.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {getopt} &rest KEYS &key CONTEXT SHORT-NAME LONG-NAME OPTION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶GETOPT function}@c
@functionsubindex{getopt}@c
Get an option's value in CONTEXT.@*
The option can be specified either by SHORT-NAME@comma{} LONG-NAME@comma{} or directly via
an OPTION object.@*
Return two values:@*
- the retrieved value@comma{}@*
- the value's source.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {getopt-cmdline} &key CONTEXT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶GETOPT-CMDLINE function}@c
@functionsubindex{getopt-cmdline}@c
Get the next command-line option in CONTEXT.@*
When there is no next command-line option@comma{} return nil.
Otherwise@comma{} return four values:@*
- the option object@comma{}@*
- the option's name used on the command-line@comma{}@*
- the retrieved value@comma{}@*
- the value source.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {help} &key CONTEXT ITEM OUTPUT-STREAM SEARCH-PATH THEME LINE-WIDTH HIGHLIGHT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP function}@c
@functionsubindex{help}@c
Print CONTEXT's help.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-context} &rest KEYS &key SYNOPSIS CMDLINE PROGNAME MAKE-CURRENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-CONTEXT function}@c
@functionsubindex{make-context}@c
Make a new context.@*
- SYNOPSIS is the program synopsis to use in that context.@*
  It defaults to *SYNOPSIS*.@*
- CMDLINE is the argument list (strings) to process.@*
  It defaults to a POSIX conformant argv.@*
- PROGNAME is an alternate value for argv[0].@*
  It defaults to NIL@comma{} in which case the actual argv[0] is used.
  Otherwise@comma{} it can be a non-empty string@comma{} standing for itself@comma{}@*
  or :environment meaning to retrieve the value of the __CL_ARGV0 environment
  variable (ignored if it's empty).@*
  value.@*
- If MAKE-CURRENT@comma{} make the new context current. This is the default.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-enum} &rest KEYS &key SHORT-NAME LONG-NAME DESCRIPTION ARGUMENT-NAME ARGUMENT-TYPE ENUM ENV-VAR FALLBACK-VALUE DEFAULT-VALUE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-ENUM function}@c
@functionsubindex{make-enum}@c
Make a new enum option.@*
- SHORT-NAME is the option's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the option's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the option's description appearing in help strings.@*
  It defaults to nil.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENUM is the set of possible values.@*
- ENV-VAR is the option's associated environment variable.@*
  It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/enum․lisp file, , @t{enum.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-flag} &rest KEYS &key SHORT-NAME LONG-NAME DESCRIPTION ENV-VAR HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FLAG function}@c
@functionsubindex{make-flag}@c
Make a new flag.@*
- SHORT-NAME is the option's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the option's long name (without the double-dash).
  It defaults to nil.@*
- DESCRIPTION is the option's description appearing in help strings.
  It defaults to nil.@*
- ENV-VAR is the flag's associated environment variable.@*
  It defaults to nil.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/flag․lisp file, , @t{flag.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-group} &rest KEYS &key HEADER ITEM HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-GROUP function}@c
@functionsubindex{make-group}@c
Make a new group.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/group․lisp file, , @t{group.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-lispobj} &rest KEYS &key SHORT-NAME LONG-NAME DESCRIPTION ARGUMENT-NAME ARGUMENT-TYPE ENV-VAR TYPESPEC FALLBACK-VALUE DEFAULT-VALUE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-LISPOBJ function}@c
@functionsubindex{make-lispobj}@c
Make a new lispobj option.@*
- SHORT-NAME is the option's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the option's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the option's description appearing in help strings.@*
  It defaults to nil.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable.@*
  It defaults to nil.@*
- TYPESPEC is a type specifier the option's value should satisfy.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/lispobj․lisp file, , @t{lispobj.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-path} &rest KEYS &key SHORT-NAME LONG-NAME DESCRIPTION ARGUMENT-NAME ARGUMENT-TYPE ENV-VAR FALLBACK-VALUE DEFAULT-VALUE TYPE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-PATH function}@c
@functionsubindex{make-path}@c
Make a new path option.@*
- SHORT-NAME is the option's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the option's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the option's description appearing in help strings.@*
  It defaults to nil.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable.@*
  It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- TYPE is the pathname type. It can be one of :file@comma{} :directory@comma{} :file-list@comma{}
  :directory-list or nil meaning that everything is allowed.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/path․lisp file, , @t{path.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-stropt} &rest KEYS &key SHORT-NAME LONG-NAME DESCRIPTION ARGUMENT-NAME ARGUMENT-TYPE ENV-VAR FALLBACK-VALUE DEFAULT-VALUE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-STROPT function}@c
@functionsubindex{make-stropt}@c
Make a new string option.@*
- SHORT-NAME is the option's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the option's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the option's description appearing in help strings.@*
  It defaults to nil.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable.@*
  It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/stropt․lisp file, , @t{stropt.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-switch} &rest KEYS &key SHORT-NAME LONG-NAME DESCRIPTION ARGUMENT-STYLE ARGUMENT-TYPE ENV-VAR DEFAULT-VALUE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-SWITCH function}@c
@functionsubindex{make-switch}@c
Make a new switch.@*
- SHORT-NAME is the switch's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the switch's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the switch's description appearing in help strings.@*
  It defaults to nil.@*
- ARGUMENT-STYLE is the switch's argument display style. It can be one of
  :yes/no@comma{} :on/off@comma{} :true/false@comma{} :yup/nope or :yeah/nah.@*
  It defaults to :yes/no.@*
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the switch's associated environment variable.@*
  It defaults to nil.@*
- DEFAULT-VALUE is the switch's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/switch․lisp file, , @t{switch.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-synopsis} &rest KEYS &key POSTFIX ITEM MAKE-DEFAULT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-SYNOPSIS function}@c
@functionsubindex{make-synopsis}@c
Make a new SYNOPSIS.@*
- POSTFIX is a string to append to the program synopsis@comma{} in case it accepts a
remainder.@*
- If MAKE-DEFAULT@comma{} make the new synopsis the default one.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-text} &rest KEYS &key CONTENTS HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-TEXT function}@c
@functionsubindex{make-text}@c
Make a new text.@*
- CONTENTS is the actual text to display.@*
- When HIDDEN@comma{} the text doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/text․lisp file, , @t{text.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-xswitch} &rest KEYS &key SHORT-NAME LONG-NAME DESCRIPTION ARGUMENT-NAME ARGUMENT-TYPE ENUM ENV-VAR DEFAULT-VALUE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-XSWITCH function}@c
@functionsubindex{make-xswitch}@c
Make a new xswitch.@*
- SHORT-NAME is the xswitch's short name (without the dash).@*
  It defaults to nil.@*
- LONG-NAME is the xswitch's long name (without the double-dash).@*
  It defaults to nil.@*
- DESCRIPTION is the xswitch's description appearing in help strings.
  It defaults to nil.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENUM is the set of possible non-boolean values.@*
- ENV-VAR is the xswitch's associated environment variable.@*
  It defaults to nil.@*
- DEFAULT-VALUE is the xswitch's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/xswitch․lisp file, , @t{xswitch.lisp}} (file)
@end table
@end deffn
@deffn {Function} {nickname-package} &optional NICKNAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NICKNAME-PACKAGE function}@c
@functionsubindex{nickname-package}@c
Add NICKNAME (:CLON by default) to the :NET.DIDIERVERNA.CLON package.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/package․lisp file, , @t{package.lisp}} (file)
@end table
@end deffn
@deffn {Function} {progname} &key CONTEXT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PROGNAME function}@c
@functionsubindex{progname}@c
Return CONTEXT's program name.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {remainder} &key CONTEXT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶REMAINDER function}@c
@functionsubindex{remainder}@c
Return CONTEXT's remainder.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {setup-termio} ()
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶SETUP-TERMIO function}@c
@functionsubindex{setup-termio}@c
Autodetect termio support.@*
Update Clon configuration and *FEATURES* accordingly.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/termio․lisp file, , @t{termio.lisp}} (file)
@end table
@end deffn
@deffn {Function} {version} &optional TYPE
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶VERSION function}@c
@functionsubindex{version}@c
Return the current version of Clon.@*
TYPE can be one of :number@comma{} :short or :long.@*

A version number is computed as major*10000 + minor*100 + patchlevel@comma{} leaving
two digits for each level. Alpha@comma{} beta and rc status are ignored in version
numbers.@*

A short version is something like 1.3@lbracechar{}a@comma{}b@comma{}rc@rbracechar{}4@comma{} or 1.3.4 for patchlevel.
Alpha@comma{} beta or rc levels start at 1. Patchlevels start at 0 but are ignored
in the output@comma{} so that 1.3.0 appears as just 1.3.@*

A long version is something like@*
1.3 @lbracechar{}alpha@comma{}beta@comma{}release candidate@comma{}patchlevel@rbracechar{} 4 "Michael Brecker". As for
the short version@comma{} a patchlevel of 0 is ignored in the output.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/version․lisp file, , @t{version.lisp}} (file)
@end table
@end deffn


@c --------------------
@c Internal definitions
@c --------------------
@node Internal definitions, , Exported definitions, Definitions
@section Internal definitions
@menu
* Internal constants::
* Internal special variables::
* Internal macros::
* Internal functions::
* Internal generic functions::
* Internal conditions::
* Internal structures::
* Internal classes::
@end menu

@node Internal constants, Internal special variables, Internal definitions, Internal definitions
@subsection Constants
@defvr {Constant} +tiocgwinsz+
@anchor{go to the NET․DIDIERVERNA․CLON∶∶+TIOCGWINSZ+ constant}@c
@constantsubindex{+tiocgwinsz+}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end defvr
@defvr {Constant} offset-of-winsize-ws-col
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OFFSET-OF-WINSIZE-WS-COL constant}@c
@constantsubindex{offset-of-winsize-ws-col}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end defvr
@defvr {Constant} offset-of-winsize-ws-row
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OFFSET-OF-WINSIZE-WS-ROW constant}@c
@constantsubindex{offset-of-winsize-ws-row}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end defvr
@defvr {Constant} offset-of-winsize-ws-xpixel
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OFFSET-OF-WINSIZE-WS-XPIXEL constant}@c
@constantsubindex{offset-of-winsize-ws-xpixel}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end defvr
@defvr {Constant} offset-of-winsize-ws-ypixel
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OFFSET-OF-WINSIZE-WS-YPIXEL constant}@c
@constantsubindex{offset-of-winsize-ws-ypixel}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end defvr
@defvr {Constant} size-of-winsize
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SIZE-OF-WINSIZE constant}@c
@constantsubindex{size-of-winsize}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end defvr

@node Internal special variables, Internal macros, Internal constants, Internal definitions
@subsection Special variables
@defvr {Special Variable} *configuration*
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶*CONFIGURATION* special variable}@c
@specialsubindex{*configuration*}@c
The Clon configuration settings.@*
This variable contains a property list of configuration options.
Current options are:@*
- :swank-eval-in-emacs (Boolean)@*
- :restricted (Boolean)@*
- :dump (Boolean)@*

See section A.1 of the user manual for more information.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/configuration․lisp file, , @t{configuration.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *highlight-properties*
@anchor{go to the NET․DIDIERVERNA․CLON∶∶*HIGHLIGHT-PROPERTIES* special variable}@c
@specialsubindex{*highlight-properties*}@c
The highlight face properties.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *item-names*
@anchor{go to the NET․DIDIERVERNA․CLON∶∶*ITEM-NAMES* special variable}@c
@specialsubindex{*item-names*}@c
The list of defined item names.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end defvr

@node Internal macros, Internal functions, Internal special variables, Internal definitions
@subsection Macros
@deffn {Macro} {%defgroup} INTERNALP (&rest KEYS &key HEADER HIDDEN) &body FORMS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶%DEFGROUP macro}@c
@macrosubindex{%defgroup}@c
Define a new group.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/group․lisp file, , @t{group.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {accumulate} (INITIAL-VALUE) &body BODY
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ACCUMULATE macro}@c
@macrosubindex{accumulate}@c
Accumulate BODY forms in a list beginning with INITIAL-VALUE.
INITIAL-VALUE is not evaluated. BODY forms are accumulated only when their
value is non-nil.@*
If nothing to accumulate@comma{} then return nil instead of the list of
INITIAL-VALUE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {declare-valid-superclass} CLASS SUPERCLASS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DECLARE-VALID-SUPERCLASS macro}@c
@macrosubindex{declare-valid-superclass}@c
Validate SUPERCLASS classes for CLASS classes.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {defabstract} CLASS SUPER-CLASSES SLOTS &rest OPTIONS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DEFABSTRACT macro}@c
@macrosubindex{defabstract}@c
Like DEFCLASS@comma{} but define an abstract class.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {defindent} SYMBOL INDENT
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶DEFINDENT macro}@c
@macrosubindex{defindent}@c
Wrapper around `clindent' to avoid quoting SYMBOL and INDENT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/readtable․lisp file, , @t{readtable.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {defoption} CLASS SUPERCLASSES SLOTS &rest OPTIONS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DEFOPTION macro}@c
@macrosubindex{defoption}@c
Create a new option CLASS and register it with Clon.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {do-options} (OPT THERE) &body BODY
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DO-OPTIONS macro}@c
@macrosubindex{do-options}@c
Execute BODY with OPT bound to every option in THERE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {econd} &body CLAUSES
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ECOND macro}@c
@macrosubindex{econd}@c
Like COND@comma{} but signal an error if no clause evaluates to t.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {endpush} OBJECT PLACE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENDPUSH macro}@c
@macrosubindex{endpush}@c
Like push@comma{} but at the end.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {highlight-property-ecase} PROPERTY VALUE &body CLAUSES
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-ECASE macro}@c
@macrosubindex{highlight-property-ecase}@c
Create an ECASE form to extract PROPERTY's VALUE escape sequence.@*
Each clause looks like: (PROPERTY-NAME (VALUE-OR-VALUE-LIST ESCAPE-SEQUENCE)*).
The value-matching part will itself be enclosed in an ECASE expression.@*
In addition@comma{} the special clause syntax (BOOLEAN <PROPERTY-NAME> <YES> <NO>)
is a shortcut for: (PROPERTY-NAME ((on t) YES) ((off nil) NO)).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {map-frames} FUNCTION (SHEET &key REVERSE)
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAP-FRAMES macro}@c
@macrosubindex{map-frames}@c
Map FUNCTION over SHEET's frames.
If REVERSE@comma{} map in reverse order.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {maybe-pop-argument} CMDLINE OPTION CMDLINE-ARGUMENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAYBE-POP-ARGUMENT macro}@c
@macrosubindex{maybe-pop-argument}@c
Pop OPTION's argument from CMDLINE if needed.
If so@comma{} store it in CMDLINE-ARGUMENT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {maybe-push} OBJECT PLACE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAYBE-PUSH macro}@c
@macrosubindex{maybe-push}@c
Like push@comma{} but only if OBJECT is non-nil.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {replace-in-keys} (KEY VAL) KEYS THE-KEY FORM
@anchor{go to the NET․DIDIERVERNA․CLON∶∶REPLACE-IN-KEYS macro}@c
@macrosubindex{replace-in-keys}@c
Replace every occurrence of THE-KEY in KEYS with FORM.@*
At every KEYS round@comma{} KEY and VAL are bound to the current key-value pair.
FORM is evaluated each time and should return a key-value list.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {restartable-invalid-negated-syntax-error} (OPTION) &body BODY
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-INVALID-NEGATED-SYNTAX-ERROR macro}@c
@macrosubindex{restartable-invalid-negated-syntax-error}@c
Restartably throw an invalid-negated-syntax error.@*
The error relates to the command-line use of OPTION.@*
BODY constitutes the body of the only restart available@comma{}@*
use-short-call@comma{} and should act as if OPTION had been normally called by short
name.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {restartable-spurious-cmdline-argument-error} (OPTION NAME ARGUMENT) &body BODY
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-SPURIOUS-CMDLINE-ARGUMENT-ERROR macro}@c
@macrosubindex{restartable-spurious-cmdline-argument-error}@c
Restartably throw a spurious-cmdline-argument error.@*
The error relates to the command-line use of OPTION called by NAME with
ARGUMENT.@*
BODY constitutes the body of the only restart available@comma{} discard-argument@comma{} and
should act as if ARGUMENT had not been provided.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {with-context-error-handler} CONTEXT &body BODY
@anchor{go to the NET․DIDIERVERNA․CLON∶∶WITH-CONTEXT-ERROR-HANDLER macro}@c
@macrosubindex{with-context-error-handler}@c
Execute BODY with CONTEXT's error handler bound for CONDITION.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {with-winsize} VAR24 (&rest FIELD-VALUES-25) &body BODY26
@anchor{go to the NET․DIDIERVERNA․CLON∶∶WITH-WINSIZE macro}@c
@macrosubindex{with-winsize}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end deffn

@node Internal functions, Internal generic functions, Internal macros, Internal definitions
@subsection Functions
@deffn {Function} {%version} TYPE MAJOR MINOR STATUS LEVEL NAME
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶%VERSION function}@c
@functionsubindex{%version}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/version․lisp file, , @t{version.lisp}} (file)
@end table
@end deffn
@deffn {Function} {add-subface} FACE SUBFACE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ADD-SUBFACE function}@c
@functionsubindex{add-subface}@c
Add SUBFACE to FACE's subfaces and return it.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@deffn {Function} {allocate-winsize} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ALLOCATE-WINSIZE function}@c
@functionsubindex{allocate-winsize}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end deffn
@deffn {Function} {argument-popable-p} CMDLINE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-POPABLE-P function}@c
@functionsubindex{argument-popable-p}@c
Return true if the first CMDLINE item is an argument.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@end table
@end deffn
@deffn {Function} {attach-face-tree} FACE FACE-TREE &aux NEW-TREE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ATTACH-FACE-TREE function}@c
@functionsubindex{attach-face-tree}@c
Create a copy of FACE-TREE@comma{} attach it to FACE and return it.@*
Apart from the parenting information@comma{} the copied faces share slot values with
the original ones.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@deffn {Function} {available-right-margin} SHEET
@anchor{go to the NET․DIDIERVERNA․CLON∶∶AVAILABLE-RIGHT-MARGIN function}@c
@functionsubindex{available-right-margin}@c
Return SHEET's available right margin.@*
This margin is the first non-self margin specified by a frame. All inner self
frames can potentially write until the available right margin.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {beginning-of-string-p} BEGINNING STRING &optional IGNORE-CASE &aux LENGTH
@anchor{go to the NET․DIDIERVERNA․CLON∶∶BEGINNING-OF-STRING-P function}@c
@functionsubindex{beginning-of-string-p}@c
Check that STRING starts with BEGINNING.
If IGNORE-CASE@comma{} well@comma{} ignore case.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {clindent} SYMBOL INDENT
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶CLINDENT function}@c
@functionsubindex{clindent}@c
Send SYMBOL's INDENTation information to Emacs.@*
Emacs will set the 'common-lisp-indent-function property.@*
If INDENT is a symbol@comma{} use its indentation definition. Otherwise@comma{} INDENT is
considered as an indentation definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/readtable․lisp file, , @t{readtable.lisp}} (file)
@end table
@end deffn
@deffn {Function} {close-line} SHEET
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-LINE function}@c
@functionsubindex{close-line}@c
Close all frames on SHEET's current line and go to next line.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {close-sface} SHEET
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-SFACE function}@c
@functionsubindex{close-sface}@c
Close SHEET's current sface.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {closest-match} MATCH LIST &key IGNORE-CASE KEY &aux MATCH-LENGTH SHORTEST-DISTANCE CLOSEST-MATCH
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CLOSEST-MATCH function}@c
@functionsubindex{closest-match}@c
Return the LIST element closest to MATCH@comma{} or nil.@*
If IGNORE-CASE@comma{} well@comma{} ignore case.@*
KEY should provide a way to get a string from each LIST element.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {cmdline-convert} VALUED-OPTION CMDLINE-NAME CMDLINE-ARGUMENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-CONVERT function}@c
@functionsubindex{cmdline-convert}@c
Convert CMDLINE-ARGUMENT to VALUED-OPTION's value.@*
This function is used when the conversion comes from a command-line usage of
VALUED-OPTION@comma{} called by CMDLINE-NAME@comma{} and intercepts invalid-argument errors
to raise the higher level invalid-cmdline-argument error instead.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@end table
@end deffn
@deffn {Function} {cmdline-option-name} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-NAME function}@c
@functionsubindex{cmdline-option-name}@c
@deffnx {Function} {(setf cmdline-option-name)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-NAME❩ function}@c
@functionsubindex{(setf cmdline-option-name)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {cmdline-option-option} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-OPTION function}@c
@functionsubindex{cmdline-option-option}@c
@deffnx {Function} {(setf cmdline-option-option)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-OPTION❩ function}@c
@functionsubindex{(setf cmdline-option-option)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {cmdline-option-p} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-P function}@c
@functionsubindex{cmdline-option-p}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {cmdline-option-source} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-SOURCE function}@c
@functionsubindex{cmdline-option-source}@c
@deffnx {Function} {(setf cmdline-option-source)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-SOURCE❩ function}@c
@functionsubindex{(setf cmdline-option-source)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {cmdline-option-value} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-VALUE function}@c
@functionsubindex{cmdline-option-value}@c
@deffnx {Function} {(setf cmdline-option-value)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-VALUE❩ function}@c
@functionsubindex{(setf cmdline-option-value)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {complete-string} BEGINNING COMPLETE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COMPLETE-STRING function}@c
@functionsubindex{complete-string}@c
Complete BEGINNING with the rest of COMPLETE in parentheses.
For instance@comma{} completing 'he' with 'help' will produce 'he(lp)'.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {copy-cmdline-option} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COPY-CMDLINE-OPTION function}@c
@functionsubindex{copy-cmdline-option}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {copy-frame} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COPY-FRAME function}@c
@functionsubindex{copy-frame}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {copy-highlight-frame} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COPY-HIGHLIGHT-FRAME function}@c
@functionsubindex{copy-highlight-frame}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {copy-highlight-property-instance} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COPY-HIGHLIGHT-PROPERTY-INSTANCE function}@c
@functionsubindex{copy-highlight-property-instance}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {current-frame} SHEET
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-FRAME function}@c
@functionsubindex{current-frame}@c
Return SHEET's current frame.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {current-left-margin} SHEET
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-LEFT-MARGIN function}@c
@functionsubindex{current-left-margin}@c
Return SHEET's current left margin.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {current-right-margin} SHEET
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-RIGHT-MARGIN function}@c
@functionsubindex{current-right-margin}@c
Return SHEET's current right margin.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {current-sface} SHEET
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CURRENT-SFACE function}@c
@functionsubindex{current-sface}@c
Return SHEET's current sface or nil.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {directory-pathname-p} PATHNAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DIRECTORY-PATHNAME-P function}@c
@functionsubindex{directory-pathname-p}@c
Return true if PATHNAME denotes a directory.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/path․lisp file, , @t{path.lisp}} (file)
@end table
@end deffn
@deffn {Function} {environment-convert} VALUED-OPTION ENV-VAL
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENT-CONVERT function}@c
@functionsubindex{environment-convert}@c
Convert ENV-VAL to VALUED-OPTION's value.@*
This function is used when the conversion comes from an environment variable
associated with VALUED-OPTION@comma{} and intercepts invalid-argument errors@*
to raise the higher level invalid-environment-value error instead.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/environ․lisp file, , @t{environ.lisp}} (file)
@end table
@end deffn
@deffn {Function} {exit-abnormally} ERROR
@anchor{go to the NET․DIDIERVERNA․CLON∶∶EXIT-ABNORMALLY function}@c
@functionsubindex{exit-abnormally}@c
Print ERROR on *ERROR-OUTPUT* and exit with status code 1.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {face-highlight-property-set-p} FACE PROPERTY
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FACE-HIGHLIGHT-PROPERTY-SET-P function}@c
@functionsubindex{face-highlight-property-set-p}@c
Return t if PROPERTY is set explicitely in FACE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@deffn {Function} {face-highlight-property-value} FACE PROPERTY
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FACE-HIGHLIGHT-PROPERTY-VALUE function}@c
@functionsubindex{face-highlight-property-value}@c
Return PROPERTY's value in FACE.@*
Since faces inherit highlight properties@comma{} the actual value might come from one
of FACE's ancestors.@*
if PROPERTY is not et@comma{} return nil.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@deffn {Function} {find-sface} SFACE NAME &aux SIBLING SUB-SFACE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FIND-SFACE function}@c
@functionsubindex{find-sface}@c
Find an sface starting at SFACE named NAME.@*
If the sface can't be found in SFACE's face tree@comma{} find one in SFACE's sibling
instead@comma{} and make a copy of it.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {flush-sheet} SHEET
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FLUSH-SHEET function}@c
@functionsubindex{flush-sheet}@c
Flush SHEET.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {frame-left-margin} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FRAME-LEFT-MARGIN function}@c
@functionsubindex{frame-left-margin}@c
@deffnx {Function} {(setf frame-left-margin)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-LEFT-MARGIN❩ function}@c
@functionsubindex{(setf frame-left-margin)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {frame-p} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FRAME-P function}@c
@functionsubindex{frame-p}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {frame-right-margin} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FRAME-RIGHT-MARGIN function}@c
@functionsubindex{frame-right-margin}@c
@deffnx {Function} {(setf frame-right-margin)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-RIGHT-MARGIN❩ function}@c
@functionsubindex{(setf frame-right-margin)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {frame-sface} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FRAME-SFACE function}@c
@functionsubindex{frame-sface}@c
@deffnx {Function} {(setf frame-sface)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-SFACE❩ function}@c
@functionsubindex{(setf frame-sface)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {get-top-padding} SFACE ITEMS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶GET-TOP-PADDING function}@c
@functionsubindex{get-top-padding}@c
Return top padding of the next item in ITEMS that will print under SFACE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {getenv} VARIABLE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶GETENV function}@c
@functionsubindex{getenv}@c
Get environment VARIABLE's value. VARIABLE may be null.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {help-spec-items-will-print} SFACE ITEMS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-ITEMS-WILL-PRINT function}@c
@functionsubindex{help-spec-items-will-print}@c
Return t if at least one of ITEMS will print under SFACE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {highlight-frame-highlight-property-instances} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-HIGHLIGHT-PROPERTY-INSTANCES function}@c
@functionsubindex{highlight-frame-highlight-property-instances}@c
@deffnx {Function} {(setf highlight-frame-highlight-property-instances)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-HIGHLIGHT-PROPERTY-INSTANCES❩ function}@c
@functionsubindex{(setf highlight-frame-highlight-property-instances)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {highlight-frame-left-margin} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-LEFT-MARGIN function}@c
@functionsubindex{highlight-frame-left-margin}@c
@deffnx {Function} {(setf highlight-frame-left-margin)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-LEFT-MARGIN❩ function}@c
@functionsubindex{(setf highlight-frame-left-margin)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {highlight-frame-p} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-P function}@c
@functionsubindex{highlight-frame-p}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {highlight-frame-right-margin} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-RIGHT-MARGIN function}@c
@functionsubindex{highlight-frame-right-margin}@c
@deffnx {Function} {(setf highlight-frame-right-margin)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-RIGHT-MARGIN❩ function}@c
@functionsubindex{(setf highlight-frame-right-margin)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {highlight-frame-sface} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-SFACE function}@c
@functionsubindex{highlight-frame-sface}@c
@deffnx {Function} {(setf highlight-frame-sface)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-SFACE❩ function}@c
@functionsubindex{(setf highlight-frame-sface)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {highlight-property-instance-escape-sequence} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-ESCAPE-SEQUENCE function}@c
@functionsubindex{highlight-property-instance-escape-sequence}@c
Return highlight property INSTANCE's escape sequence.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {highlight-property-instance-name} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-NAME function}@c
@functionsubindex{highlight-property-instance-name}@c
@deffnx {Function} {(setf highlight-property-instance-name)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-PROPERTY-INSTANCE-NAME❩ function}@c
@functionsubindex{(setf highlight-property-instance-name)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {highlight-property-instance-p} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-P function}@c
@functionsubindex{highlight-property-instance-p}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {highlight-property-instance-value} INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-VALUE function}@c
@functionsubindex{highlight-property-instance-value}@c
@deffnx {Function} {(setf highlight-property-instance-value)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-PROPERTY-INSTANCE-VALUE❩ function}@c
@functionsubindex{(setf highlight-property-instance-value)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {home-directory} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY function}@c
@functionsubindex{home-directory}@c
Return user's home directory in canonical form.@*
If the user's home directory cannot be computed@comma{} signal a warning and return
NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {i-reader} STREAM SUBCHAR ARG
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶I-READER function}@c
@functionsubindex{i-reader}@c
Construct a call to `defindent' by reading an argument list from STREAM.
This dispatch macro character function is installed on @hashchar{}i in the
NET.DIDIERVERNA.CLON named readtable.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/readtable․lisp file, , @t{readtable.lisp}} (file)
@end table
@end deffn
@deffn {Function} {list-to-string} LIST &key KEY SEPARATOR
@anchor{go to the NET․DIDIERVERNA․CLON∶∶LIST-TO-STRING function}@c
@functionsubindex{list-to-string}@c
Return a SEPARATOR-separated string of all LIST elements.@*
- KEY should provide a way to get a string from each LIST element.
- SEPARATOR is the string to insert between elements.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {macosp} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MACOSP function}@c
@functionsubindex{macosp}@c
Return t if running on Mac OS.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-cmdline-option} &key (NAME NAME) (OPTION OPTION) (VALUE VALUE) (SOURCE SOURCE)
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-CMDLINE-OPTION function}@c
@functionsubindex{make-cmdline-option}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-frame} &key (SFACE SFACE) (LEFT-MARGIN LEFT-MARGIN) (RIGHT-MARGIN RIGHT-MARGIN)
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FRAME function}@c
@functionsubindex{make-frame}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-highlight-frame} &key (SFACE SFACE) (LEFT-MARGIN LEFT-MARGIN) (RIGHT-MARGIN RIGHT-MARGIN) (HIGHLIGHT-PROPERTY-INSTANCES HIGHLIGHT-PROPERTY-INSTANCES)
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-HIGHLIGHT-FRAME function}@c
@functionsubindex{make-highlight-frame}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-highlight-property-instance} &key (NAME NAME) (VALUE VALUE)
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-HIGHLIGHT-PROPERTY-INSTANCE function}@c
@functionsubindex{make-highlight-property-instance}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-internal-enum} LONG-NAME DESCRIPTION &rest KEYS &key ARGUMENT-NAME ARGUMENT-TYPE ENUM ENV-VAR FALLBACK-VALUE DEFAULT-VALUE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-ENUM function}@c
@functionsubindex{make-internal-enum}@c
Make a new internal (Clon-specific) enum option.@*
- LONG-NAME is the option's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the options's description.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENUM is the set of possible values.@*
- ENV-VAR is the option's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/enum․lisp file, , @t{enum.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-internal-flag} LONG-NAME DESCRIPTION &rest KEYS &key ENV-VAR HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-FLAG function}@c
@functionsubindex{make-internal-flag}@c
Make a new internal (Clon-specific) flag.@*
- LONG-NAME is the flag's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the flag's description.@*
- ENV-VAR is the flag's associated environment variable@comma{} sans the 'CLON_'
  prefix. It default to nil.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/flag․lisp file, , @t{flag.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-internal-lispobj} LONG-NAME DESCRIPTION &rest KEYS &key ARGUMENT-NAME ARGUMENT-TYPE ENV-VAR TYPESPEC FALLBACK-VALUE DEFAULT-VALUE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-LISPOBJ function}@c
@functionsubindex{make-internal-lispobj}@c
Make a new internal (Clon-specific) string option.@*
- LONG-NAME is the option's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the options's description.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- TYPESPEC is a type specifier the option's value should satisfy.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/lispobj․lisp file, , @t{lispobj.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-internal-path} LONG-NAME DESCRIPTION &rest KEYS &key ARGUMENT-NAME ARGUMENT-TYPE ENV-VAR FALLBACK-VALUE DEFAULT-VALUE TYPE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-PATH function}@c
@functionsubindex{make-internal-path}@c
Make a new internal (Clon-specific) path option.@*
- LONG-NAME is the option's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the options's description.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- TYPE is the pathname type. It can be one of :file@comma{} :directory@comma{} :file-list@comma{}
  :directory-list or nil meaning that everything is allowed.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/path․lisp file, , @t{path.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-internal-stropt} LONG-NAME DESCRIPTION &rest KEYS &key ARGUMENT-NAME ARGUMENT-TYPE ENV-VAR FALLBACK-VALUE DEFAULT-VALUE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-STROPT function}@c
@functionsubindex{make-internal-stropt}@c
Make a new internal (Clon-specific) string option.@*
- LONG-NAME is the option's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the options's description.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the option's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments)@comma{} if any.@*
- DEFAULT-VALUE is the option's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/stropt․lisp file, , @t{stropt.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-internal-switch} LONG-NAME DESCRIPTION &rest KEYS &key ARGUMENT-STYLE ARGUMENT-TYPE ENV-VAR DEFAULT-VALUE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-SWITCH function}@c
@functionsubindex{make-internal-switch}@c
Make a new internal (Clon-specific) switch.@*
- LONG-NAME is the switch's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the switch's description.@*
- ARGUMENT-STYLE is the switch's argument display style. It can be one of
  :yes/no@comma{} :on/off@comma{} :true/false@comma{} :yup/nope or :yeah/nah.@*
  It defaults to :yes/no.@*
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENV-VAR is the switch's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- DEFAULT-VALUE is the switch's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/switch․lisp file, , @t{switch.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-internal-text} &rest KEYS &key CONTENTS HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-TEXT function}@c
@functionsubindex{make-internal-text}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/text․lisp file, , @t{text.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-internal-xswitch} LONG-NAME DESCRIPTION &rest KEYS &key ARGUMENT-NAME ARGUMENT-TYPE ENUM ENV-VAR DEFAULT-VALUE HIDDEN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-INTERNAL-XSWITCH function}@c
@functionsubindex{make-internal-xswitch}@c
Make a new internal (Clon-specific) xswitch.@*
- LONG-NAME is the xswitch's long-name@comma{} sans the 'clon-' prefix.
  (Internal options don't have short names.)@*
- DESCRIPTION is the xswitch's description.@*
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required@comma{} :mandatory or :optional (:required and
  :mandatory are synonyms).@*
  It defaults to :optional.@*
- ENUM is the set of possible non-boolean values.@*
- ENV-VAR is the xswitch's associated environment variable@comma{} sans the 'CLON_'
  prefix. It defaults to nil.@*
- DEFAULT-VALUE is the xswitch's default value@comma{} if any.@*
- When HIDDEN@comma{} the option doesn't appear in help strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/xswitch․lisp file, , @t{xswitch.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-raw-face-tree} &optional FACE-CLASS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-RAW-FACE-TREE function}@c
@functionsubindex{make-raw-face-tree}@c
Make a raw (boring yet functional) face tree.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-raw-sface} SIBLING &aux SFACE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-RAW-SFACE function}@c
@functionsubindex{make-raw-sface}@c
Return a new SFace based on SIBLING.@*
This function does not consider SIBLING as a face tree:@*
only face properties are copied; the face parent and children are set to nil.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-sheet} &rest KEYS &key OUTPUT-STREAM SEARCH-PATH THEME LINE-WIDTH HIGHLIGHT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-SHEET function}@c
@functionsubindex{make-sheet}@c
Make a new SHEET.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {match-option} OPTION &key SHORT-NAME LONG-NAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MATCH-OPTION function}@c
@functionsubindex{match-option}@c
Try to match OPTION against SHORT-NAME@comma{} LONG-NAME.
If OPTION matches@comma{} return the name that matched.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@end table
@end deffn
@deffn {Function} {open-line} SHEET
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPEN-LINE function}@c
@functionsubindex{open-line}@c
Open all frames on SHEET's current line.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {open-next-line} SHEET
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPEN-NEXT-LINE function}@c
@functionsubindex{open-next-line}@c
Close SHEET's current line and open the next one.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {open-sface} SHEET SFACE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPEN-SFACE function}@c
@functionsubindex{open-sface}@c
Create a frame for SFACE and open it.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {option-abbreviation-distance} OPTION PARTIAL-NAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPTION-ABBREVIATION-DISTANCE function}@c
@functionsubindex{option-abbreviation-distance}@c
Return the distance between OPTION's long name and PARTIAL-NAME.
If PARTIAL-NAME does not abbreviate OPTION's long name@comma{} return
MOST-POSITIVE-FIXNUM.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@end table
@end deffn
@deffn {Function} {option-call-p} STR
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPTION-CALL-P function}@c
@functionsubindex{option-call-p}@c
Return true if STR looks like an option call.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@end table
@end deffn
@deffn {Function} {parent-generation} FACE PARENT-NAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PARENT-GENERATION function}@c
@functionsubindex{parent-generation}@c
Return FACE's parent generation for PARENT-NAME.@*
That is@comma{} 1 if PARENT-NAME names FACE's parent@comma{} 2 if it names its grand-parent
etc. If PARENT-NAME does not name one of FACE's ancestors@comma{} trigger an error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@deffn {Function} {pathname-component-null-p} COMPONENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PATHNAME-COMPONENT-NULL-P function}@c
@functionsubindex{pathname-component-null-p}@c
Return true if COMPONENT is either null or :unspecific.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/path․lisp file, , @t{path.lisp}} (file)
@end table
@end deffn
@deffn {Function} {pop-frame} SHEET
@anchor{go to the NET․DIDIERVERNA․CLON∶∶POP-FRAME function}@c
@functionsubindex{pop-frame}@c
Pop SHEET's current frame.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {potential-pack-char} OPTION &optional AS-STRING
@anchor{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-CHAR function}@c
@functionsubindex{potential-pack-char}@c
Return OPTION's potential pack character@comma{} if any.
If AS-STRING@comma{} return a string of that character.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@end table
@end deffn
@deffn {Function} {princ-char} SHEET CHAR
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINC-CHAR function}@c
@functionsubindex{princ-char}@c
Princ CHAR on SHEET's stream and increment the column position.@*
The effect of printing CHAR must be exactly to move right by one column@comma{} so
control characters@comma{} as well as newlines and tabs are forbidden here.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {princ-highlight-property-instances} SHEET INSTANCES
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINC-HIGHLIGHT-PROPERTY-INSTANCES function}@c
@functionsubindex{princ-highlight-property-instances}@c
Princ highlight proeprty INSTANCES on SHEET's stream.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {princ-spaces} SHEET NUMBER
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINC-SPACES function}@c
@functionsubindex{princ-spaces}@c
Princ NUMBER spaces to SHEET's stream and update the column position.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {princ-string} SHEET STRING
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINC-STRING function}@c
@functionsubindex{princ-string}@c
Princ STRING on SHEET's stream and update the column position.@*
The effect of printing STRING must be exactly to move right by the
corresponding string length@comma{} so control characters@comma{} as well as newlines and
tabs are forbidden here.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {print-error} ERROR &optional INTERACTIVEP &aux STREAM *PRINT-ESCAPE*
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINT-ERROR function}@c
@functionsubindex{print-error}@c
Print ERROR on *ERROR-OUTPUT*.@*
When INTERACTIVEP@comma{} print on *QUERY-IO* instead.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {print-faced-help-spec} SHEET SFACE ITEMS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINT-FACED-HELP-SPEC function}@c
@functionsubindex{print-faced-help-spec}@c
Print all help specification ITEMS on SHEET with SFACE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {print-help} SHEET HELP
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP function}@c
@functionsubindex{print-help}@c
Open the toplevel help face and print HELP on SHEET with it.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {print-string} SHEET STRING
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINT-STRING function}@c
@functionsubindex{print-string}@c
Output STRING to SHEET.@*
STRING is output within the current frame's bounds.@*
Spacing characters are honored but newlines might replace spaces when the
output reaches the rightmost bound.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {push-frame} SHEET FRAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PUSH-FRAME function}@c
@functionsubindex{push-frame}@c
Push a new frame to SHEET's frames.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {putenv} VARIABLE VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PUTENV function}@c
@functionsubindex{putenv}@c
Set environment VARIABLE to VALUE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {reach-column} SHEET COLUMN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶REACH-COLUMN function}@c
@functionsubindex{reach-column}@c
Reach COLUMN on SHEET by princ'ing spaces.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {read-argument} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶READ-ARGUMENT function}@c
@functionsubindex{read-argument}@c
Read an option argument from standard input.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@deffn {Function} {read-call} &optional NEGATED
@anchor{go to the NET․DIDIERVERNA․CLON∶∶READ-CALL function}@c
@functionsubindex{read-call}@c
Read an option's call or pack from standard input.@*
If NEGATED@comma{} read a negated call or pack. Otherwise@comma{} read a short call or pack.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {read-env-val} ENV-VAR
@anchor{go to the NET․DIDIERVERNA․CLON∶∶READ-ENV-VAL function}@c
@functionsubindex{read-env-val}@c
Read ENV-VAR's new value from standard input.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/environ․lisp file, , @t{environ.lisp}} (file)
@end table
@end deffn
@deffn {Function} {read-long-name} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶READ-LONG-NAME function}@c
@functionsubindex{read-long-name}@c
Read an option's long name from standard input.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {read-sface-tree} PATHNAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶READ-SFACE-TREE function}@c
@functionsubindex{read-sface-tree}@c
Read an sface tree from PATHNAME.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {read-value} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶READ-VALUE function}@c
@functionsubindex{read-value}@c
Read an option value from standard input.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@deffn {Function} {release-status-number} RELEASE-STATUS
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶RELEASE-STATUS-NUMBER function}@c
@functionsubindex{release-status-number}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/version․lisp file, , @t{version.lisp}} (file)
@end table
@end deffn
@deffn {Function} {remove-keys} KEYS &rest REMOVED
@anchor{go to the NET․DIDIERVERNA․CLON∶∶REMOVE-KEYS function}@c
@functionsubindex{remove-keys}@c
Return a new property list from KEYS without REMOVED ones.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {replace-key} REPLACEMENT KEYS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶REPLACE-KEY function}@c
@functionsubindex{replace-key}@c
Return a new property list from KEYS with REPLACEMENT.@*
REPLACEMENT can take the following forms:@*
- :KEY@*
  The effect is to remove :KEY from KEYS@comma{} as per REMOVE-KEYS.@*
- (:KEY :NEW-KEY)@*
  The effect is to replace :KEY with :NEW-KEY@comma{} leaving the values unchanged.
- (:KEY :NEW-KEY (VAL-OR-VALS NEW-VAL)*)@comma{} with VAL-OR-VALS being@*
  either a value or a list of values. The effect is to replace :KEY with
  :NEW-KEY and a value matching one of the VAL-OR-VALS with the
  corresponding NEW-VAL. Values not matching any VAL-OR-VALS remain unchanged.
- (:KEY (VAL-OR-VALS :NEW-KEY NEW-VAL...)*)@comma{} with VAL-OR-VALS as above. The
  effect is the same as above@comma{} but :NEW-KEY additionally depends on the
  matched value. If multiple :NEW-KEY NEW-VAL couples are provided@comma{} that many
  new keys are inserted along with their values. For values not matching any
  VAL-OR-VALS@comma{} :KEY and its value remain unchanged.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {replace-keys} KEYS &rest REPLACEMENTS &aux NEW-KEYS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶REPLACE-KEYS function}@c
@functionsubindex{replace-keys}@c
Return a new property list from KEYS with REPLACEMENTS.@*
See REPLACE-KEY for more information on the replacement syntax.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {restart-on-error} ERROR
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RESTART-ON-ERROR function}@c
@functionsubindex{restart-on-error}@c
Print ERROR and offer available restarts on *QUERY-IO*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {restartable-check} VALUED-OPTION VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CHECK function}@c
@functionsubindex{restartable-check}@c
Restartably check that VALUE is valid for VALUED-OPTION.@*
The only restart available@comma{} use-value@comma{} offers to try a different value from
the one that was provided.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@deffn {Function} {restartable-cmdline-convert} VALUED-OPTION CMDLINE-NAME CMDLINE-ARGUMENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CMDLINE-CONVERT function}@c
@functionsubindex{restartable-cmdline-convert}@c
Restartably convert CMDLINE-ARGUMENT to VALUED-OPTION's value.@*
This function is used when the conversion comes from a command-line usage of
VALUED-OPTION@comma{} called by CMDLINE-NAME.@*

As well as conversion errors@comma{} this function might raise a
missing-cmdline-argument error if CMDLINE-ARGUMENT is nil and an argument is
required.@*

Available restarts are (depending on the context):@*
- use-fallback-value: return FALLBACK-VALUE@comma{}@*
- use-default-value: return VALUED-OPTION's default value@comma{}@*
- use-value: return another (already converted) value@comma{}@*
- use-argument: return the conversion of another argument.@*

Return two values: VALUED-OPTION's value and the actual value source.
The value source may be :cmdline@comma{} :fallback or :default.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@end table
@end deffn
@deffn {Function} {restartable-cmdline-junk-error} JUNK
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CMDLINE-JUNK-ERROR function}@c
@functionsubindex{restartable-cmdline-junk-error}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {restartable-convert} VALUED-OPTION ARGUMENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-CONVERT function}@c
@functionsubindex{restartable-convert}@c
Restartably convert ARGUMENT to VALUED-OPTION's value.
Available restarts are:@*
- use-default-value: return OPTION's default value@comma{}@*
- use-value: return another (already converted) value@comma{}
- use-argument: return the conversion of another argument.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@deffn {Function} {restartable-environment-convert} VALUED-OPTION ENV-VAL
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RESTARTABLE-ENVIRONMENT-CONVERT function}@c
@functionsubindex{restartable-environment-convert}@c
Restartably convert ENV-VAL to VALUED-OPTION's value.@*
This function is used when the conversion comes from an environment variable
associated with VALUED-OPTION.@*

Available restarts are:@*
- use-default-value: return VALUED-OPTION's default value@comma{}@*
- use-value: return another (already converted) value@comma{}@*
- use-argument: return the conversion of another argument@comma{}@*
- modify-env: modify the environment variable's value.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/environ․lisp file, , @t{environ.lisp}} (file)
@end table
@end deffn
@deffn {Function} {restrict-because} REASON
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶RESTRICT-BECAUSE function}@c
@functionsubindex{restrict-because}@c
Put Clon in restricted mode because of REASON.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/termio․lisp file, , @t{termio.lisp}} (file)
@end table
@end deffn
@deffn {Function} {safe-left-margin} SHEET MARGIN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SAFE-LEFT-MARGIN function}@c
@functionsubindex{safe-left-margin}@c
Return either MARGIN or a safe value instead.@*
To be safe@comma{} margin must be greater than the current left margin and smaller
than the currently available margin.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {safe-right-margin} SHEET LEFT-MARGIN MARGIN
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SAFE-RIGHT-MARGIN function}@c
@functionsubindex{safe-right-margin}@c
Return either MARGIN or a safe value instead.@*
To be safe@comma{} margin must be greater than LEFT-MARGIN and smaller
than the currently available right margin.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {search-branch} FACE NAMES
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-BRANCH function}@c
@functionsubindex{search-branch}@c
Search for a branch of faces named NAMES starting at FACE.@*
The branch is searched for as a direct subbranch of FACE@comma{} or as a direct
subbranch of FACE's ancestors.@*
If a branch is found@comma{} return its leaf face. Otherwise return nil.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@deffn {Function} {search-face} FACE NAME &optional ERROR-ME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-FACE function}@c
@functionsubindex{search-face}@c
Search for a face named NAME starting at FACE.@*
The face is looked for as a direct subface of FACE (in which case it is simply
returned)@comma{} or up in the hierarchy and by successive upper branches (in which
case it is copied and attached to FACE).@*
If ERROR-ME@comma{} trigger an error if no face is found; otherwise@comma{} return nil.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@deffn {Function} {search-option} CONTEXT &rest KEYS &key SHORT-NAME LONG-NAME PARTIAL-NAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-OPTION function}@c
@functionsubindex{search-option}@c
Search for an option in CONTEXT.@*
The search is done with SHORT-NAME@comma{} LONG-NAME@comma{} or PARTIAL-NAME.@*
In case of a PARTIAL-NAME search@comma{} look for an option the long name of which
begins with it.@*
In case of multiple matches by PARTIAL-NAME@comma{} the longest match is selected.
When such an option exists@comma{} return wo values:@*
- the option itself@comma{}@*
- the name used to find the option@comma{} possibly completed if partial.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {search-option-by-abbreviation} CONTEXT PARTIAL-NAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-OPTION-BY-ABBREVIATION function}@c
@functionsubindex{search-option-by-abbreviation}@c
Search for option abbreviated with PARTIAL-NAME in CONTEXT.
When such an option exists@comma{} return two values:@*
- the option itself@comma{}@*
- the completed name.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {search-option-by-name} CONTEXT &rest KEYS &key SHORT-NAME LONG-NAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-OPTION-BY-NAME function}@c
@functionsubindex{search-option-by-name}@c
Search for option with either SHORT-NAME or LONG-NAME in CONTEXT.
When such an option exists@comma{} return two values:@*
- the option itself@comma{}@*
- the name that matched.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {search-sticky-option} CONTEXT NAMEARG
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-STICKY-OPTION function}@c
@functionsubindex{search-sticky-option}@c
Search for a sticky option in CONTEXT@comma{} matching NAMEARG.@*
NAMEARG is the concatenation of the option's short name and its argument.
In case of multiple matches@comma{} the option with the longest name is selected.
When such an option exists@comma{} return two values:@*
- the option itself@comma{}@*
- the argument part of NAMEARG.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Function} {select-keys} KEYS &rest SELECTED
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SELECT-KEYS function}@c
@functionsubindex{select-keys}@c
Return a new property list from KEYS with only SELECTED ones.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {split-path} PATH
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SPLIT-PATH function}@c
@functionsubindex{split-path}@c
Split PATH into a list of directories.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/path․lisp file, , @t{path.lisp}} (file)
@end table
@end deffn
@deffn {Function} {stream-line-width} STREAM &aux HANDLE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STREAM-LINE-WIDTH function}@c
@functionsubindex{stream-line-width}@c
Get STREAM's line width.@*
Return two values:@*
- the stream's line width@comma{} or nil if it can't be computed
  (typically when the stream does not denote a tty)@comma{}
- an error message if the operation failed.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․termio/termio․lisp file, , @t{termio.lisp}} (file)
@end table
@end deffn
@deffn {Function} {try-read-sface-tree} PATHNAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶TRY-READ-SFACE-TREE function}@c
@functionsubindex{try-read-sface-tree}@c
Read an sface tree from PATHNAME if it exists or return nil.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {try-read-theme} PATHNAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶TRY-READ-THEME function}@c
@functionsubindex{try-read-theme}@c
Read a theme from PATHNAME or PATHNAME.cth if it exists or return nil.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Function} {winsize-ws-col} STRUCT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶WINSIZE-WS-COL function}@c
@functionsubindex{winsize-ws-col}@c
@deffnx {Function} {(setf winsize-ws-col)} VAR-21 STRUCT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF WINSIZE-WS-COL❩ function}@c
@functionsubindex{(setf winsize-ws-col)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end deffn
@deffn {Function} {winsize-ws-row} STRUCT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶WINSIZE-WS-ROW function}@c
@functionsubindex{winsize-ws-row}@c
@deffnx {Function} {(setf winsize-ws-row)} VAR-0 STRUCT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF WINSIZE-WS-ROW❩ function}@c
@functionsubindex{(setf winsize-ws-row)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end deffn
@deffn {Function} {winsize-ws-xpixel} STRUCT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶WINSIZE-WS-XPIXEL function}@c
@functionsubindex{winsize-ws-xpixel}@c
@deffnx {Function} {(setf winsize-ws-xpixel)} VAR-22 STRUCT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF WINSIZE-WS-XPIXEL❩ function}@c
@functionsubindex{(setf winsize-ws-xpixel)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end deffn
@deffn {Function} {winsize-ws-ypixel} STRUCT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶WINSIZE-WS-YPIXEL function}@c
@functionsubindex{winsize-ws-ypixel}@c
@deffnx {Function} {(setf winsize-ws-ypixel)} VAR-23 STRUCT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF WINSIZE-WS-YPIXEL❩ function}@c
@functionsubindex{(setf winsize-ws-ypixel)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@url{file:///Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common⎵Lisp/clon/termio/sbcl/constants.lisp-temp, ignore, @t{/Users/didier/.cache/common-lisp/sbcl-2.1.2.72-f990ff7ad-macosx-x64/Users/didier/Documents/Science/Software/Common Lisp/clon/termio/sbcl/constants.lisp-temp}}
@end table
@end deffn
@deffn {Function} {~-reader} STREAM CHAR
@anchor{go to the NET․DIDIERVERNA․CLON․SETUP∶∶~-READER function}@c
@functionsubindex{~-reader}@c
Read a series of ~"string" to be concatenated together.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON․SETUP package, , @t{net.didierverna.clon.setup}}
@item Source
@ref{go to the net․didierverna․clon․setup/src/readtable․lisp file, , @t{readtable.lisp}} (file)
@end table
@end deffn

@node Internal generic functions, Internal conditions, Internal functions, Internal definitions
@subsection Generic functions
@deffn {Generic Function} {argument} CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT generic function}@c
@genericsubindex{argument}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {argument} (CONDITION @t{unknown-cmdline-option-error})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR method}@c
@methodsubindex{argument}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Method} {argument} (CONDITION @t{spurious-cmdline-argument})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶SPURIOUS-CMDLINE-ARGUMENT method}@c
@methodsubindex{argument}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@end table
@end deffn
@deffn {Method} {argument} (CONDITION @t{invalid-argument})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT method}@c
@methodsubindex{argument}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {argument-name} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-NAME generic function}@c
@genericsubindex{argument-name}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {argument-name} (VALUED-OPTION @t{valued-option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-NAME NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method}@c
@methodsubindex{argument-name}@c
The option's argument display name.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {argument-required-p} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-REQUIRED-P generic function}@c
@genericsubindex{argument-required-p}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {argument-required-p} (VALUED-OPTION @t{valued-option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-REQUIRED-P NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method}@c
@methodsubindex{argument-required-p}@c
Whether the option's argument is required.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {argument-style} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLE generic function}@c
@genericsubindex{argument-style}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {argument-style} (SWITCH-BASE @t{switch-base})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLE NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method}@c
@methodsubindex{argument-style}@c
The selected argument style.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/switch-base․lisp file, , @t{switch-base.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {argument-styles} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLES generic function}@c
@genericsubindex{argument-styles}@c
@deffnx {Generic Function} {(setf argument-styles)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ARGUMENT-STYLES❩ generic function}@c
@genericsubindex{(setf argument-styles)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {argument-styles} (SWITCH-BASE @t{switch-base})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method}@c
@methodsubindex{argument-styles}@c
@deffnx {Method} {(setf argument-styles)} NEW-VALUE (SWITCH-BASE @t{switch-base})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ARGUMENT-STYLES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method}@c
@methodsubindex{(setf argument-styles)}@c
The possible argument styles.@*
The position of every argument style in the list must correspond to the
position of the associated strings in the yes-values and no-values slots.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/switch-base․lisp file, , @t{switch-base.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {background} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶BACKGROUND generic function}@c
@genericsubindex{background}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {background} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶BACKGROUND NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{background}@c
The face background.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {blink} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶BLINK generic function}@c
@genericsubindex{blink}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {blink} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶BLINK NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{blink}@c
The face's blink speed.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {bottom-padding} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶BOTTOM-PADDING generic function}@c
@genericsubindex{bottom-padding}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {bottom-padding} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶BOTTOM-PADDING NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{bottom-padding}@c
The face bottom padding.@*
This property can take the following forms:@*
- nil: the next output can start right at the end of this face's@comma{}
- 0: the next output should start on the next line@comma{}@*
- N>0: there should be N empty lines before the next output.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {check} VALUED-OPTION VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK generic function}@c
@genericsubindex{check}@c
Check that VALUE is valid for VALUED-OPTION.@*
If VALUE is valid@comma{} return it. Otherwise@comma{} raise an invalid-value error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item Methods
@deffn {Method} {check} (XSWITCH @t{xswitch}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method}@c
@methodsubindex{check}@c
Check that VALUE is valid for XSWITCH.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/xswitch․lisp file, , @t{xswitch.lisp}} (file)
@end table
@end deffn
@deffn {Method} {check} (ENUM @t{enum}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method}@c
@methodsubindex{check}@c
Check that VALUE is valid for ENUM.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/enum․lisp file, , @t{enum.lisp}} (file)
@end table
@end deffn
@deffn {Method} {check} (PATH @t{path}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method}@c
@methodsubindex{check}@c
Check that VALUE is valid for PATH.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/path․lisp file, , @t{path.lisp}} (file)
@end table
@end deffn
@deffn {Method} {check} (LISPOBJ @t{lispobj}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method}@c
@methodsubindex{check}@c
Check that VALUE is valid for LISPOBJ.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/lispobj․lisp file, , @t{lispobj.lisp}} (file)
@end table
@end deffn
@deffn {Method} {check} (STROPT @t{stropt}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method}@c
@methodsubindex{check}@c
Check that VALUE is valid for STROPT.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/stropt․lisp file, , @t{stropt.lisp}} (file)
@end table
@end deffn
@deffn {Method} {check} (SWITCH @t{switch}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method}@c
@methodsubindex{check}@c
Check that VALUE is valid for SWITCH.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/switch․lisp file, , @t{switch.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {check-name-clash} ITEM1 ITEM2
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH generic function}@c
@genericsubindex{check-name-clash}@c
Check for name clash between ITEM1's options and ITEM2's options.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@item Methods
@deffn {Method} {check-name-clash} (CONTAINER1 @t{container}) (CONTAINER2 @t{container})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶CONTAINER NET․DIDIERVERNA․CLON∶∶CONTAINER method}@c
@methodsubindex{check-name-clash}@c
Check for name clash between CONTAINER1's options and CONTAINER2's ones.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/container․lisp file, , @t{container.lisp}} (file)
@end table
@end deffn
@deffn {Method} {check-name-clash} ITEM1 (CONTAINER @t{container})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTAINER method}@c
@methodsubindex{check-name-clash}@c
Check for name clash between ITEM1's options and CONTAINER's ones.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/container․lisp file, , @t{container.lisp}} (file)
@end table
@end deffn
@deffn {Method} {check-name-clash} (CONTAINER @t{container}) ITEM2
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶CONTAINER COMMON-LISP∶∶T method}@c
@methodsubindex{check-name-clash}@c
Check for name clash between CONTAINER's options and ITEM2's ones.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/container․lisp file, , @t{container.lisp}} (file)
@end table
@end deffn
@deffn {Method} {check-name-clash} ITEM1 (TEXT @t{text})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶TEXT method}@c
@methodsubindex{check-name-clash}@c
Do nothing (no name clash with a text object.
@end deffn
@deffn {Method} {check-name-clash} (TEXT @t{text}) ITEM2
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶TEXT COMMON-LISP∶∶T method}@c
@methodsubindex{check-name-clash}@c
Do nothing (no name clash with a text object.
@end deffn
@deffn {Method} {check-name-clash} (OPTION1 @t{option}) (OPTION2 @t{option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶OPTION NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{check-name-clash}@c
Ensure that there is no name clash between OPTION1 and OPTION2.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {clon-options-group} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CLON-OPTIONS-GROUP generic function}@c
@genericsubindex{clon-options-group}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {clon-options-group} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CLON-OPTIONS-GROUP NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{clon-options-group}@c
Return the Clon options group of CONTEXT's synopsis.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Method} {clon-options-group} (SYNOPSIS @t{synopsis})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CLON-OPTIONS-GROUP NET․DIDIERVERNA․CLON∶∶SYNOPSIS method}@c
@methodsubindex{clon-options-group}@c
The Clon options group.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {close-frame} SHEET FRAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-FRAME generic function}@c
@genericsubindex{close-frame}@c
Close FRAME on SHEET.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@item Method Combination
@t{progn} (short method combination)

@b{Options:} @t{:most-specific-last}
@item Methods
@deffn {Method} {close-frame} SHEET (FRAME @t{frame}) &aux RIGHT-MARGIN @t{progn}
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶FRAME PROGN method}@c
@methodsubindex{close-frame}@c
Reach FRAME's right margin if it has one.
@end deffn
@deffn {Method} {close-frame} SHEET (FRAME @t{highlight-frame}) @t{progn}
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME PROGN method}@c
@methodsubindex{close-frame}@c
Restore the upper frame's highlight properties.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {cmdline-options} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTIONS generic function}@c
@genericsubindex{cmdline-options}@c
@deffnx {Generic Function} {(setf cmdline-options)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTIONS❩ generic function}@c
@genericsubindex{(setf cmdline-options)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {cmdline-options} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTIONS NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{cmdline-options}@c
@deffnx {Method} {(setf cmdline-options)} NEW-VALUE (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTIONS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{(setf cmdline-options)}@c
The options from the command-line.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {column} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COLUMN generic function}@c
@genericsubindex{column}@c
@deffnx {Generic Function} {(setf column)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF COLUMN❩ generic function}@c
@genericsubindex{(setf column)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {column} (SHEET @t{sheet})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COLUMN NET․DIDIERVERNA․CLON∶∶SHEET method}@c
@methodsubindex{column}@c
@deffnx {Method} {(setf column)} NEW-VALUE (SHEET @t{sheet})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF COLUMN❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SHEET method}@c
@methodsubindex{(setf column)}@c
The sheet's current column.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {comment} CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COMMENT generic function}@c
@genericsubindex{comment}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {comment} (CONDITION @t{invalid-argument})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COMMENT NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT method}@c
@methodsubindex{comment}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@deffn {Method} {comment} (CONDITION @t{invalid-value})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COMMENT NET․DIDIERVERNA․CLON∶∶INVALID-VALUE method}@c
@methodsubindex{comment}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {concealedp} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONCEALEDP generic function}@c
@genericsubindex{concealedp}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {concealedp} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONCEALEDP NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{concealedp}@c
The face's concealed status.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {contents} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONTENTS generic function}@c
@genericsubindex{contents}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {contents} (TEXT @t{text})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONTENTS NET․DIDIERVERNA․CLON∶∶TEXT method}@c
@methodsubindex{contents}@c
The actual text string.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/text․lisp file, , @t{text.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {convert} VALUED-OPTION ARGUMENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONVERT generic function}@c
@genericsubindex{convert}@c
Convert ARGUMENT to VALUED-OPTION's value.@*
If ARGUMENT is invalid@comma{} raise an invalid-argument error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item Methods
@deffn {Method} {convert} (XSWITCH @t{xswitch}) ARGUMENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method}@c
@methodsubindex{convert}@c
Convert ARGUMENT to an XSWITCH value.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/xswitch․lisp file, , @t{xswitch.lisp}} (file)
@end table
@end deffn
@deffn {Method} {convert} (ENUM @t{enum}) ARGUMENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method}@c
@methodsubindex{convert}@c
Convert ARGUMENT to an ENUM value.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/enum․lisp file, , @t{enum.lisp}} (file)
@end table
@end deffn
@deffn {Method} {convert} (PATH @t{path}) ARGUMENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method}@c
@methodsubindex{convert}@c
Convert ARGUMENT to a PATH value.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/path․lisp file, , @t{path.lisp}} (file)
@end table
@end deffn
@deffn {Method} {convert} (LISPOBJ @t{lispobj}) ARGUMENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method}@c
@methodsubindex{convert}@c
Convert ARGUMENT to a LISPOBJ value.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/lispobj․lisp file, , @t{lispobj.lisp}} (file)
@end table
@end deffn
@deffn {Method} {convert} (STROPT @t{stropt}) ARGUMENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method}@c
@methodsubindex{convert}@c
Convert ARGUMENT to an STROPT value.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/stropt․lisp file, , @t{stropt.lisp}} (file)
@end table
@end deffn
@deffn {Method} {convert} (SWITCH @t{switch}) ARGUMENT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method}@c
@methodsubindex{convert}@c
Convert ARGUMENT to a SWITCH value.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/switch․lisp file, , @t{switch.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {copy-instance} INSTANCE &optional SUBCLASS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COPY-INSTANCE generic function}@c
@genericsubindex{copy-instance}@c
Return a copy of INSTANCE.@*
Copy is either an object of INSTANCE's class@comma{} or INSTANCE's SUBCLASS if given.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Methods
@deffn {Method} {copy-instance} INSTANCE &optional SUBCLASS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶COPY-INSTANCE COMMON-LISP∶∶T method}@c
@methodsubindex{copy-instance}@c
Return a copy of INSTANCE.@*
Both instances share the same slot values.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {crossed-out-p} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CROSSED-OUT-P generic function}@c
@genericsubindex{crossed-out-p}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {crossed-out-p} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CROSSED-OUT-P NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{crossed-out-p}@c
The face's crossed out status.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {default-value} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DEFAULT-VALUE generic function}@c
@genericsubindex{default-value}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {default-value} (VALUED-OPTION @t{valued-option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DEFAULT-VALUE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method}@c
@methodsubindex{default-value}@c
The option's default value.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {description} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DESCRIPTION generic function}@c
@genericsubindex{description}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {description} (OPTION @t{option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶DESCRIPTION NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{description}@c
The option's description.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {enum} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENUM generic function}@c
@genericsubindex{enum}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {enum} (ENUM-BASE @t{enum-base})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENUM NET․DIDIERVERNA․CLON∶∶ENUM-BASE method}@c
@methodsubindex{enum}@c
The set of possible values.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/enum-base․lisp file, , @t{enum-base.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {env-val} CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAL generic function}@c
@genericsubindex{env-val}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {env-val} (CONDITION @t{invalid-environment-value})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAL NET․DIDIERVERNA․CLON∶∶INVALID-ENVIRONMENT-VALUE method}@c
@methodsubindex{env-val}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/environ․lisp file, , @t{environ.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {env-var} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR generic function}@c
@genericsubindex{env-var}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {env-var} (CONDITION @t{environment-error})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR NET․DIDIERVERNA․CLON∶∶ENVIRONMENT-ERROR method}@c
@methodsubindex{env-var}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/environ․lisp file, , @t{environ.lisp}} (file)
@end table
@end deffn
@deffn {Method} {env-var} (OPTION @t{option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{env-var}@c
The option's associated environment variable.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {error-handler} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ERROR-HANDLER generic function}@c
@genericsubindex{error-handler}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {error-handler} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ERROR-HANDLER NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{error-handler}@c
The behavior to adopt on option retrieval errors.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {error-string} CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ERROR-STRING generic function}@c
@genericsubindex{error-string}@c
@deffnx {Generic Function} {(setf error-string)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ERROR-STRING❩ generic function}@c
@genericsubindex{(setf error-string)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {error-string} (CONDITION @t{home-directory})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ERROR-STRING NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY method}@c
@methodsubindex{error-string}@c
@deffnx {Method} {(setf error-string)} NEW-VALUE (CONDITION @t{home-directory})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ERROR-STRING❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY method}@c
@methodsubindex{(setf error-string)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {fallback-value} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FALLBACK-VALUE generic function}@c
@genericsubindex{fallback-value}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {fallback-value} (VALUED-OPTION @t{valued-option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FALLBACK-VALUE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method}@c
@methodsubindex{fallback-value}@c
The option's fallback value.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {foreground} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FOREGROUND generic function}@c
@genericsubindex{foreground}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {foreground} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FOREGROUND NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{foreground}@c
The face foreground.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {framedp} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FRAMEDP generic function}@c
@genericsubindex{framedp}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {framedp} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FRAMEDP NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{framedp}@c
The face's framed status.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {frames} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FRAMES generic function}@c
@genericsubindex{frames}@c
@deffnx {Generic Function} {(setf frames)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAMES❩ generic function}@c
@genericsubindex{(setf frames)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {frames} (SHEET @t{sheet})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FRAMES NET․DIDIERVERNA․CLON∶∶SHEET method}@c
@methodsubindex{frames}@c
@deffnx {Method} {(setf frames)} NEW-VALUE (SHEET @t{sheet})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAMES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SHEET method}@c
@methodsubindex{(setf frames)}@c
The stack of currently open frames.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {get-bottom-padding} SFACE HELP-SPEC
@anchor{go to the NET․DIDIERVERNA․CLON∶∶GET-BOTTOM-PADDING generic function}@c
@genericsubindex{get-bottom-padding}@c
Get HELP-SPEC's bottom-padding under SFACE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@item Methods
@deffn {Method} {get-bottom-padding} SFACE HELP-SPEC
@anchor{go to the NET․DIDIERVERNA․CLON∶∶GET-BOTTOM-PADDING COMMON-LISP∶∶T COMMON-LISP∶∶T method}@c
@methodsubindex{get-bottom-padding}@c
Basic help specifications (chars@comma{} strings etc) don't provide a bottom padding.
@end deffn
@deffn {Method} {get-bottom-padding} SFACE (HELP-SPEC @t{list})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶GET-BOTTOM-PADDING COMMON-LISP∶∶T COMMON-LISP∶∶LIST method}@c
@methodsubindex{get-bottom-padding}@c
Return the bottom padding of HELP-SPEC's face.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {header} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HEADER generic function}@c
@genericsubindex{header}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {header} (GROUP @t{group})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HEADER NET․DIDIERVERNA․CLON∶∶GROUP method}@c
@methodsubindex{header}@c
The group's header.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/group․lisp file, , @t{group.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {help-spec} ITEM &key PROGRAM UNHIDE &allow-other-keys
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC generic function}@c
@genericsubindex{help-spec}@c
Return ITEM's help specification.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/item․lisp file, , @t{item.lisp}} (file)
@item Methods
@deffn {Method} {help-spec} (SYNOPSIS @t{synopsis}) &key PROGRAM
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶SYNOPSIS method}@c
@methodsubindex{help-spec}@c
Return SYNOPSIS's help specification.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@end table
@end deffn
@deffn {Method} {help-spec} (GROUP @t{group}) &key
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶GROUP method}@c
@methodsubindex{help-spec}@c
Return GROUP's help specification.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/group․lisp file, , @t{group.lisp}} (file)
@end table
@end deffn
@deffn {Method} {help-spec} (CONTAINER @t{container}) &key
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶CONTAINER method}@c
@methodsubindex{help-spec}@c
Return CONTAINER's help specification.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/container․lisp file, , @t{container.lisp}} (file)
@end table
@end deffn
@deffn {Method} {help-spec} (OPTION @t{valued-option}) &key
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method}@c
@methodsubindex{help-spec}@c
Return OPTION's help specification.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@deffn {Method} {help-spec} (OPTION @t{option}) &key
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{help-spec}@c
Return OPTION's help specification.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@end table
@end deffn
@deffn {Method} {help-spec} (TEXT @t{text}) &key
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶TEXT method}@c
@methodsubindex{help-spec}@c
Return TEXT's help specification.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/text․lisp file, , @t{text.lisp}} (file)
@end table
@end deffn
@deffn {Method} {help-spec} (ITEM @t{item}) &key UNHIDE @t{around}
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶ITEM AROUND method}@c
@methodsubindex{help-spec}@c
Call the actual method only when ITEM is not hidden or UNHIDE.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {help-spec-will-print} SFACE HELP-SPEC
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT generic function}@c
@genericsubindex{help-spec-will-print}@c
Return t if HELP-SPEC will print under FACE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@item Methods
@deffn {Method} {help-spec-will-print} SFACE HELP-SPEC @t{before}
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method}@c
@methodsubindex{help-spec-will-print}@c
@end deffn
@deffn {Method} {help-spec-will-print} SFACE HELP-SPEC
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT COMMON-LISP∶∶T COMMON-LISP∶∶T method}@c
@methodsubindex{help-spec-will-print}@c
Basic help specifications (chars@comma{} strings etc) do print.
@end deffn
@deffn {Method} {help-spec-will-print} SFACE (HELP-SPEC @t{list})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC-WILL-PRINT COMMON-LISP∶∶T COMMON-LISP∶∶LIST method}@c
@methodsubindex{help-spec-will-print}@c
Return t if HELP-SPEC's items will print under HELP-SPEC's face.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {hiddenp} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIDDENP generic function}@c
@genericsubindex{hiddenp}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {hiddenp} (ITEM @t{item})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIDDENP NET․DIDIERVERNA․CLON∶∶ITEM method}@c
@methodsubindex{hiddenp}@c
Whether the item is hidden in help strings.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/item․lisp file, , @t{item.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {highlight} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT generic function}@c
@genericsubindex{highlight}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {highlight} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{highlight}@c
Clon's output highlight mode.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {highlightp} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHTP generic function}@c
@genericsubindex{highlightp}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {highlightp} (SHEET @t{sheet})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHTP NET․DIDIERVERNA․CLON∶∶SHEET method}@c
@methodsubindex{highlightp}@c
Whether to highlight SHEET's output.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {intensity} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶INTENSITY generic function}@c
@genericsubindex{intensity}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {intensity} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶INTENSITY NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{intensity}@c
The face intensity.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {inversep} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶INVERSEP generic function}@c
@genericsubindex{inversep}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {inversep} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶INVERSEP NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{inversep}@c
The face's inverse video status.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {italicp} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ITALICP generic function}@c
@genericsubindex{italicp}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {italicp} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ITALICP NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{italicp}@c
The face's italic status.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {item} CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ITEM generic function}@c
@genericsubindex{item}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {item} (CONDITION @t{cmdline-error})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ITEM NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR method}@c
@methodsubindex{item}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {item-separator} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ITEM-SEPARATOR generic function}@c
@genericsubindex{item-separator}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {item-separator} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ITEM-SEPARATOR NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{item-separator}@c
The face item separator.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {items} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ITEMS generic function}@c
@genericsubindex{items}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {items} (CONTAINER @t{container})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ITEMS NET․DIDIERVERNA․CLON∶∶CONTAINER method}@c
@methodsubindex{items}@c
The items in the container.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/container․lisp file, , @t{container.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {junk} CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶JUNK generic function}@c
@genericsubindex{junk}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {junk} (CONDITION @t{cmdline-junk-error})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶JUNK NET․DIDIERVERNA․CLON∶∶CMDLINE-JUNK-ERROR method}@c
@methodsubindex{junk}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {left-padding} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶LEFT-PADDING generic function}@c
@genericsubindex{left-padding}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {left-padding} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶LEFT-PADDING NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{left-padding}@c
The face left padding.@*
This property can take the following forms:@*
- <NUMBER>: the padding is relative to the enclosing face@comma{}@*
- SELF: the padding is set to wherever the face happens to be opened@comma{}
- (<NUMBER> ABSOLUTE): the padding is set in absolute value@comma{}@*
- (<NUMBER> :RELATIVE-TO <FACE-NAME>): the padding is set relatively to a
  parent face named FACE-NAME.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {line-width} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH generic function}@c
@genericsubindex{line-width}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {line-width} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{line-width}@c
The line width for help display.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Method} {line-width} (SHEET @t{sheet})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH NET․DIDIERVERNA․CLON∶∶SHEET method}@c
@methodsubindex{line-width}@c
The sheet's line width.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {long-name} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶LONG-NAME generic function}@c
@genericsubindex{long-name}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {long-name} (OPTION @t{option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶LONG-NAME NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{long-name}@c
The option's long name.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {make-face-tree} DEFINITION &optional FACE-CLASS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FACE-TREE generic function}@c
@genericsubindex{make-face-tree}@c
Make a FACE-CLASS face tree from DEFINITION.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@item Methods
@deffn {Method} {make-face-tree} (DEFINITION @t{list}) &optional FACE-CLASS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FACE-TREE COMMON-LISP∶∶LIST method}@c
@methodsubindex{make-face-tree}@c
Make a FACE-CLASS face tree from a list of face name and initargs.
@end deffn
@deffn {Method} {make-face-tree} (NAME @t{symbol}) &optional FACE-CLASS
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAKE-FACE-TREE COMMON-LISP∶∶SYMBOL method}@c
@methodsubindex{make-face-tree}@c
Create a face named NAME.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {mapoptions} FUNC THERE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS generic function}@c
@genericsubindex{mapoptions}@c
Map FUNC over all options in THERE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@item Methods
@deffn {Method} {mapoptions} FUNC (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{mapoptions}@c
Map FUNC over all options in CONTEXT synopsis.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Method} {mapoptions} FUNC ELSEWHERE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T COMMON-LISP∶∶T method}@c
@methodsubindex{mapoptions}@c
Do nothing by default.
@end deffn
@deffn {Method} {mapoptions} FUNC (ITEM @t{item}) @t{after}
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶ITEM AFTER method}@c
@methodsubindex{mapoptions}@c
Mark TRAVERSABLE as traversed.
@end deffn
@deffn {Method} {mapoptions} FUNC (CONTAINER @t{container})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTAINER method}@c
@methodsubindex{mapoptions}@c
Map FUNC over all containers or options in CONTAINER.
@end deffn
@deffn {Method} {mapoptions} FUNC (OPTION @t{option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{mapoptions}@c
Call FUNC on OPTION.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {name} CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NAME generic function}@c
@genericsubindex{name}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {name} (CONDITION @t{unknown-cmdline-option-error})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR method}@c
@methodsubindex{name}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Method} {name} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{name}@c
The face name.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@deffn {Method} {name} (CONDITION @t{cmdline-option-error})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR method}@c
@methodsubindex{name}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {negated-call} CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-CALL generic function}@c
@genericsubindex{negated-call}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {negated-call} (CONDITION @t{unrecognized-negated-call-error})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-CALL NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-NEGATED-CALL-ERROR method}@c
@methodsubindex{negated-call}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {negated-pack} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK generic function}@c
@genericsubindex{negated-pack}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {negated-pack} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{negated-pack}@c
Return the negated pack of CONTEXT's synopsis.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Method} {negated-pack} (SYNOPSIS @t{synopsis})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method}@c
@methodsubindex{negated-pack}@c
The negated pack string.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {negated-pack-char} OPTION &optional AS-STRING
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK-CHAR generic function}@c
@genericsubindex{negated-pack-char}@c
Return OPTION's negated pack character@comma{} if any.
If AS-STRING@comma{} return a string of that character.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@item Methods
@deffn {Method} {negated-pack-char} (NEGATABLE @t{negatable}) &optional AS-STRING
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK-CHAR NET․DIDIERVERNA․CLON∶∶NEGATABLE method}@c
@methodsubindex{negated-pack-char}@c
Return NEGATABLE's negated pack character@comma{} if any.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/negatable․lisp file, , @t{negatable.lisp}} (file)
@end table
@end deffn
@deffn {Method} {negated-pack-char} (OPTION @t{option}) &optional AS-STRING
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK-CHAR NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{negated-pack-char}@c
Return nil (only the switch hierarchy is negated-pack'able).
@end deffn
@end table
@end deffn
@deffn {Generic Function} {no-values} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NO-VALUES generic function}@c
@genericsubindex{no-values}@c
@deffnx {Generic Function} {(setf no-values)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF NO-VALUES❩ generic function}@c
@genericsubindex{(setf no-values)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {no-values} (SWITCH-BASE @t{switch-base})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NO-VALUES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method}@c
@methodsubindex{no-values}@c
@deffnx {Method} {(setf no-values)} NEW-VALUE (SWITCH-BASE @t{switch-base})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF NO-VALUES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method}@c
@methodsubindex{(setf no-values)}@c
The possible 'no' values.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/switch-base․lisp file, , @t{switch-base.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {open-frame} SHEET FRAME
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPEN-FRAME generic function}@c
@genericsubindex{open-frame}@c
Open FRAME on SHEET.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@item Method Combination
@t{progn} (short method combination)

@b{Options:} @t{:most-specific-last}
@item Methods
@deffn {Method} {open-frame} SHEET (FRAME @t{frame}) @t{progn}
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPEN-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶FRAME PROGN method}@c
@methodsubindex{open-frame}@c
Reach the frame's left margin.
@end deffn
@deffn {Method} {open-frame} SHEET (FRAME @t{highlight-frame}) @t{progn}
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPEN-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME PROGN method}@c
@methodsubindex{open-frame}@c
Reach the frame's left margin and output its highlight properties.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {option} CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPTION generic function}@c
@genericsubindex{option}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {option} (CONDITION @t{option-error})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPTION NET․DIDIERVERNA․CLON∶∶OPTION-ERROR method}@c
@methodsubindex{option}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {option-sticky-distance} OPTION NAMEARG
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPTION-STICKY-DISTANCE generic function}@c
@genericsubindex{option-sticky-distance}@c
Try to match OPTION's short name with a sticky argument against NAMEARG.
If OPTION matches@comma{} return the length of OPTION's short name; otherwise 0.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@item Methods
@deffn {Method} {option-sticky-distance} (OPTION @t{valued-option}) NAMEARG
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPTION-STICKY-DISTANCE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method}@c
@methodsubindex{option-sticky-distance}@c
Try to match OPTION's short name with a sticky argument against NAMEARG.
If OPTION matches@comma{} return its short name's length; otherwise 0.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@deffn {Method} {option-sticky-distance} (OPTION @t{option}) NAMEARG
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPTION-STICKY-DISTANCE NET․DIDIERVERNA․CLON∶∶OPTION COMMON-LISP∶∶T method}@c
@methodsubindex{option-sticky-distance}@c
Return 0 (non-valued options don't take any argument@comma{} sticky or not).
@end deffn
@end table
@end deffn
@deffn {Generic Function} {output-stream} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OUTPUT-STREAM generic function}@c
@genericsubindex{output-stream}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {output-stream} (SHEET @t{sheet})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OUTPUT-STREAM NET․DIDIERVERNA․CLON∶∶SHEET method}@c
@methodsubindex{output-stream}@c
The sheet's output stream.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {parent} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PARENT generic function}@c
@genericsubindex{parent}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {parent} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PARENT NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{parent}@c
The face parent.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {path-type} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PATH-TYPE generic function}@c
@genericsubindex{path-type}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {path-type} (PATH @t{path})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PATH-TYPE NET․DIDIERVERNA․CLON∶∶PATH method}@c
@methodsubindex{path-type}@c
The path type.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/path․lisp file, , @t{path.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {postfix} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶POSTFIX generic function}@c
@genericsubindex{postfix}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {postfix} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶POSTFIX NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{postfix}@c
Return the postfix of CONTEXT's synopsis.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Method} {postfix} (SYNOPSIS @t{synopsis})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶POSTFIX NET․DIDIERVERNA․CLON∶∶SYNOPSIS method}@c
@methodsubindex{postfix}@c
A postfix to the program synopsis.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {potential-pack} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK generic function}@c
@genericsubindex{potential-pack}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {potential-pack} (SYNOPSIS @t{synopsis})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method}@c
@methodsubindex{potential-pack}@c
The potential pack string.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {potential-pack-p} PACK THERE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-P generic function}@c
@genericsubindex{potential-pack-p}@c
Return t if PACK is a potential pack in THERE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@item Methods
@deffn {Method} {potential-pack-p} PACK (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-P COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{potential-pack-p}@c
Return t if PACK (a string) is a potential pack in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Method} {potential-pack-p} PACK (SYNOPSIS @t{synopsis})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-P COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SYNOPSIS method}@c
@methodsubindex{potential-pack-p}@c
Return t if PACK is a potential pack for SYNOPSIS.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {print-help-spec} SHEET HELP-SPEC
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC generic function}@c
@genericsubindex{print-help-spec}@c
Print HELP-SPEC on SHEET.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@item Methods
@deffn {Method} {print-help-spec} SHEET HELP-SPEC @t{before}
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method}@c
@methodsubindex{print-help-spec}@c
@end deffn
@deffn {Method} {print-help-spec} SHEET (CHAR @t{character})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶CHARACTER method}@c
@methodsubindex{print-help-spec}@c
Print CHAR on SHEET with the current face.
@end deffn
@deffn {Method} {print-help-spec} SHEET (CHAR-VECTOR @t{simple-vector})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶SIMPLE-VECTOR method}@c
@methodsubindex{print-help-spec}@c
Print CHAR-VECTOR on SHEET with the current face.
@end deffn
@deffn {Method} {print-help-spec} SHEET (STRING @t{string})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶STRING method}@c
@methodsubindex{print-help-spec}@c
Print STRING on SHEET with the current face.
@end deffn
@deffn {Method} {print-help-spec} SHEET (HELP-SPEC @t{list})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PRINT-HELP-SPEC COMMON-LISP∶∶T COMMON-LISP∶∶LIST method}@c
@methodsubindex{print-help-spec}@c
Open HELP-SPEC's face and print all of its items with it.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {retrieve-from-environment} OPTION ENV-VAL
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT generic function}@c
@genericsubindex{retrieve-from-environment}@c
Retrieve OPTION's value from the environment.@*
ENV-VAL is the value stored in the associated environment variable.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/environ․lisp file, , @t{environ.lisp}} (file)
@item Methods
@deffn {Method} {retrieve-from-environment} OPTION ENV-VAL @t{before}
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method}@c
@methodsubindex{retrieve-from-environment}@c
Assert that ENV-VAL is not null.
@end deffn
@deffn {Method} {retrieve-from-environment} (FLAG @t{flag}) ENV-VAL
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT NET․DIDIERVERNA․CLON∶∶FLAG COMMON-LISP∶∶T method}@c
@methodsubindex{retrieve-from-environment}@c
@end deffn
@deffn {Method} {retrieve-from-environment} (OPTION @t{valued-option}) ENV-VAL
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method}@c
@methodsubindex{retrieve-from-environment}@c
@end deffn
@end table
@end deffn
@deffn {Generic Function} {retrieve-from-long-call} OPTION CMDLINE-NAME &optional CMDLINE-ARGUMENT CMDLINE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-LONG-CALL generic function}@c
@genericsubindex{retrieve-from-long-call}@c
Retrieve OPTION's value from a long call.@*
CMDLINE-NAME is the name used on the command-line.@*
CMDLINE-ARGUMENT is a potentially already parsed cmdline argument.
Otherwise@comma{} CMDLINE is where to find an argument.@*
This function returns three values:@*
- the retrieved value@comma{}@*
- the value source@comma{}@*
- the new command-line (possibly with the first item popped if the option
  requires an argument).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@item Methods
@deffn {Method} {retrieve-from-long-call} (OPTION @t{option}) CMDLINE-NAME &optional CMDLINE-ARGUMENT CMDLINE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-LONG-CALL NET․DIDIERVERNA․CLON∶∶OPTION COMMON-LISP∶∶T method}@c
@methodsubindex{retrieve-from-long-call}@c
@end deffn
@deffn {Method} {retrieve-from-long-call} (OPTION @t{valued-option}) CMDLINE-NAME &optional CMDLINE-ARGUMENT CMDLINE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-LONG-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method}@c
@methodsubindex{retrieve-from-long-call}@c
@end deffn
@end table
@end deffn
@deffn {Generic Function} {retrieve-from-negated-call} OPTION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL generic function}@c
@genericsubindex{retrieve-from-negated-call}@c
Retrieve OPTION's value from a negated call.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@item Methods
@deffn {Method} {retrieve-from-negated-call} (OPTION @t{option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{retrieve-from-negated-call}@c
@end deffn
@deffn {Method} {retrieve-from-negated-call} (OPTION @t{valued-option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method}@c
@methodsubindex{retrieve-from-negated-call}@c
@end deffn
@deffn {Method} {retrieve-from-negated-call} (NEGATABLE @t{negatable})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶NEGATABLE method}@c
@methodsubindex{retrieve-from-negated-call}@c
@end deffn
@end table
@end deffn
@deffn {Generic Function} {retrieve-from-short-call} OPTION &optional CMDLINE-ARGUMENT CMDLINE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-SHORT-CALL generic function}@c
@genericsubindex{retrieve-from-short-call}@c
Retrieve OPTION's value from a short call.@*
CMDLINE-ARGUMENT is a potentially already parsed cmdline argument.
Otherwise@comma{} CMDLINE is where to find an argument.@*
This function returns three values:@*
- the retrieved value@comma{}@*
- the value source@comma{}@*
- the new command-line (possibly with the first item popped if the option
  requires an argument).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@item Methods
@deffn {Method} {retrieve-from-short-call} (OPTION @t{option}) &optional CMDLINE-ARGUMENT CMDLINE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-SHORT-CALL NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{retrieve-from-short-call}@c
@end deffn
@deffn {Method} {retrieve-from-short-call} (OPTION @t{valued-option}) &optional CMDLINE-ARGUMENT CMDLINE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-SHORT-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method}@c
@methodsubindex{retrieve-from-short-call}@c
@end deffn
@end table
@end deffn
@deffn {Generic Function} {right-padding} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RIGHT-PADDING generic function}@c
@genericsubindex{right-padding}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {right-padding} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶RIGHT-PADDING NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{right-padding}@c
The face right padding.@*
This property can take the following forms:@*
- <NUMBER>: the padding is relative to the enclosing face@comma{}@*
- SELF: the padding is set to wherever the face happens to be closed@comma{}
- (<NUMBER> ABSOLUTE): the padding is set in absolute value@comma{}@*
- (<NUMBER> :RELATIVE-TO <FACE-NAME>): the padding is set relatively to a
  parent face named FACE-NAME.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {search-path} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-PATH generic function}@c
@genericsubindex{search-path}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {search-path} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-PATH NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{search-path}@c
The search path for Clon files.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {sface-tree} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SFACE-TREE generic function}@c
@genericsubindex{sface-tree}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {sface-tree} (SHEET @t{sheet})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SFACE-TREE NET․DIDIERVERNA․CLON∶∶SHEET method}@c
@methodsubindex{sface-tree}@c
The sheet's sface tree.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {short-call} CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-CALL generic function}@c
@genericsubindex{short-call}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {short-call} (CONDITION @t{unrecognized-short-call-error})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-CALL NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-SHORT-CALL-ERROR method}@c
@methodsubindex{short-call}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {short-name} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-NAME generic function}@c
@genericsubindex{short-name}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {short-name} (OPTION @t{option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-NAME NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{short-name}@c
The option's short name.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {short-pack} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK generic function}@c
@genericsubindex{short-pack}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {short-pack} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{short-pack}@c
Return the short pack of CONTEXT's synopsis.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Method} {short-pack} (SYNOPSIS @t{synopsis})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method}@c
@methodsubindex{short-pack}@c
The short pack string.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {short-pack-char} OPTION &optional AS-STRING
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK-CHAR generic function}@c
@genericsubindex{short-pack-char}@c
Return OPTION's short pack character@comma{} if any.
If AS-STRING@comma{} return a string of that character.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@item Methods
@deffn {Method} {short-pack-char} (OPTION @t{valued-option}) &optional AS-STRING
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK-CHAR NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method}@c
@methodsubindex{short-pack-char}@c
Return OPTION's short pack character if OPTION's argument is optional.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@deffn {Method} {short-pack-char} (OPTION @t{option}) &optional AS-STRING
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK-CHAR NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{short-pack-char}@c
Return OPTION's potential pack character.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {short-syntax-help-spec-prefix} OPTION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-SYNTAX-HELP-SPEC-PREFIX generic function}@c
@genericsubindex{short-syntax-help-spec-prefix}@c
Return the help specification prefix for OPTION's short call.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item Methods
@deffn {Method} {short-syntax-help-spec-prefix} (OPTION @t{negatable})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-SYNTAX-HELP-SPEC-PREFIX NET․DIDIERVERNA․CLON∶∶NEGATABLE method}@c
@methodsubindex{short-syntax-help-spec-prefix}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/negatable․lisp file, , @t{negatable.lisp}} (file)
@end table
@end deffn
@deffn {Method} {short-syntax-help-spec-prefix} (OPTION @t{valued-option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHORT-SYNTAX-HELP-SPEC-PREFIX NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method}@c
@methodsubindex{short-syntax-help-spec-prefix}@c
@end deffn
@end table
@end deffn
@deffn {Generic Function} {sibling} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SIBLING generic function}@c
@genericsubindex{sibling}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {sibling} (SFACE @t{sface})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SIBLING NET․DIDIERVERNA․CLON∶∶SFACE method}@c
@methodsubindex{sibling}@c
The SFace's raw sibling.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {stream-ioctl-output-handle} STREAM
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE generic function}@c
@genericsubindex{stream-ioctl-output-handle}@c
Return STREAM's ioctl output handle or NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․termio/termio․lisp file, , @t{termio.lisp}} (file)
@item Methods
@deffn {Method} {stream-ioctl-output-handle} (STREAM @t{synonym-stream})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE COMMON-LISP∶∶SYNONYM-STREAM method}@c
@methodsubindex{stream-ioctl-output-handle}@c
@end deffn
@deffn {Method} {stream-ioctl-output-handle} (STREAM @t{two-way-stream})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE COMMON-LISP∶∶TWO-WAY-STREAM method}@c
@methodsubindex{stream-ioctl-output-handle}@c
@end deffn
@deffn {Method} {stream-ioctl-output-handle} (STREAM @t{fd-stream})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE SB-SYS∶∶FD-STREAM method}@c
@methodsubindex{stream-ioctl-output-handle}@c
@end deffn
@deffn {Method} {stream-ioctl-output-handle} STREAM
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STREAM-IOCTL-OUTPUT-HANDLE COMMON-LISP∶∶T method}@c
@methodsubindex{stream-ioctl-output-handle}@c
@end deffn
@end table
@end deffn
@deffn {Generic Function} {stringify} VALUED-OPTION VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY generic function}@c
@genericsubindex{stringify}@c
Transform VALUED-OPTION's VALUE into an argument.
This is the opposite of argument conversion.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item Methods
@deffn {Method} {stringify} (XSWITCH @t{xswitch}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method}@c
@methodsubindex{stringify}@c
Transform XSWITCH's VALUE into an argument.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/xswitch․lisp file, , @t{xswitch.lisp}} (file)
@end table
@end deffn
@deffn {Method} {stringify} (ENUM @t{enum}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method}@c
@methodsubindex{stringify}@c
Transform ENUM's VALUE into an argument.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/enum․lisp file, , @t{enum.lisp}} (file)
@end table
@end deffn
@deffn {Method} {stringify} (PATH @t{path}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method}@c
@methodsubindex{stringify}@c
Transform PATH's VALUE into an argument.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/path․lisp file, , @t{path.lisp}} (file)
@end table
@end deffn
@deffn {Method} {stringify} (LISPOBJ @t{lispobj}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method}@c
@methodsubindex{stringify}@c
Transform LISPOBJ's VALUE into an argument.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/lispobj․lisp file, , @t{lispobj.lisp}} (file)
@end table
@end deffn
@deffn {Method} {stringify} (STROPT @t{stropt}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method}@c
@methodsubindex{stringify}@c
Transform STROPT's VALUE into an argument.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/stropt․lisp file, , @t{stropt.lisp}} (file)
@end table
@end deffn
@deffn {Method} {stringify} (SWITCH @t{switch}) VALUE
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method}@c
@methodsubindex{stringify}@c
Transform SWITCH's VALUE into an argument.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/switch․lisp file, , @t{switch.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {subface} FACE name(s)
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SUBFACE generic function}@c
@genericsubindex{subface}@c
Return subface of FACE named NAME(S) or nil.@*
If a list of names is provided instead of a single one@comma{} follow a subface
branch matching those names to find the leaf face.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@item Methods
@deffn {Method} {subface} FACE (NAME @t{symbol})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SUBFACE COMMON-LISP∶∶T COMMON-LISP∶∶SYMBOL method}@c
@methodsubindex{subface}@c
Return FACE'subface named NAME@comma{} or nil.
@end deffn
@deffn {Method} {subface} FACE (NAMES @t{list}) &aux BRANCH
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SUBFACE COMMON-LISP∶∶T COMMON-LISP∶∶LIST method}@c
@methodsubindex{subface}@c
Return the leaf face from FACE'subbranch matching NAMES@comma{} or nil.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {subfaces} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SUBFACES generic function}@c
@genericsubindex{subfaces}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {subfaces} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SUBFACES NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{subfaces}@c
The face children.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {synopsis} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SYNOPSIS generic function}@c
@genericsubindex{synopsis}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {synopsis} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SYNOPSIS NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{synopsis}@c
The program synopsis.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {theme} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶THEME generic function}@c
@genericsubindex{theme}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {theme} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶THEME NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{theme}@c
The theme filename.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {top-padding} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING generic function}@c
@genericsubindex{top-padding}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {top-padding} (HELP-SPEC @t{list})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING COMMON-LISP∶∶LIST method}@c
@methodsubindex{top-padding}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Method} {top-padding} OTHER
@anchor{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING COMMON-LISP∶∶T method}@c
@methodsubindex{top-padding}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@end table
@end deffn
@deffn {Method} {top-padding} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{top-padding}@c
The face top padding.@*
This property can take the following forms:@*
- nil: the output can start right away@comma{}@*
- 0: the output should start on the next line@comma{}@*
- N>0: there should be N empty lines before the output.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {traversedp} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶TRAVERSEDP generic function}@c
@genericsubindex{traversedp}@c
@deffnx {Generic Function} {(setf traversedp)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF TRAVERSEDP❩ generic function}@c
@genericsubindex{(setf traversedp)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {traversedp} (ITEM @t{item})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶TRAVERSEDP NET․DIDIERVERNA․CLON∶∶ITEM method}@c
@methodsubindex{traversedp}@c
@deffnx {Method} {(setf traversedp)} NEW-VALUE (ITEM @t{item})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF TRAVERSEDP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶ITEM method}@c
@methodsubindex{(setf traversedp)}@c
The item's traversal state.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/item․lisp file, , @t{item.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {typespec} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶TYPESPEC generic function}@c
@genericsubindex{typespec}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {typespec} (LISPOBJ @t{lispobj})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶TYPESPEC NET․DIDIERVERNA․CLON∶∶LISPOBJ method}@c
@methodsubindex{typespec}@c
A type specifier the option's value should satisfy.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/lispobj․lisp file, , @t{lispobj.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {underline} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶UNDERLINE generic function}@c
@genericsubindex{underline}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {underline} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶UNDERLINE NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{underline}@c
The face's underline level.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {untraverse} ITEM
@anchor{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE generic function}@c
@genericsubindex{untraverse}@c
Reset ITEM's traversal state@comma{} and return ITEM.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/item․lisp file, , @t{item.lisp}} (file)
@item Methods
@deffn {Method} {untraverse} (CONTEXT @t{context})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶CONTEXT method}@c
@methodsubindex{untraverse}@c
Untraverse CONTEXT synopsis.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@end table
@end deffn
@deffn {Method} {untraverse} (CONTAINER @t{container})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶CONTAINER method}@c
@methodsubindex{untraverse}@c
Untraverse all CONTAINER items.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/container․lisp file, , @t{container.lisp}} (file)
@end table
@end deffn
@deffn {Method} {untraverse} (OPTION @t{option})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶OPTION method}@c
@methodsubindex{untraverse}@c
OPTION is a terminal object: just return it.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@end table
@end deffn
@deffn {Method} {untraverse} (TEXT @t{text})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶TEXT method}@c
@methodsubindex{untraverse}@c
TEXT is a terminal object: just return it.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/text․lisp file, , @t{text.lisp}} (file)
@end table
@end deffn
@deffn {Method} {untraverse} (ITEM @t{item}) @t{after}
@anchor{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶ITEM AFTER method}@c
@methodsubindex{untraverse}@c
Mark ITEM as untraversed.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {value} CONDITION
@anchor{go to the NET․DIDIERVERNA․CLON∶∶VALUE generic function}@c
@genericsubindex{value}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {value} (CONDITION @t{invalid-value})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶VALUE NET․DIDIERVERNA․CLON∶∶INVALID-VALUE method}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {visiblep} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶VISIBLEP generic function}@c
@genericsubindex{visiblep}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {visiblep} (FACE @t{face})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶VISIBLEP NET․DIDIERVERNA․CLON∶∶FACE method}@c
@methodsubindex{visiblep}@c
Whether the face is visible.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {yes-values} OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶YES-VALUES generic function}@c
@genericsubindex{yes-values}@c
@deffnx {Generic Function} {(setf yes-values)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF YES-VALUES❩ generic function}@c
@genericsubindex{(setf yes-values)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Methods
@deffn {Method} {yes-values} (SWITCH-BASE @t{switch-base})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶YES-VALUES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method}@c
@methodsubindex{yes-values}@c
@deffnx {Method} {(setf yes-values)} NEW-VALUE (SWITCH-BASE @t{switch-base})
@anchor{go to the NET․DIDIERVERNA․CLON∶∶❨SETF YES-VALUES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method}@c
@methodsubindex{(setf yes-values)}@c
The possible 'yes' values.
@table @strong
@item Source
@ref{go to the net․didierverna․clon․core/src/options/switch-base․lisp file, , @t{switch-base.lisp}} (file)
@end table
@end deffn
@end table
@end deffn

@node Internal conditions, Internal structures, Internal generic functions, Internal definitions
@subsection Conditions
@deftp {Condition} {cmdline-error} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR condition}@c
@conditionsubindex{cmdline-error}@c
An error related to a command-line item.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@item Direct superclasses
@t{error} (condition)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR condition, , @t{cmdline-option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-SHORT-EQUAL-SYNTAX condition, , @t{invalid-short-equal-syntax}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-NEGATED-EQUAL-SYNTAX condition, , @t{invalid-negated-equal-syntax}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-JUNK-ERROR condition, , @t{cmdline-junk-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-SHORT-CALL-ERROR condition, , @t{unrecognized-short-call-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-NEGATED-CALL-ERROR condition, , @t{unrecognized-negated-call-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR condition, , @t{unknown-cmdline-option-error}} (condition)
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR method, , @t{item}} (method)
@item Direct slots
@defvr {Slot} item
@slotsubindex{item}@c
The concerned command-line item.
@table @strong
@item Initargs
@t{:item}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM generic function, , @t{item}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {cmdline-junk-error} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-JUNK-ERROR condition}@c
@conditionsubindex{cmdline-junk-error}@c
An error related to a command-line piece of junk.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR condition, , @t{cmdline-error}} (condition)
@item Direct methods
@ref{go to the NET․DIDIERVERNA․CLON∶∶JUNK NET․DIDIERVERNA․CLON∶∶CMDLINE-JUNK-ERROR method, , @t{junk}} (method)
@item Direct slots
@defvr {Slot} item
@slotsubindex{item}@c
The piece of junk appearing on the command-line.
@table @strong
@item Initargs
@t{:junk}, @t{:item}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶JUNK generic function, , @t{junk}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {cmdline-option-error} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR condition}@c
@conditionsubindex{cmdline-option-error}@c
An error related to a command-line (known) option.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-ERROR condition, , @t{option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR condition, , @t{cmdline-error}} (condition)
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SPURIOUS-CMDLINE-ARGUMENT condition, , @t{spurious-cmdline-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-NEGATED-SYNTAX condition, , @t{invalid-negated-syntax}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-CMDLINE-ARGUMENT condition, , @t{invalid-cmdline-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MISSING-CMDLINE-ARGUMENT condition, , @t{missing-cmdline-argument}} (condition)
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR method, , @t{name}} (method)
@item Direct slots
@defvr {Slot} item
@slotsubindex{item}@c
The option's name as it appears on the command-line.
@table @strong
@item Initargs
@t{:name}, @t{:item}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME generic function, , @t{name}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {environment-error} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENT-ERROR condition}@c
@conditionsubindex{environment-error}@c
An error related to an environment variable.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/environ․lisp file, , @t{environ.lisp}} (file)
@item Direct superclasses
@t{error} (condition)
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENTAL-OPTION-ERROR condition, , @t{environmental-option-error}} (condition)
@item Direct methods
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR NET․DIDIERVERNA․CLON∶∶ENVIRONMENT-ERROR method, , @t{env-var}} (method)
@item Direct slots
@defvr {Slot} env-var
@slotsubindex{env-var}@c
The concerned environment variable.
@table @strong
@item Initargs
@t{:env-var}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR generic function, , @t{env-var}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {environmental-option-error} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENTAL-OPTION-ERROR condition}@c
@conditionsubindex{environmental-option-error}@c
An error related to an option's environment variable.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/environ․lisp file, , @t{environ.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-ERROR condition, , @t{option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENT-ERROR condition, , @t{environment-error}} (condition)
@end itemize
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-ENVIRONMENT-VALUE condition, , @t{invalid-environment-value}} (condition)
@end table
@end deftp
@deftp {Condition} {home-directory} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY condition}@c
@conditionsubindex{home-directory}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@t{warning} (condition)
@item Direct methods
@itemize @bullet
@item
@t{error-string} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ERROR-STRING NET․DIDIERVERNA․CLON∶∶HOME-DIRECTORY method, , @t{error-string}} (method)
@end itemize
@item Direct slots
@defvr {Slot} error-string
@slotsubindex{error-string}@c
@table @strong
@item Initargs
@t{:error-string}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ERROR-STRING generic function, , @t{error-string}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ERROR-STRING❩ generic function, , @t{(setf error-string)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-argument} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT condition}@c
@conditionsubindex{invalid-argument}@c
An invalid argument error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-ERROR condition, , @t{option-error}} (condition)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-CMDLINE-ARGUMENT condition, , @t{invalid-cmdline-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-ENVIRONMENT-VALUE condition, , @t{invalid-environment-value}} (condition)
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COMMENT NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT method, , @t{comment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT method, , @t{argument}} (method)
@end itemize
@item Direct slots
@defvr {Slot} argument
@slotsubindex{argument}@c
The invalid argument.
@table @strong
@item Initargs
@t{:argument}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT generic function, , @t{argument}} (generic function)
@end table
@end defvr
@defvr {Slot} comment
@slotsubindex{comment}@c
An additional comment about the error.
@table @strong
@item Initargs
@t{:comment}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶COMMENT generic function, , @t{comment}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-cmdline-argument} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶INVALID-CMDLINE-ARGUMENT condition}@c
@conditionsubindex{invalid-cmdline-argument}@c
An invalid command-line argument error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT condition, , @t{invalid-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR condition, , @t{cmdline-option-error}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {invalid-environment-value} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶INVALID-ENVIRONMENT-VALUE condition}@c
@conditionsubindex{invalid-environment-value}@c
An invalid environment variable's value error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/environ․lisp file, , @t{environ.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT condition, , @t{invalid-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENTAL-OPTION-ERROR condition, , @t{environmental-option-error}} (condition)
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAL NET․DIDIERVERNA․CLON∶∶INVALID-ENVIRONMENT-VALUE method, , @t{env-val}} (method)
@item Direct slots
@defvr {Slot} argument
@slotsubindex{argument}@c
The invalid environment variable value.
@table @strong
@item Initargs
@t{:env-val}, @t{:argument}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAL generic function, , @t{env-val}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-negated-equal-syntax} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶INVALID-NEGATED-EQUAL-SYNTAX condition}@c
@conditionsubindex{invalid-negated-equal-syntax}@c
An error related to a negated-equal syntax.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR condition, , @t{cmdline-error}} (condition)
@end table
@end deftp
@deftp {Condition} {invalid-negated-syntax} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶INVALID-NEGATED-SYNTAX condition}@c
@conditionsubindex{invalid-negated-syntax}@c
An invalid negated syntax error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR condition, , @t{cmdline-option-error}} (condition)
@end table
@end deftp
@deftp {Condition} {invalid-short-equal-syntax} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶INVALID-SHORT-EQUAL-SYNTAX condition}@c
@conditionsubindex{invalid-short-equal-syntax}@c
An error related to a short-equal syntax.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR condition, , @t{cmdline-error}} (condition)
@end table
@end deftp
@deftp {Condition} {invalid-value} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶INVALID-VALUE condition}@c
@conditionsubindex{invalid-value}@c
An invalid value error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-ERROR condition, , @t{option-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COMMENT NET․DIDIERVERNA․CLON∶∶INVALID-VALUE method, , @t{comment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUE NET․DIDIERVERNA․CLON∶∶INVALID-VALUE method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid value.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUE generic function, , @t{value}} (generic function)
@end table
@end defvr
@defvr {Slot} comment
@slotsubindex{comment}@c
An additional comment about the error.
@table @strong
@item Initargs
@t{:comment}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶COMMENT generic function, , @t{comment}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {missing-cmdline-argument} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶MISSING-CMDLINE-ARGUMENT condition}@c
@conditionsubindex{missing-cmdline-argument}@c
A missing command-line argument error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR condition, , @t{cmdline-option-error}} (condition)
@end table
@end deftp
@deftp {Condition} {option-error} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPTION-ERROR condition}@c
@conditionsubindex{option-error}@c
An error related to an option.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@item Direct superclasses
@t{error} (condition)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-VALUE condition, , @t{invalid-value}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVALID-ARGUMENT condition, , @t{invalid-argument}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR condition, , @t{cmdline-option-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENVIRONMENTAL-OPTION-ERROR condition, , @t{environmental-option-error}} (condition)
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION NET․DIDIERVERNA․CLON∶∶OPTION-ERROR method, , @t{option}} (method)
@item Direct slots
@defvr {Slot} option
@slotsubindex{option}@c
The concerned option.
@table @strong
@item Initargs
@t{:option}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION generic function, , @t{option}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {spurious-cmdline-argument} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SPURIOUS-CMDLINE-ARGUMENT condition}@c
@conditionsubindex{spurious-cmdline-argument}@c
A spurious command-line argument error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/retrieval/cmdline․lisp file, , @t{cmdline.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-ERROR condition, , @t{cmdline-option-error}} (condition)
@item Direct methods
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶SPURIOUS-CMDLINE-ARGUMENT method, , @t{argument}} (method)
@item Direct slots
@defvr {Slot} argument
@slotsubindex{argument}@c
The spurious argument.
@table @strong
@item Initargs
@t{:argument}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT generic function, , @t{argument}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {unknown-cmdline-option-error} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR condition}@c
@conditionsubindex{unknown-cmdline-option-error}@c
An error related to an unknown command-line option.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR condition, , @t{cmdline-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR method, , @t{argument}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶UNKNOWN-CMDLINE-OPTION-ERROR method, , @t{name}} (method)
@end itemize
@item Direct slots
@defvr {Slot} item
@slotsubindex{item}@c
The option's name as it appears on the command-line.
@table @strong
@item Initargs
@t{:name}, @t{:item}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME generic function, , @t{name}} (generic function)
@end table
@end defvr
@defvr {Slot} argument
@slotsubindex{argument}@c
The option's command-line argument.
@table @strong
@item Initargs
@t{:argument}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT generic function, , @t{argument}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {unrecognized-negated-call-error} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-NEGATED-CALL-ERROR condition}@c
@conditionsubindex{unrecognized-negated-call-error}@c
An error related to an unrecognized negated call.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR condition, , @t{cmdline-error}} (condition)
@item Direct methods
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-CALL NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-NEGATED-CALL-ERROR method, , @t{negated-call}} (method)
@item Direct slots
@defvr {Slot} item
@slotsubindex{item}@c
The unrecognized negated call on the command-line.
@table @strong
@item Initargs
@t{:negated-call}, @t{:item}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-CALL generic function, , @t{negated-call}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {unrecognized-short-call-error} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-SHORT-CALL-ERROR condition}@c
@conditionsubindex{unrecognized-short-call-error}@c
An error related to an unrecognized short call.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-ERROR condition, , @t{cmdline-error}} (condition)
@item Direct methods
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-CALL NET․DIDIERVERNA․CLON∶∶UNRECOGNIZED-SHORT-CALL-ERROR method, , @t{short-call}} (method)
@item Direct slots
@defvr {Slot} item
@slotsubindex{item}@c
The unrecognized short call on the command-line.
@table @strong
@item Initargs
@t{:short-call}, @t{:item}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-CALL generic function, , @t{short-call}} (generic function)
@end table
@end defvr
@end table
@end deftp

@node Internal structures, Internal classes, Internal conditions, Internal definitions
@subsection Structures
@deftp {Structure} {cmdline-option} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION structure}@c
@structuresubindex{cmdline-option}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@item Direct superclasses
@t{structure-object} (structure)
@item Direct slots
@defvr {Slot} name
@slotsubindex{name}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-NAME function, , @t{cmdline-option-name}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-NAME❩ function, , @t{(setf cmdline-option-name)}} (function)
@end table
@end defvr
@defvr {Slot} option
@slotsubindex{option}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-OPTION function, , @t{cmdline-option-option}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-OPTION❩ function, , @t{(setf cmdline-option-option)}} (function)
@end table
@end defvr
@defvr {Slot} value
@slotsubindex{value}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-VALUE function, , @t{cmdline-option-value}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-VALUE❩ function, , @t{(setf cmdline-option-value)}} (function)
@end table
@end defvr
@defvr {Slot} source
@slotsubindex{source}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTION-SOURCE function, , @t{cmdline-option-source}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTION-SOURCE❩ function, , @t{(setf cmdline-option-source)}} (function)
@end table
@end defvr
@end table
@end deftp
@deftp {Structure} {frame} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FRAME structure}@c
@structuresubindex{frame}@c
The FRAME structure.@*
This structure hold layout properties used for printing.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@item Direct superclasses
@t{structure-object} (structure)
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME structure, , @t{highlight-frame}} (structure)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶FRAME PROGN method, , @t{close-frame}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶FRAME PROGN method, , @t{open-frame}} (method)
@end itemize
@item Direct slots
@defvr {Slot} sface
@slotsubindex{sface}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME-SFACE function, , @t{frame-sface}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-SFACE❩ function, , @t{(setf frame-sface)}} (function)
@end table
@end defvr
@defvr {Slot} left-margin
@slotsubindex{left-margin}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME-LEFT-MARGIN function, , @t{frame-left-margin}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-LEFT-MARGIN❩ function, , @t{(setf frame-left-margin)}} (function)
@end table
@end defvr
@defvr {Slot} right-margin
@slotsubindex{right-margin}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME-RIGHT-MARGIN function, , @t{frame-right-margin}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAME-RIGHT-MARGIN❩ function, , @t{(setf frame-right-margin)}} (function)
@end table
@end defvr
@end table
@end deftp
@deftp {Structure} {highlight-frame} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME structure}@c
@structuresubindex{highlight-frame}@c
The HIGHLIGHT-FRAME structure.@*
This structure holds both layout and highlight properties used for printing.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAME structure, , @t{frame}} (structure)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLOSE-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME PROGN method, , @t{close-frame}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPEN-FRAME COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME PROGN method, , @t{open-frame}} (method)
@end itemize
@item Direct slots
@defvr {Slot} highlight-property-instances
@slotsubindex{highlight-property-instances}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-FRAME-HIGHLIGHT-PROPERTY-INSTANCES function, , @t{highlight-frame-highlight-property-instances}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-FRAME-HIGHLIGHT-PROPERTY-INSTANCES❩ function, , @t{(setf highlight-frame-highlight-property-instances)}} (function)
@end table
@end defvr
@end table
@end deftp
@deftp {Structure} {highlight-property-instance} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE structure}@c
@structuresubindex{highlight-property-instance}@c
The HIGHLIGHT-PROPERTY-INSTANCE structure.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@item Direct superclasses
@t{structure-object} (structure)
@item Direct slots
@defvr {Slot} name
@slotsubindex{name}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-NAME function, , @t{highlight-property-instance-name}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-PROPERTY-INSTANCE-NAME❩ function, , @t{(setf highlight-property-instance-name)}} (function)
@end table
@end defvr
@defvr {Slot} value
@slotsubindex{value}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT-PROPERTY-INSTANCE-VALUE function, , @t{highlight-property-instance-value}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF HIGHLIGHT-PROPERTY-INSTANCE-VALUE❩ function, , @t{(setf highlight-property-instance-value)}} (function)
@end table
@end defvr
@end table
@end deftp

@node Internal classes, , Internal structures, Internal definitions
@subsection Classes
@deftp {Class} {abstract-class} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ABSTRACT-CLASS class}@c
@classsubindex{abstract-class}@c
The ABSTRACT-CLASS class.@*
This is the meta-class for abstract classes.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@t{standard-class} (class)
@item Direct methods
@itemize @bullet
@item
@t{validate-superclass} (method)
@item
@t{validate-superclass} (method)
@item
@t{make-instance} (method)
@end itemize
@end table
@end deftp
@deftp {Class} {container} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONTAINER class}@c
@classsubindex{container}@c
The CONTAINER class.@*
This class is a mixin used in synopsis and groups to represent the program's
command-line hierarchy.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/container․lisp file, , @t{container.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM class, , @t{item}} (class)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶GROUP class, , @t{group}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SYNOPSIS class, , @t{synopsis}} (class)
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{mapoptions}} (method)
@item
@t{initialize-instance} (method)
@item
@t{initialize-instance} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶CONTAINER NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶CONTAINER COMMON-LISP∶∶T method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{untraverse}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEMS NET․DIDIERVERNA․CLON∶∶CONTAINER method, , @t{items}} (method)
@end itemize
@item Direct slots
@defvr {Slot} items
@slotsubindex{items}@c
The items in the container.
@table @strong
@item Type
@t{list}
@item Initargs
@t{:items}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEMS generic function, , @t{items}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {context} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶CONTEXT class}@c
@classsubindex{context}@c
The CONTEXT class.@*
This class represents the associatiion of a synopsis and a set of command-line
options based on it.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/context․lisp file, , @t{context.lisp}} (file)
@item Direct superclasses
@t{standard-object} (class)
@item Direct methods
@itemize @bullet
@item
@t{initialize-instance} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{untraverse}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-P COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{potential-pack-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLON-OPTIONS-GROUP NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{clon-options-group}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{negated-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{short-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POSTFIX NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{postfix}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ERROR-HANDLER NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{error-handler}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{highlight}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{line-width}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶THEME NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{theme}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-PATH NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{search-path}} (method)
@item
@t{cmdline-options} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTIONS NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{cmdline-options}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SYNOPSIS NET․DIDIERVERNA․CLON∶∶CONTEXT method, , @t{synopsis}} (method)
@end itemize
@item Direct slots
@defvr {Slot} synopsis
@slotsubindex{synopsis}@c
The program synopsis.
@table @strong
@item Type
@t{net.didierverna.clon::synopsis}
@item Initargs
@t{:synopsis}
@item Initform
@t{net.didierverna.clon:*synopsis*}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶SYNOPSIS generic function, , @t{synopsis}} (generic function)
@end table
@end defvr
@defvr {Slot} progname
@slotsubindex{progname}@c
The program name as it appears on the command-line.
@table @strong
@item Type
@t{string}
@end table
@end defvr
@defvr {Slot} cmdline-options
@slotsubindex{cmdline-options}@c
The options from the command-line.
@table @strong
@item Type
@t{list}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶CMDLINE-OPTIONS generic function, , @t{cmdline-options}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF CMDLINE-OPTIONS❩ generic function, , @t{(setf cmdline-options)}} (generic function)
@end table
@end defvr
@defvr {Slot} remainder
@slotsubindex{remainder}@c
The non-Clon part of the command-line.
@table @strong
@item Type
@t{list}
@end table
@end defvr
@defvr {Slot} search-path
@slotsubindex{search-path}@c
The search path for Clon files.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶SEARCH-PATH generic function, , @t{search-path}} (generic function)
@end table
@end defvr
@defvr {Slot} theme
@slotsubindex{theme}@c
The theme filename.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶THEME generic function, , @t{theme}} (generic function)
@end table
@end defvr
@defvr {Slot} line-width
@slotsubindex{line-width}@c
The line width for help display.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH generic function, , @t{line-width}} (generic function)
@end table
@end defvr
@defvr {Slot} highlight
@slotsubindex{highlight}@c
Clon's output highlight mode.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHT generic function, , @t{highlight}} (generic function)
@end table
@end defvr
@defvr {Slot} error-handler
@slotsubindex{error-handler}@c
The behavior to adopt on option retrieval errors.
@table @strong
@item Type
@t{symbol}
@item Initform
@t{:quit}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ERROR-HANDLER generic function, , @t{error-handler}} (generic function)
@end table
@end defvr
@item Direct Default Initargs
@multitable @columnfractions 0.3 0.5
@headitem Initarg @tab Value
@item @t{:cmdline}
@tab @t{(net.didierverna.clon:cmdline)}
@end multitable
@end table
@end deftp
@deftp {Class} {enum} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENUM class}@c
@classsubindex{enum}@c
The ENUM class.@*
This class implements options whose values belong to a set of keywords.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/enum․lisp file, , @t{enum.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUED-OPTION class, , @t{valued-option}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM-BASE class, , @t{enum-base}} (class)
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶ENUM COMMON-LISP∶∶T method, , @t{stringify}} (method)
@end itemize
@item Direct slots
@defvr {Slot} argument-name
@slotsubindex{argument-name}@c
@table @strong
@item Initform
@t{"type"}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {enum-base} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ENUM-BASE class}@c
@classsubindex{enum-base}@c
The ENUM-BASE abstract class.@*
This class provides support for options including enumerated values.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/enum-base․lisp file, , @t{enum-base.lisp}} (file)
@item Direct superclasses
@t{standard-object} (class)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM class, , @t{enum}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶XSWITCH class, , @t{xswitch}} (class)
@end itemize
@item Direct methods
@itemize @bullet
@item
@t{initialize-instance} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM NET․DIDIERVERNA․CLON∶∶ENUM-BASE method, , @t{enum}} (method)
@end itemize
@item Direct slots
@defvr {Slot} enum
@slotsubindex{enum}@c
The set of possible values.
@table @strong
@item Initargs
@t{:enum}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM generic function, , @t{enum}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {face} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FACE class}@c
@classsubindex{face}@c
The FACE class.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/face․lisp file, , @t{face.lisp}} (file)
@item Direct superclasses
@t{standard-object} (class)
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶SFACE class, , @t{sface}} (class)
@item Direct methods
@itemize @bullet
@item
@t{initialize-instance} (method)
@item
@t{initialize-instance} (method)
@item
@t{initialize-instance} (method)
@item
@t{slot-unbound} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PARENT NET․DIDIERVERNA․CLON∶∶FACE method, , @t{parent}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SUBFACES NET․DIDIERVERNA․CLON∶∶FACE method, , @t{subfaces}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BACKGROUND NET․DIDIERVERNA․CLON∶∶FACE method, , @t{background}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FOREGROUND NET․DIDIERVERNA․CLON∶∶FACE method, , @t{foreground}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAMEDP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{framedp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CROSSED-OUT-P NET․DIDIERVERNA․CLON∶∶FACE method, , @t{crossed-out-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONCEALEDP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{concealedp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVERSEP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{inversep}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BLINK NET․DIDIERVERNA․CLON∶∶FACE method, , @t{blink}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNDERLINE NET․DIDIERVERNA․CLON∶∶FACE method, , @t{underline}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITALICP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{italicp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶INTENSITY NET․DIDIERVERNA․CLON∶∶FACE method, , @t{intensity}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM-SEPARATOR NET․DIDIERVERNA․CLON∶∶FACE method, , @t{item-separator}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶BOTTOM-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{bottom-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{top-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RIGHT-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{right-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LEFT-PADDING NET․DIDIERVERNA․CLON∶∶FACE method, , @t{left-padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VISIBLEP NET․DIDIERVERNA․CLON∶∶FACE method, , @t{visiblep}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME NET․DIDIERVERNA․CLON∶∶FACE method, , @t{name}} (method)
@end itemize
@item Direct slots
@defvr {Slot} name
@slotsubindex{name}@c
The face name.
@table @strong
@item Initargs
@t{:name}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶NAME generic function, , @t{name}} (generic function)
@end table
@end defvr
@defvr {Slot} visiblep
@slotsubindex{visiblep}@c
Whether the face is visible.
@table @strong
@item Initargs
@t{:visible}
@item Initform
@t{t}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶VISIBLEP generic function, , @t{visiblep}} (generic function)
@end table
@end defvr
@defvr {Slot} left-padding
@slotsubindex{left-padding}@c
The face left padding.@*
This property can take the following forms:@*
- <NUMBER>: the padding is relative to the enclosing face@comma{}@*
- SELF: the padding is set to wherever the face happens to be opened@comma{}
- (<NUMBER> ABSOLUTE): the padding is set in absolute value@comma{}@*
- (<NUMBER> :RELATIVE-TO <FACE-NAME>): the padding is set relatively to a
  parent face named FACE-NAME.
@table @strong
@item Initargs
@t{:padding-left}
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶LEFT-PADDING generic function, , @t{left-padding}} (generic function)
@end table
@end defvr
@defvr {Slot} right-padding
@slotsubindex{right-padding}@c
The face right padding.@*
This property can take the following forms:@*
- <NUMBER>: the padding is relative to the enclosing face@comma{}@*
- SELF: the padding is set to wherever the face happens to be closed@comma{}
- (<NUMBER> ABSOLUTE): the padding is set in absolute value@comma{}@*
- (<NUMBER> :RELATIVE-TO <FACE-NAME>): the padding is set relatively to a
  parent face named FACE-NAME.
@table @strong
@item Initargs
@t{:padding-right}
@item Initform
@t{(quote net.didierverna.clon::self)}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶RIGHT-PADDING generic function, , @t{right-padding}} (generic function)
@end table
@end defvr
@defvr {Slot} top-padding
@slotsubindex{top-padding}@c
The face top padding.@*
This property can take the following forms:@*
- nil: the output can start right away@comma{}@*
- 0: the output should start on the next line@comma{}@*
- N>0: there should be N empty lines before the output.
@table @strong
@item Initargs
@t{:padding-top}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶TOP-PADDING generic function, , @t{top-padding}} (generic function)
@end table
@end defvr
@defvr {Slot} bottom-padding
@slotsubindex{bottom-padding}@c
The face bottom padding.@*
This property can take the following forms:@*
- nil: the next output can start right at the end of this face's@comma{}
- 0: the next output should start on the next line@comma{}@*
- N>0: there should be N empty lines before the next output.
@table @strong
@item Initargs
@t{:padding-bottom}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶BOTTOM-PADDING generic function, , @t{bottom-padding}} (generic function)
@end table
@end defvr
@defvr {Slot} item-separator
@slotsubindex{item-separator}@c
The face item separator.
@table @strong
@item Initargs
@t{:item-separator}
@item Initform
@t{@hashchar{}@backslashchar{} }
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM-SEPARATOR generic function, , @t{item-separator}} (generic function)
@end table
@end defvr
@defvr {Slot} intensity
@slotsubindex{intensity}@c
The face intensity.
@table @strong
@item Initargs
@t{:intensity}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶INTENSITY generic function, , @t{intensity}} (generic function)
@end table
@end defvr
@defvr {Slot} italicp
@slotsubindex{italicp}@c
The face's italic status.
@table @strong
@item Initargs
@t{:italic}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITALICP generic function, , @t{italicp}} (generic function)
@end table
@end defvr
@defvr {Slot} underline
@slotsubindex{underline}@c
The face's underline level.
@table @strong
@item Initargs
@t{:underline}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNDERLINE generic function, , @t{underline}} (generic function)
@end table
@end defvr
@defvr {Slot} blink
@slotsubindex{blink}@c
The face's blink speed.
@table @strong
@item Initargs
@t{:blink}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶BLINK generic function, , @t{blink}} (generic function)
@end table
@end defvr
@defvr {Slot} inversep
@slotsubindex{inversep}@c
The face's inverse video status.
@table @strong
@item Initargs
@t{:inverse}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶INVERSEP generic function, , @t{inversep}} (generic function)
@end table
@end defvr
@defvr {Slot} concealedp
@slotsubindex{concealedp}@c
The face's concealed status.
@table @strong
@item Initargs
@t{:concealed}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONCEALEDP generic function, , @t{concealedp}} (generic function)
@end table
@end defvr
@defvr {Slot} crossed-out-p
@slotsubindex{crossed-out-p}@c
The face's crossed out status.
@table @strong
@item Initargs
@t{:crossed-out}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶CROSSED-OUT-P generic function, , @t{crossed-out-p}} (generic function)
@end table
@end defvr
@defvr {Slot} framedp
@slotsubindex{framedp}@c
The face's framed status.
@table @strong
@item Initargs
@t{:framed}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAMEDP generic function, , @t{framedp}} (generic function)
@end table
@end defvr
@defvr {Slot} foreground
@slotsubindex{foreground}@c
The face foreground.
@table @strong
@item Initargs
@t{:foreground}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶FOREGROUND generic function, , @t{foreground}} (generic function)
@end table
@end defvr
@defvr {Slot} background
@slotsubindex{background}@c
The face background.
@table @strong
@item Initargs
@t{:background}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶BACKGROUND generic function, , @t{background}} (generic function)
@end table
@end defvr
@defvr {Slot} subfaces
@slotsubindex{subfaces}@c
The face children.
@table @strong
@item Initargs
@t{:subfaces}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶SUBFACES generic function, , @t{subfaces}} (generic function)
@end table
@end defvr
@defvr {Slot} parent
@slotsubindex{parent}@c
The face parent.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶PARENT generic function, , @t{parent}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {flag} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶FLAG class}@c
@classsubindex{flag}@c
The FLAG class.@*
This class implements options that don't take any argument.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/flag․lisp file, , @t{flag.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION class, , @t{option}} (class)
@item Direct methods
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT NET․DIDIERVERNA․CLON∶∶FLAG COMMON-LISP∶∶T method, , @t{retrieve-from-environment}} (method)
@end table
@end deftp
@deftp {Class} {group} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶GROUP class}@c
@classsubindex{group}@c
The GROUP class.@*
This class groups other groups@comma{} options or strings together@comma{} effectively
implementing hierarchical program command-line.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/group․lisp file, , @t{group.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTAINER class, , @t{container}} (class)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶GROUP method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HEADER NET․DIDIERVERNA․CLON∶∶GROUP method, , @t{header}} (method)
@end itemize
@item Direct slots
@defvr {Slot} header
@slotsubindex{header}@c
The group's header.
@table @strong
@item Initargs
@t{:header}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶HEADER generic function, , @t{header}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {item} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶ITEM class}@c
@classsubindex{item}@c
The ITEM class.@*
This class is the base class for all synopsis items.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/item․lisp file, , @t{item.lisp}} (file)
@item Direct superclasses
@t{standard-object} (class)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TEXT class, , @t{text}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION class, , @t{option}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTAINER class, , @t{container}} (class)
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶ITEM AFTER method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶ITEM AROUND method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶ITEM AFTER method, , @t{untraverse}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIDDENP NET․DIDIERVERNA․CLON∶∶ITEM method, , @t{hiddenp}} (method)
@item
@t{traversedp} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TRAVERSEDP NET․DIDIERVERNA․CLON∶∶ITEM method, , @t{traversedp}} (method)
@end itemize
@item Direct slots
@defvr {Slot} traversedp
@slotsubindex{traversedp}@c
The item's traversal state.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶TRAVERSEDP generic function, , @t{traversedp}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF TRAVERSEDP❩ generic function, , @t{(setf traversedp)}} (generic function)
@end table
@end defvr
@defvr {Slot} hiddenp
@slotsubindex{hiddenp}@c
Whether the item is hidden in help strings.
@table @strong
@item Initargs
@t{:hidden}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIDDENP generic function, , @t{hiddenp}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {lispobj} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶LISPOBJ class}@c
@classsubindex{lispobj}@c
The LISPOBJ class.@*
This class implements read-from-string options.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/lispobj․lisp file, , @t{lispobj.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUED-OPTION class, , @t{valued-option}} (class)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶LISPOBJ COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶TYPESPEC NET․DIDIERVERNA․CLON∶∶LISPOBJ method, , @t{typespec}} (method)
@end itemize
@item Direct slots
@defvr {Slot} argument-name
@slotsubindex{argument-name}@c
@table @strong
@item Initform
@t{"obj"}
@end table
@end defvr
@defvr {Slot} typespec
@slotsubindex{typespec}@c
A type specifier the option's value should satisfy.
@table @strong
@item Initargs
@t{:typespec}
@item Initform
@t{t}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶TYPESPEC generic function, , @t{typespec}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {negatable} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶NEGATABLE class}@c
@classsubindex{negatable}@c
The NEGATABLE Class.@*
This class implements the negated syntax for the switch-based hierarchy.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/negatable․lisp file, , @t{negatable.lisp}} (file)
@item Direct superclasses
@t{standard-object} (class)
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶SWITCH-BASE class, , @t{switch-base}} (class)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶NEGATABLE method, , @t{retrieve-from-negated-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK-CHAR NET․DIDIERVERNA․CLON∶∶NEGATABLE method, , @t{negated-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-SYNTAX-HELP-SPEC-PREFIX NET․DIDIERVERNA․CLON∶∶NEGATABLE method, , @t{short-syntax-help-spec-prefix}} (method)
@end itemize
@end table
@end deftp
@deftp {Class} {option} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶OPTION class}@c
@classsubindex{option}@c
The OPTION class.@*
This is the base class for all options.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/option․lisp file, , @t{option.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM class, , @t{item}} (class)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FLAG class, , @t{flag}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUED-OPTION class, , @t{valued-option}} (class)
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶MAPOPTIONS COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{mapoptions}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{retrieve-from-negated-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-SHORT-CALL NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{retrieve-from-short-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-LONG-CALL NET․DIDIERVERNA․CLON∶∶OPTION COMMON-LISP∶∶T method, , @t{retrieve-from-long-call}} (method)
@item
@t{initialize-instance} (method)
@item
@t{initialize-instance} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK-CHAR NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{negated-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK-CHAR NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{short-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-STICKY-DISTANCE NET․DIDIERVERNA․CLON∶∶OPTION COMMON-LISP∶∶T method, , @t{option-sticky-distance}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶OPTION NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{untraverse}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{env-var}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DESCRIPTION NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{description}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LONG-NAME NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{long-name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-NAME NET․DIDIERVERNA․CLON∶∶OPTION method, , @t{short-name}} (method)
@end itemize
@item Direct slots
@defvr {Slot} short-name
@slotsubindex{short-name}@c
The option's short name.
@table @strong
@item Type
@t{(or null string)}
@item Initargs
@t{:short-name}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-NAME generic function, , @t{short-name}} (generic function)
@end table
@end defvr
@defvr {Slot} long-name
@slotsubindex{long-name}@c
The option's long name.
@table @strong
@item Type
@t{(or null string)}
@item Initargs
@t{:long-name}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶LONG-NAME generic function, , @t{long-name}} (generic function)
@end table
@end defvr
@defvr {Slot} description
@slotsubindex{description}@c
The option's description.
@table @strong
@item Type
@t{(or null string)}
@item Initargs
@t{:description}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶DESCRIPTION generic function, , @t{description}} (generic function)
@end table
@end defvr
@defvr {Slot} env-var
@slotsubindex{env-var}@c
The option's associated environment variable.
@table @strong
@item Type
@t{(or null string)}
@item Initargs
@t{:env-var}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENV-VAR generic function, , @t{env-var}} (generic function)
@end table
@end defvr
@item Direct Default Initargs
@multitable @columnfractions 0.3 0.5
@headitem Initarg @tab Value
@item @t{:internal}
@tab @t{nil}
@end multitable
@end table
@end deftp
@deftp {Class} {path} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶PATH class}@c
@classsubindex{path}@c
The PATH class.@*
This class implements options whose values are (colon-separated lists of)
pathnames.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/path․lisp file, , @t{path.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUED-OPTION class, , @t{valued-option}} (class)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶PATH COMMON-LISP∶∶T method, , @t{stringify}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PATH-TYPE NET․DIDIERVERNA․CLON∶∶PATH method, , @t{path-type}} (method)
@end itemize
@item Direct slots
@defvr {Slot} argument-name
@slotsubindex{argument-name}@c
@table @strong
@item Initform
@t{"path"}
@end table
@end defvr
@defvr {Slot} path-type
@slotsubindex{path-type}@c
The path type.
@table @strong
@item Initargs
@t{:type}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶PATH-TYPE generic function, , @t{path-type}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {sface} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SFACE class}@c
@classsubindex{sface}@c
The SFACE class.@*
An SFace is the association of a face and its raw sibling. The sibling is used
to create subfaces which would be missing from the original@comma{} user defined one.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶FACE class, , @t{face}} (class)
@item Direct methods
@ref{go to the NET․DIDIERVERNA․CLON∶∶SIBLING NET․DIDIERVERNA․CLON∶∶SFACE method, , @t{sibling}} (method)
@item Direct slots
@defvr {Slot} sibling
@slotsubindex{sibling}@c
The SFace's raw sibling.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶SIBLING generic function, , @t{sibling}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {sheet} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SHEET class}@c
@classsubindex{sheet}@c
The SHEET class.@*
This class implements the notion of sheet for printing Clon help.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/output/sheet․lisp file, , @t{sheet.lisp}} (file)
@item Direct superclasses
@t{standard-object} (class)
@item Direct methods
@itemize @bullet
@item
@t{initialize-instance} (method)
@item
@t{initialize-instance} (method)
@item
@t{frames} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAMES NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{frames}} (method)
@item
@t{column} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶COLUMN NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{column}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SFACE-TREE NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{sface-tree}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHTP NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{highlightp}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{line-width}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OUTPUT-STREAM NET․DIDIERVERNA․CLON∶∶SHEET method, , @t{output-stream}} (method)
@end itemize
@item Direct slots
@defvr {Slot} output-stream
@slotsubindex{output-stream}@c
The sheet's output stream.
@table @strong
@item Type
@t{stream}
@item Initargs
@t{:output-stream}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶OUTPUT-STREAM generic function, , @t{output-stream}} (generic function)
@end table
@end defvr
@defvr {Slot} line-width
@slotsubindex{line-width}@c
The sheet's line width.
@table @strong
@item Type
@t{(integer 1)}
@item Initargs
@t{:line-width}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶LINE-WIDTH generic function, , @t{line-width}} (generic function)
@end table
@end defvr
@defvr {Slot} highlightp
@slotsubindex{highlightp}@c
Whether to highlight SHEET's output.
@table @strong
@item Initargs
@t{:highlightp}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶HIGHLIGHTP generic function, , @t{highlightp}} (generic function)
@end table
@end defvr
@defvr {Slot} sface-tree
@slotsubindex{sface-tree}@c
The sheet's sface tree.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶SFACE-TREE generic function, , @t{sface-tree}} (generic function)
@end table
@end defvr
@defvr {Slot} column
@slotsubindex{column}@c
The sheet's current column.
@table @strong
@item Type
@t{(integer 0)}
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶COLUMN generic function, , @t{column}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF COLUMN❩ generic function, , @t{(setf column)}} (generic function)
@end table
@end defvr
@defvr {Slot} frames
@slotsubindex{frames}@c
The stack of currently open frames.
@table @strong
@item Type
@t{list}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶FRAMES generic function, , @t{frames}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF FRAMES❩ generic function, , @t{(setf frames)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {stropt} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶STROPT class}@c
@classsubindex{stropt}@c
The STROPT class.@*
This class implements options the values of which are strings.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/stropt․lisp file, , @t{stropt.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUED-OPTION class, , @t{valued-option}} (class)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶STROPT COMMON-LISP∶∶T method, , @t{stringify}} (method)
@end itemize
@item Direct slots
@defvr {Slot} argument-name
@slotsubindex{argument-name}@c
@table @strong
@item Initform
@t{"str"}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {switch} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SWITCH class}@c
@classsubindex{switch}@c
The SWITCH class.@*
This class implements boolean options.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/switch․lisp file, , @t{switch.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUED-OPTION class, , @t{valued-option}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SWITCH-BASE class, , @t{switch-base}} (class)
@end itemize
@item Direct methods
@itemize @bullet
@item
@t{initialize-instance} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶SWITCH COMMON-LISP∶∶T method, , @t{stringify}} (method)
@end itemize
@end table
@end deftp
@deftp {Class} {switch-base} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SWITCH-BASE class}@c
@classsubindex{switch-base}@c
The SWITCH-BASE abstract class.@*
This class provides support for options including boolean values.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/switch-base․lisp file, , @t{switch-base.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATABLE class, , @t{negatable}} (class)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SWITCH class, , @t{switch}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶XSWITCH class, , @t{xswitch}} (class)
@end itemize
@item Direct methods
@itemize @bullet
@item
@t{initialize-instance} (method)
@item
@t{initialize-instance} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLE NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{argument-style}} (method)
@item
@t{no-values} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NO-VALUES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{no-values}} (method)
@item
@t{yes-values} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶YES-VALUES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{yes-values}} (method)
@item
@t{argument-styles} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLES NET․DIDIERVERNA․CLON∶∶SWITCH-BASE method, , @t{argument-styles}} (method)
@end itemize
@item Direct slots
@defvr {Slot} argument-styles
@slotsubindex{argument-styles}@c
The possible argument styles.@*
The position of every argument style in the list must correspond to the
position of the associated strings in the yes-values and no-values slots.
@table @strong
@item Type
@t{list}
@item Initargs
@t{:argument-styles}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLES generic function, , @t{argument-styles}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF ARGUMENT-STYLES❩ generic function, , @t{(setf argument-styles)}} (generic function)
@end table
@end defvr
@defvr {Slot} yes-values
@slotsubindex{yes-values}@c
The possible 'yes' values.
@table @strong
@item Type
@t{list}
@item Initargs
@t{:yes-values}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶YES-VALUES generic function, , @t{yes-values}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF YES-VALUES❩ generic function, , @t{(setf yes-values)}} (generic function)
@end table
@end defvr
@defvr {Slot} no-values
@slotsubindex{no-values}@c
The possible 'no' values.
@table @strong
@item Type
@t{list}
@item Initargs
@t{:no-values}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶NO-VALUES generic function, , @t{no-values}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․CLON∶∶❨SETF NO-VALUES❩ generic function, , @t{(setf no-values)}} (generic function)
@end table
@end defvr
@defvr {Slot} argument-style
@slotsubindex{argument-style}@c
The selected argument style.
@table @strong
@item Type
@t{keyword}
@item Initargs
@t{:argument-style}
@item Initform
@t{:yes/no}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-STYLE generic function, , @t{argument-style}} (generic function)
@end table
@end defvr
@item Direct Default Initargs
@multitable @columnfractions 0.3 0.5
@headitem Initarg @tab Value
@item @t{:argument-type}
@tab @t{:optional}
@item @t{:argument-styles}
@tab @t{(quote (:yes/no :on/off :true/false :yup/nope :yeah/nah))}
@item @t{:yes-values}
@tab @t{(quote ("yes" "on" "true" "yup" "yeah"))}
@item @t{:no-values}
@tab @t{(quote ("no" "off" "false" "nope" "nah"))}
@end multitable
@end table
@end deftp
@deftp {Class} {synopsis} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶SYNOPSIS class}@c
@classsubindex{synopsis}@c
The SYNOPSIS class.@*
This class handles the description of the program's command-line options.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/synopsis․lisp file, , @t{synopsis.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTAINER class, , @t{container}} (class)
@item Direct methods
@itemize @bullet
@item
@t{initialize-instance} (method)
@item
@t{initialize-instance} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK-P COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{potential-pack-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLON-OPTIONS-GROUP NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{clon-options-group}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{potential-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{negated-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{short-pack}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶POSTFIX NET․DIDIERVERNA․CLON∶∶SYNOPSIS method, , @t{postfix}} (method)
@end itemize
@item Direct slots
@defvr {Slot} postfix
@slotsubindex{postfix}@c
A postfix to the program synopsis.
@table @strong
@item Type
@t{(or null string)}
@item Initargs
@t{:postfix}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶POSTFIX generic function, , @t{postfix}} (generic function)
@end table
@end defvr
@defvr {Slot} short-pack
@slotsubindex{short-pack}@c
The short pack string.
@table @strong
@item Type
@t{(or null string)}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK generic function, , @t{short-pack}} (generic function)
@end table
@end defvr
@defvr {Slot} negated-pack
@slotsubindex{negated-pack}@c
The negated pack string.
@table @strong
@item Type
@t{(or null string)}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶NEGATED-PACK generic function, , @t{negated-pack}} (generic function)
@end table
@end defvr
@defvr {Slot} potential-pack
@slotsubindex{potential-pack}@c
The potential pack string.
@table @strong
@item Type
@t{(or null string)}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶POTENTIAL-PACK generic function, , @t{potential-pack}} (generic function)
@end table
@end defvr
@defvr {Slot} clon-options-group
@slotsubindex{clon-options-group}@c
The Clon options group.
@table @strong
@item Type
@t{net.didierverna.clon::group}
@item Initargs
@t{:clon-options-group}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶CLON-OPTIONS-GROUP generic function, , @t{clon-options-group}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {text} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶TEXT class}@c
@classsubindex{text}@c
The TEXT class.@*
This class implements plain text objects appearing in a synopsis.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/text․lisp file, , @t{text.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶ITEM class, , @t{item}} (class)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH COMMON-LISP∶∶T NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK-NAME-CLASH NET․DIDIERVERNA․CLON∶∶TEXT COMMON-LISP∶∶T method, , @t{check-name-clash}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶UNTRAVERSE NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{untraverse}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTENTS NET․DIDIERVERNA․CLON∶∶TEXT method, , @t{contents}} (method)
@end itemize
@item Direct slots
@defvr {Slot} contents
@slotsubindex{contents}@c
The actual text string.
@table @strong
@item Type
@t{string}
@item Initargs
@t{:contents}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONTENTS generic function, , @t{contents}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {valued-option} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶VALUED-OPTION class}@c
@classsubindex{valued-option}@c
The VALUED-OPTION class.@*
This is the base class for options accepting arguments.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/valued․lisp file, , @t{valued.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION class, , @t{option}} (class)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SWITCH class, , @t{switch}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STROPT class, , @t{stropt}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶LISPOBJ class, , @t{lispobj}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶PATH class, , @t{path}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM class, , @t{enum}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶XSWITCH class, , @t{xswitch}} (class)
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-ENVIRONMENT NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method, , @t{retrieve-from-environment}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-NEGATED-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{retrieve-from-negated-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-SHORT-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{retrieve-from-short-call}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶RETRIEVE-FROM-LONG-CALL NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method, , @t{retrieve-from-long-call}} (method)
@item
@t{initialize-instance} (method)
@item
@t{initialize-instance} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶HELP-SPEC NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{help-spec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-SYNTAX-HELP-SPEC-PREFIX NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{short-syntax-help-spec-prefix}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SHORT-PACK-CHAR NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{short-pack-char}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶OPTION-STICKY-DISTANCE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION COMMON-LISP∶∶T method, , @t{option-sticky-distance}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFAULT-VALUE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{default-value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶FALLBACK-VALUE NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{fallback-value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-REQUIRED-P NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{argument-required-p}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-NAME NET․DIDIERVERNA․CLON∶∶VALUED-OPTION method, , @t{argument-name}} (method)
@end itemize
@item Direct slots
@defvr {Slot} argument-name
@slotsubindex{argument-name}@c
The option's argument display name.
@table @strong
@item Initargs
@t{:argument-name}
@item Initform
@t{"arg"}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-NAME generic function, , @t{argument-name}} (generic function)
@end table
@end defvr
@defvr {Slot} argument-required-p
@slotsubindex{argument-required-p}@c
Whether the option's argument is required.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶ARGUMENT-REQUIRED-P generic function, , @t{argument-required-p}} (generic function)
@end table
@end defvr
@defvr {Slot} fallback-value
@slotsubindex{fallback-value}@c
The option's fallback value.
@table @strong
@item Initargs
@t{:fallback-value}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶FALLBACK-VALUE generic function, , @t{fallback-value}} (generic function)
@end table
@end defvr
@defvr {Slot} default-value
@slotsubindex{default-value}@c
The option's default value.
@table @strong
@item Initargs
@t{:default-value}
@item Readers
@ref{go to the NET․DIDIERVERNA․CLON∶∶DEFAULT-VALUE generic function, , @t{default-value}} (generic function)
@end table
@end defvr
@item Direct Default Initargs
@multitable @columnfractions 0.3 0.5
@headitem Initarg @tab Value
@item @t{:argument-type}
@tab @t{:required}
@end multitable
@end table
@end deftp
@deftp {Class} {xswitch} ()
@anchor{go to the NET․DIDIERVERNA․CLON∶∶XSWITCH class}@c
@classsubindex{xswitch}@c
The XSWITCH class.@*
This class merges the functionalities of switches and enumerations.
As such@comma{} the negated syntax is available for extended xswitches.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․CLON package, , @t{net.didierverna.clon}}
@item Source
@ref{go to the net․didierverna․clon․core/src/options/xswitch․lisp file, , @t{xswitch.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶VALUED-OPTION class, , @t{valued-option}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶ENUM-BASE class, , @t{enum-base}} (class)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶SWITCH-BASE class, , @t{switch-base}} (class)
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CONVERT NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method, , @t{convert}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶CHECK NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method, , @t{check}} (method)
@item
@ref{go to the NET․DIDIERVERNA․CLON∶∶STRINGIFY NET․DIDIERVERNA․CLON∶∶XSWITCH COMMON-LISP∶∶T method, , @t{stringify}} (method)
@end itemize
@item Direct slots
@defvr {Slot} enum
@slotsubindex{enum}@c
The set of possible non-boolean values.
@table @strong
@end table
@end defvr
@end table
@end deftp



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Definitions, Top
@appendix Indexes
@menu
* Concept index::
* Function index::
* Variable index::
* Data type index::
@end menu


@c -------------
@c Concept index
@c -------------
@node Concept index, Function index, Indexes, Indexes
@appendixsec Concepts
@printindex cp

@page


@c --------------
@c Function index
@c --------------
@node Function index, Variable index, Concept index, Indexes
@appendixsec Functions
@printindex fn

@page


@c --------------
@c Variable index
@c --------------
@node Variable index, Data type index, Function index, Indexes
@appendixsec Variables
@printindex vr

@page


@c ---------------
@c Data type index
@c ---------------
@node Data type index, , Variable index, Indexes
@appendixsec Data types
@printindex tp

@bye

@c reference.texi ends here
